// <auto-generated />
using System;
using Group.Salto.DataAccess.Tenant.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Group.Salto.DataAccess.Tenant.Migrations
{
    [DbContext(typeof(SOMTenantContext))]
    [Migration("20190110081439_SoftDeleteQueues")]
    partial class SoftDeleteQueues
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Group.Salto.Entities.Tenant.AdvancedTechnicianListFilterPersons", b =>
                {
                    b.Property<int>("TechnicianListFilterId");

                    b.Property<int>("PeopleId");

                    b.HasKey("TechnicianListFilterId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("AdvancedTechnicianListFilterPersons");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.AdvancedTechnicianListFilters", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("UQ__Advanced__3214EC06FC66D039");

                    b.ToTable("AdvancedTechnicianListFilters");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.AssetsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("RegistryDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("TeamId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("AssetsAudit");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.AssetsAuditChanges", b =>
                {
                    b.Property<int>("AssetAuditId");

                    b.Property<string>("Property")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("NewValue")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("OldValue")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.HasKey("AssetAuditId", "Property");

                    b.ToTable("AssetsAuditChanges");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.AssetStatuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("IsDefault");

                    b.Property<bool?>("IsRetiredState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("AssetStatuses");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Audits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime");

                    b.Property<double?>("Height");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("TaskId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserConfigurationId");

                    b.Property<int?>("UserConfigurationSupplanterId");

                    b.Property<int>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserConfigurationId");

                    b.HasIndex("UserConfigurationSupplanterId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.BasicTechnicianListFilterCalendarPlanningViewConfiguration", b =>
                {
                    b.Property<int>("TechnicianListFilterId");

                    b.Property<int>("CalendarPlanningViewConfigurationId");

                    b.HasKey("TechnicianListFilterId", "CalendarPlanningViewConfigurationId");

                    b.HasIndex("CalendarPlanningViewConfigurationId");

                    b.ToTable("BasicTechnicianListFilterCalendarPlanningViewConfiguration");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.BasicTechnicianListFilters", b =>
                {
                    b.Property<int>("Id");

                    b.Property<decimal?>("MaxDistance");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<decimal?>("WorkLoad");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("UQ__BasicTec__3214EC06B9ADA133");

                    b.ToTable("BasicTechnicianListFilters");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.BasicTechnicianListFilterSkills", b =>
                {
                    b.Property<int>("TechnicianListFilterId");

                    b.Property<int>("SkillId");

                    b.Property<int?>("Level");

                    b.HasKey("TechnicianListFilterId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("BasicTechnicianListFilterSkills");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ErpSystemInstanceId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ExternalSystemNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("PeopleId");

                    b.Property<int?>("ServiceId");

                    b.Property<int>("Status");

                    b.Property<string>("Task")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("TaskId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("WorkorderId");

                    b.HasKey("Id");

                    b.HasIndex("ErpSystemInstanceId");

                    b.HasIndex("PeopleId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TaskId");

                    b.HasIndex("WorkorderId");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.BillingItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillingLineItemId");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Units");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("BillingLineItemId");

                    b.ToTable("BillingItems");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.BillingLineItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PredefinedServiceId");

                    b.Property<int>("ProjectId");

                    b.Property<int?>("TaskId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("WorkOrderCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("PredefinedServiceId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskId");

                    b.HasIndex("WorkOrderCategoryId");

                    b.ToTable("BillingLineItems");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.BillingRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Condition")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("ErpSystemInstanceId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("TaskId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("ErpSystemInstanceId");

                    b.HasIndex("TaskId");

                    b.ToTable("BillingRule");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.BillingRuleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillingRuleId");

                    b.Property<int>("ItemId");

                    b.Property<string>("Units")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("BillingRuleId");

                    b.HasIndex("ItemId");

                    b.ToTable("BillingRuleItem");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.BillLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillId");

                    b.Property<int>("ItemId");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<double>("Units");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ItemId", "SerialNumber");

                    b.ToTable("BillLine");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Brands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("Url")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.CalendarEvents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CalendarId");

                    b.Property<int?>("Category");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("CostHour")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("DeletedOccurrence")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasMaxLength(140)
                        .IsUnicode(false);

                    b.Property<int?>("Duration");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("HasEnd");

                    b.Property<DateTime>("ModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("NumberOfRepetitions");

                    b.Property<int?>("ParentEventId");

                    b.Property<int?>("RepeatOnDayNumber");

                    b.Property<bool?>("RepeatOnFriday");

                    b.Property<bool?>("RepeatOnMonday");

                    b.Property<int?>("RepeatOnMonthNumber");

                    b.Property<bool?>("RepeatOnSaturday");

                    b.Property<bool?>("RepeatOnSunday");

                    b.Property<bool?>("RepeatOnThursday");

                    b.Property<bool?>("RepeatOnTuesday");

                    b.Property<bool?>("RepeatOnWednesday");

                    b.Property<int?>("RepetitionPeriod");

                    b.Property<int?>("RepetitionType");

                    b.Property<long?>("ReplacedEventOccurrenceTs")
                        .HasColumnName("ReplacedEventOccurrenceTS");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("StartTime");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("ParentEventId");

                    b.ToTable("CalendarEvents");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.CalendarPlanningViewConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CalendarPlanningViewConfigurationId");

                    b.Property<bool?>("IsDefault");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("UserConfigurationId");

                    b.HasKey("Id");

                    b.HasIndex("CalendarPlanningViewConfigurationId");

                    b.HasIndex("UserConfigurationId");

                    b.ToTable("CalendarPlanningViewConfiguration");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.CalendarPlanningViewConfigurationPeople", b =>
                {
                    b.Property<int>("ViewId");

                    b.Property<int>("PeopleId");

                    b.HasKey("ViewId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("CalendarPlanningViewConfigurationPeople");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.CalendarPlanningViewConfigurationPeopleCollection", b =>
                {
                    b.Property<int>("ViewId");

                    b.Property<int>("PeopleCollectionId");

                    b.HasKey("ViewId", "PeopleCollectionId");

                    b.HasIndex("PeopleCollectionId");

                    b.ToTable("CalendarPlanningViewConfigurationPeopleCollection");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Calendars", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasMaxLength(140)
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsPrivate");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Clients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Alias")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("BankAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("BankCity")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("BankCode")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("BankPostalCode")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("BranchNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ComercialName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ContableCode")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ControlDigit")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CorporateName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("IdIcg")
                        .HasColumnName("IdICG");

                    b.Property<string>("InternCode")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Mail")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("MunicipalityId");

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PostalCodeId");

                    b.Property<string>("SwiftCode")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("UnListed");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("Web")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ClosingCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClosingCodesFatherId");

                    b.Property<int?>("CollectionsClosureCodesId");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("ClosingCodesFatherId");

                    b.HasIndex("CollectionsClosureCodesId");

                    b.ToTable("ClosingCodes");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.CollectionsClosureCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("CollectionsClosureCodes");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.CollectionsExtraField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("CollectionsExtraField");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.CollectionsExtraFieldExtraField", b =>
                {
                    b.Property<int>("CollectionsExtraFieldId");

                    b.Property<int>("ExtraFieldId");

                    b.Property<int?>("Position")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((2147483647))");

                    b.HasKey("CollectionsExtraFieldId", "ExtraFieldId");

                    b.HasIndex("ExtraFieldId");

                    b.ToTable("CollectionsExtraFieldExtraField");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.CollectionsTypesWorkOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("CollectionsTypesWorkOrders");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Companies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("CostKm");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.CompaniesCostHistorical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<double>("CostKm");

                    b.Property<DateTime>("Until")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompaniesCostHistorical");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Contacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstSurname")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ContactsFinalClients", b =>
                {
                    b.Property<int>("FinalClientId");

                    b.Property<int>("ContactId");

                    b.HasKey("FinalClientId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactsFinalClients");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ContactsLocationsFinalClients", b =>
                {
                    b.Property<int>("LocationId");

                    b.Property<int>("ContactId");

                    b.HasKey("LocationId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactsLocationsFinalClients");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ContractContacts", b =>
                {
                    b.Property<int>("ContractId");

                    b.Property<int>("ContactId");

                    b.HasKey("ContractId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("ContractContacts");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Contracts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("ClientId");

                    b.Property<int>("ContractTypeId");

                    b.Property<string>("ContractUrl")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Object")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int?>("PeopleId");

                    b.Property<string>("Reference")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("Signer")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PeopleId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.DerivedServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClosingCodesIdN1");

                    b.Property<int?>("ClosingCodesIdN2");

                    b.Property<int?>("ClosingCodesIdN3");

                    b.Property<string>("Description")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("ExternalIdentifier")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("IcgId");

                    b.Property<string>("InternalIdentifier")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Observations")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<int?>("PeopleResponsibleId");

                    b.Property<int>("PredefinedServicesId");

                    b.Property<int>("ProjectId");

                    b.Property<int?>("ServiceStatesId");

                    b.Property<int?>("SubcontractResponsibleId");

                    b.Property<int>("TaskId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("ClosingCodesIdN1");

                    b.HasIndex("ClosingCodesIdN2");

                    b.HasIndex("ClosingCodesIdN3");

                    b.HasIndex("PeopleResponsibleId");

                    b.HasIndex("PredefinedServicesId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubcontractResponsibleId");

                    b.HasIndex("TaskId");

                    b.ToTable("DerivedServices");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.DnAndMaterialsAnalysis", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int?>("Bill");

                    b.Property<string>("ExternalSystemNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("ItemCode");

                    b.Property<string>("ItemName")
                        .HasMaxLength(100);

                    b.Property<string>("ItemSerialNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<decimal?>("PVP")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("People");

                    b.Property<decimal?>("PurchaseCost")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("Status");

                    b.Property<decimal?>("TotalDeliveryNoteCost")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("TotalDeliveryNoteSalePrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("Units");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("WorkOrder");

                    b.HasKey("Id");

                    b.ToTable("DnAndMaterialsAnalysis");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ErpItemsSyncConfig", b =>
                {
                    b.Property<int>("TenantId");

                    b.Property<int>("ErpSystemInstanceId");

                    b.HasKey("TenantId");

                    b.HasIndex("ErpSystemInstanceId");

                    b.ToTable("ErpItemsSyncConfig");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ErpSystemInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatabaseIpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DatabaseName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DatabasePwd")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DatabaseUser")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ErpSystemIdentifier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("ErpSystemInstance");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ErpSystemInstanceQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ErpSystemInstanceId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("SqlQuery")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("ErpSystemInstanceId");

                    b.ToTable("ErpSystemInstanceQuery");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Expenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("ExpenseTicketId");

                    b.Property<int>("ExpenseTypeId");

                    b.Property<double>("Factor");

                    b.Property<int>("PaymentMethodId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseTicketId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExpensesTicketFile", b =>
                {
                    b.Property<int>("ExpenseTicketId");

                    b.Property<int>("SomFileId");

                    b.HasKey("ExpenseTicketId", "SomFileId");

                    b.HasIndex("SomFileId");

                    b.ToTable("ExpensesTicketFile");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExpensesTickets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ExpenseTicketStatusId");

                    b.Property<string>("PaymentInformation")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("PeopleId");

                    b.Property<int?>("PeopleValidatorId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('Pending')")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<DateTime?>("ValidationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ValidationObservations")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int?>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseTicketStatusId");

                    b.HasIndex("PeopleId");

                    b.HasIndex("PeopleValidatorId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("ExpensesTickets");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExpensesTicketsFiles", b =>
                {
                    b.Property<int>("ExpenseTicketId");

                    b.Property<Guid>("Id");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("ExpenseTicketId", "Id");

                    b.ToTable("ExpensesTicketsFiles");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExpenseTicketStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("ExpenseTicketStatuses");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExpenseTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Unit")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("ExpenseTypes");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExternalServicesConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssetQueueId");

                    b.Property<int?>("AssetWoExternalStatusId");

                    b.Property<int?>("AssetWoStatusId");

                    b.Property<string>("ExternalService")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("FinalClientId");

                    b.Property<int?>("FlowId");

                    b.Property<int?>("LocationId");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("QueueId");

                    b.Property<int?>("TaskId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("WoCategoryId");

                    b.Property<int?>("WoExternalStatusId");

                    b.Property<int?>("WoStatusId");

                    b.HasKey("Id");

                    b.HasIndex("AssetQueueId");

                    b.HasIndex("AssetWoExternalStatusId");

                    b.HasIndex("AssetWoStatusId");

                    b.HasIndex("ExternalService")
                        .IsUnique()
                        .HasName("UQ__External__E71D0598903D98C7")
                        .HasFilter("[ExternalService] IS NOT NULL");

                    b.HasIndex("FinalClientId");

                    b.HasIndex("FlowId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("QueueId");

                    b.HasIndex("TaskId");

                    b.HasIndex("WoCategoryId");

                    b.HasIndex("WoExternalStatusId");

                    b.HasIndex("WoStatusId");

                    b.ToTable("ExternalServicesConfiguration");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExternalServicesConfigurationProjectCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AssetMailAlert");

                    b.Property<string>("AssetSerialNumberProperty")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("ConfigurationId");

                    b.Property<int?>("ProjectId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("WoCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("WoCategoryId");

                    b.ToTable("ExternalServicesConfigurationProjectCategories");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExternalServicesConfigurationProjectCategoriesProperties", b =>
                {
                    b.Property<int>("ExternalServicesConfigurationProjectCategoriesId")
                        .HasColumnName("ExternalServicesConfiguration_ProjectCategoriesId");

                    b.Property<string>("ColumnName")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<bool?>("NoApplies");

                    b.Property<string>("Value")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("ExternalServicesConfigurationProjectCategoriesId", "ColumnName");

                    b.ToTable("ExternalServicesConfigurationProjectCategoriesProperties");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExternalServicesConfigurationSites", b =>
                {
                    b.Property<int>("ExternalServicesConfigurationId");

                    b.Property<int>("FinalClientId");

                    b.Property<string>("ExtClientId")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("ExtSiteInitialChar");

                    b.Property<int?>("ExtSiteLength");

                    b.HasKey("ExternalServicesConfigurationId", "FinalClientId", "ExtClientId");

                    b.HasIndex("FinalClientId");

                    b.ToTable("ExternalServicesConfigurationSites");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExternalSystemImportData", b =>
                {
                    b.Property<string>("ImportCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Property")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ExternalSystem")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<int?>("WorkOrderId");

                    b.HasKey("ImportCode", "Property");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("ExternalSystemImportData");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExternalWorkOrderStatusesTranslations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DescriptionText");

                    b.Property<int?>("ExternalWorkOrderStatusesId");

                    b.Property<int>("LanguageId");

                    b.Property<string>("NameText");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("ExternalWorkOrderStatusesId");

                    b.ToTable("ExternalWorkOrderStatusesTranslations");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExternalWorOrderStatuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("IdIcg")
                        .HasColumnName("IdICG")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("ExternalWorOrderStatuses");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExtraFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllowedStringValues")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<bool>("DelSystem");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("ErpSystemInstanceQueryId");

                    b.Property<bool?>("IsMandatory");

                    b.Property<bool?>("MultipleChoice");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(900)
                        .IsUnicode(false);

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("ErpSystemInstanceQueryId");

                    b.ToTable("ExtraFields");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExtraFieldsValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BooleaValue");

                    b.Property<DateTime?>("DataValue")
                        .HasColumnType("datetime");

                    b.Property<double?>("DecimalValue");

                    b.Property<int?>("DerivedServiceId");

                    b.Property<int?>("EnterValue");

                    b.Property<int>("ExtraFieldId");

                    b.Property<int?>("ServiceId");

                    b.Property<byte[]>("Signature");

                    b.Property<string>("StringValue")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("WorkOrderDeritativeId");

                    b.Property<int?>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("DerivedServiceId");

                    b.HasIndex("ExtraFieldId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("WorkOrderDeritativeId");

                    b.ToTable("ExtraFieldsValues");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Families", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.FinalClients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("IcgId");

                    b.Property<string>("IdExtern")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Nif")
                        .IsRequired()
                        .HasColumnName("NIF")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int>("OriginId");

                    b.Property<int?>("PeopleCommercialId");

                    b.Property<string>("Phone1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone3")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("PeopleCommercialId");

                    b.ToTable("FinalClients");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.FinalClientSiteCalendar", b =>
                {
                    b.Property<int>("FinalClientSiteId");

                    b.Property<int>("CalendarId");

                    b.Property<int>("CalendarPriority");

                    b.HasKey("FinalClientSiteId", "CalendarId");

                    b.HasIndex("CalendarId");

                    b.ToTable("FinalClientSiteCalendar");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Flows", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Flows");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.FormConfigs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Page")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("PageId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("FormConfigs");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.FormElements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FormConfigsId");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("Value")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FormConfigsId");

                    b.ToTable("FormElements");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Guarantee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Armored")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("BlnEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("BlnStartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdExternal");

                    b.Property<DateTime?>("ProEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ProStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Provider")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Standard")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StdEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StdStartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Guarantee");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.HiredServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("HiredServices");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("ErpReference")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<byte[]>("ErpVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<bool>("SyncErp");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ItemsPointsRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId");

                    b.Property<double>("Points");

                    b.Property<int>("PointsRateId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PointsRateId");

                    b.ToTable("ItemsPointsRate");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ItemsPurchaseRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId");

                    b.Property<double>("Price");

                    b.Property<int>("PurchaseRateId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PurchaseRateId");

                    b.ToTable("ItemsPurchaseRate");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ItemsSalesRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId");

                    b.Property<double>("Price");

                    b.Property<int>("SalesRateId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("SalesRateId");

                    b.ToTable("ItemsSalesRate");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ItemsSerialNumber", b =>
                {
                    b.Property<int>("ItemId");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("ItemId", "SerialNumber");

                    b.HasIndex("SerialNumber")
                        .IsUnique()
                        .HasName("UQ__ItemsSer__048A000827618D28");

                    b.ToTable("ItemsSerialNumber");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Journeys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyVehicleId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("EndKm");

                    b.Property<bool>("Finished");

                    b.Property<bool>("IsCompanyVehicle");

                    b.Property<string>("Observations")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("PeopleId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<double>("StartKm");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("PeopleId");

                    b.ToTable("Journeys");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.JourneysStates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime");

                    b.Property<int>("JourneyId");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Observations")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("PredefinedDayStatesId");

                    b.Property<int?>("PredefinedReasonsId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("JourneyId");

                    b.ToTable("JourneysStates");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Knowledge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Knowledge");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.KnowledgePeople", b =>
                {
                    b.Property<int>("KnowledgeId");

                    b.Property<int>("PeopleId");

                    b.Property<int>("Maturity");

                    b.HasKey("KnowledgeId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("KnowledgePeople");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.KnowledgeSubContracts", b =>
                {
                    b.Property<int>("KnowledgeId");

                    b.Property<int>("SubContractId");

                    b.Property<int>("Maturity");

                    b.HasKey("KnowledgeId", "SubContractId");

                    b.HasIndex("SubContractId");

                    b.ToTable("KnowledgeSubContracts");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.KnowledgeToolsType", b =>
                {
                    b.Property<int>("KnowledgeId");

                    b.Property<int>("ToolsTypeId");

                    b.HasKey("KnowledgeId", "ToolsTypeId");

                    b.HasIndex("ToolsTypeId");

                    b.ToTable("KnowledgeToolsType");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.KnowledgeWorkOrderTypes", b =>
                {
                    b.Property<int>("KnowledgeId");

                    b.Property<int>("WorkOrderTypeId");

                    b.HasKey("KnowledgeId", "WorkOrderTypeId");

                    b.HasIndex("WorkOrderTypeId");

                    b.ToTable("KnowledgeWorkOrderTypes");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.LiteralsPreconditions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComparisonOperator")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ExtraFieldId");

                    b.Property<string>("NomCampModel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("PreconditionId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("ExtraFieldId");

                    b.HasIndex("PreconditionId");

                    b.ToTable("LiteralsPreconditions");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.LocationCalendar", b =>
                {
                    b.Property<int>("LocationId");

                    b.Property<int>("CalendarId");

                    b.Property<int>("CalendarPriority");

                    b.HasKey("LocationId", "CalendarId");

                    b.HasIndex("CalendarId");

                    b.ToTable("LocationCalendar");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Locations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Area")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("CityId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("CountryId");

                    b.Property<string>("Escala")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("GateNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("HashCity");

                    b.Property<int?>("HashProvincie");

                    b.Property<int?>("HashSubzone");

                    b.Property<int?>("HashZone");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<int?>("MunicipalityId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Number");

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int?>("PeopleResponsibleLocationId");

                    b.Property<string>("Phone1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone3")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PostalCode");

                    b.Property<int?>("PostalCodeId");

                    b.Property<string>("Province")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("RegionId");

                    b.Property<int?>("StateId");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("StreetType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Subzone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("Zone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("PeopleResponsibleLocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.LocationsFinalClients", b =>
                {
                    b.Property<int>("FinalClientId");

                    b.Property<int>("LocationId");

                    b.Property<string>("CompositeCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("OriginId");

                    b.Property<int?>("PeopleCommercialId");

                    b.Property<string>("Phone1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone3")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FinalClientId", "LocationId");

                    b.HasIndex("CompositeCode")
                        .IsUnique()
                        .HasName("UQ_LocationsFinalClients_CompositeCode");

                    b.HasIndex("LocationId");

                    b.HasIndex("PeopleCommercialId");

                    b.ToTable("LocationsFinalClients");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.MailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Subject")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("MailTemplate");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.MainOtstatics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColumnName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<double?>("Percentage")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0.0))");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("MainOTStatics");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.MainWoregistry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArchivedWo")
                        .HasColumnName("ArchivedWO");

                    b.Property<DateTime?>("ArrivalTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Duration");

                    b.Property<bool?>("ExportServices");

                    b.Property<bool?>("ExportWo")
                        .HasColumnName("ExportWO");

                    b.Property<int?>("FilteredWo")
                        .HasColumnName("FilteredWO");

                    b.Property<bool?>("OnlyServices");

                    b.Property<int?>("PersonId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("VisibleWo")
                        .HasColumnName("VisibleWO");

                    b.HasKey("Id");

                    b.ToTable("MainWORegistry");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.MainWoViewConfigurationsColumns", b =>
                {
                    b.Property<int>("UserMainWoviewConfigurationId")
                        .HasColumnName("UserMainWOViewConfigurationId");

                    b.Property<int>("ColumnId");

                    b.Property<int>("ColumnOrder");

                    b.Property<DateTime?>("FilterEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FilterStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FilterValues")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.HasKey("UserMainWoviewConfigurationId", "ColumnId");

                    b.ToTable("MainWoViewConfigurationsColumns");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.MainWoviewConfigurationsGroups", b =>
                {
                    b.Property<int>("UserMainWoviewConfigurationId")
                        .HasColumnName("UserMainWOViewConfigurationId");

                    b.Property<int>("PeopleCollectionId");

                    b.HasKey("UserMainWoviewConfigurationId", "PeopleCollectionId");

                    b.HasIndex("PeopleCollectionId");

                    b.ToTable("MainWOViewConfigurationsGroups");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.MainWoViewConfigurationsPeople", b =>
                {
                    b.Property<int>("UserMainWoViewConfigurationId");

                    b.Property<int>("PeopleId");

                    b.HasKey("UserMainWoViewConfigurationId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("MainWoViewConfigurationsPeople");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.MaterialForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("ExtraFieldValueId");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("TeamId");

                    b.Property<int?>("Units");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("ExtraFieldValueId");

                    b.HasIndex("TeamId");

                    b.ToTable("MaterialForm");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Models", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("Url")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.OptimizationFunctionWeights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<double>("EconomicCostWeight");

                    b.Property<double>("ExternalTechnicianCostFactor");

                    b.Property<double>("FulfillSlaweight")
                        .HasColumnName("FulfillSLAWeight");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double>("OverMeanWorkLoadCost");

                    b.Property<double>("ReplanPenalty");

                    b.Property<double>("ReplanPenaltyFixed");

                    b.Property<double>("TravelCost");

                    b.Property<double>("TravelSpeed");

                    b.Property<double>("UnattendedWopenalty")
                        .HasColumnName("UnattendedWOPenalty");

                    b.Property<double>("UnmetSkillPenalty");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("OptimizationFunctionWeights");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PaymentMethods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Mode")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.People", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnnualHours");

                    b.Property<int?>("CompanyId");

                    b.Property<double?>("CostKm");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Dni")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DocumentationUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FisrtSurname")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("IcgId");

                    b.Property<bool?>("IsActive");

                    b.Property<int>("IsClientWorker");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("PointsRateId");

                    b.Property<int>("Priority");

                    b.Property<int?>("ResponsibleId");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("SubcontractId");

                    b.Property<bool?>("SubcontractorResponsible");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("UserConfigurationId");

                    b.Property<string>("WarehouseId")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("WorkCenterId");

                    b.Property<double?>("WorkRadiusKm");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PointsRateId");

                    b.HasIndex("SubcontractId");

                    b.HasIndex("UserConfigurationId");

                    b.HasIndex("WorkCenterId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleCalendars", b =>
                {
                    b.Property<int>("PeopleId");

                    b.Property<int>("CalendarId");

                    b.Property<int>("CalendarPriority");

                    b.HasKey("PeopleId", "CalendarId");

                    b.HasIndex("CalendarId");

                    b.ToTable("PeopleCalendars");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleCollectionCalendars", b =>
                {
                    b.Property<int>("PeopleCollectionId");

                    b.Property<int>("CalendarId");

                    b.Property<int>("CalendarPriority");

                    b.HasKey("PeopleCollectionId", "CalendarId");

                    b.HasIndex("CalendarId");

                    b.ToTable("PeopleCollectionCalendars");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleCollections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Info")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("PeopleCollections");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleCollectionsAdmins", b =>
                {
                    b.Property<int>("PeopleCollectionId");

                    b.Property<int>("PeopleId");

                    b.HasKey("PeopleCollectionId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("PeopleCollectionsAdmins");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleCollectionsPeople", b =>
                {
                    b.Property<int>("PeopleId");

                    b.Property<int>("PeopleCollectionId");

                    b.HasKey("PeopleId", "PeopleCollectionId");

                    b.HasIndex("PeopleCollectionId");

                    b.ToTable("PeopleCollectionsPeople");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleCollectionsPermissions", b =>
                {
                    b.Property<int>("PermissionId");

                    b.Property<int>("PeopleCollectionId");

                    b.HasKey("PermissionId", "PeopleCollectionId");

                    b.HasIndex("PeopleCollectionId");

                    b.ToTable("PeopleCollectionsPermissions");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("HourCost");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PeopleId");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("PeopleId");

                    b.ToTable("PeopleCost");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleCostHistorical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CostKm");

                    b.Property<int?>("PeopleId");

                    b.Property<DateTime>("Until")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("PeopleId");

                    b.ToTable("PeopleCostHistorical");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeoplePermissions", b =>
                {
                    b.Property<int>("PeopleId");

                    b.Property<int>("PermissionId");

                    b.Property<DateTime>("AssignmentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PeopleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PeoplePermissions");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleProjects", b =>
                {
                    b.Property<int>("PeopleId");

                    b.Property<int>("ProjectId");

                    b.Property<bool>("IsManager");

                    b.HasKey("PeopleId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("PeopleProjects");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleRegisteredPda", b =>
                {
                    b.Property<int>("PeopleId");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("DeviceName")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("GcmId")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.HasKey("PeopleId", "DeviceId");

                    b.HasIndex("DeviceId")
                        .IsUnique()
                        .HasName("UniqueDevice");

                    b.ToTable("PeopleRegisteredPda");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Permissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CanBeDeleted");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("Observations");

                    b.Property<string>("Tasks");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PermissionsQueues", b =>
                {
                    b.Property<int>("PermissionId");

                    b.Property<int>("QueueId");

                    b.HasKey("PermissionId", "QueueId");

                    b.HasIndex("QueueId");

                    b.ToTable("PermissionsQueues");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PermissionsTasks", b =>
                {
                    b.Property<int>("PermissionId");

                    b.Property<int>("TaskId");

                    b.HasKey("PermissionId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("PermissionsTasks");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PlanificationCriterias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowTollRoads");

                    b.Property<decimal>("EconomicCostWeight");

                    b.Property<decimal>("ExternalTechnicianCostFactor");

                    b.Property<decimal>("FullfillSlaweight")
                        .HasColumnName("FullfillSLAWeight");

                    b.Property<int>("MaxExecutionTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("OverMeanWorkLoadCost");

                    b.Property<int>("PeopleId");

                    b.Property<decimal>("ReplanPenalty");

                    b.Property<decimal>("ReplanPenaltyFixed");

                    b.Property<decimal>("TechnicianCostFactor");

                    b.Property<decimal>("TollCostFactor");

                    b.Property<decimal>("UnattendedWopenalty")
                        .HasColumnName("UnattendedWOPenalty");

                    b.Property<decimal>("UnmetSkillOverhead");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("PeopleId");

                    b.ToTable("PlanificationCriterias");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PlanificationProcessCalendarChangeTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CalendarId");

                    b.Property<int?>("CalendarPriority");

                    b.Property<int?>("EventId");

                    b.Property<bool?>("IsDisponible");

                    b.Property<DateTime?>("LastCheckTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PersonId");

                    b.Property<int>("PlanificationProcessId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("PlanificationProcessCalendarChangeTracker");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PlanificationProcesses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CheckFrequency");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("ExecutionCalendar");

                    b.Property<int>("Horizon")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((3))");

                    b.Property<int>("HumanResourcesFilter");

                    b.Property<DateTime?>("LastModification")
                        .HasColumnType("datetime");

                    b.Property<int>("MaxDuration");

                    b.Property<int?>("MinutesToSlaend")
                        .HasColumnName("MinutesToSLAEnd");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("StartCriteria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("Weights");

                    b.Property<int>("WorkOrdersFilter");

                    b.HasKey("Id");

                    b.HasIndex("ExecutionCalendar");

                    b.HasIndex("HumanResourcesFilter");

                    b.HasIndex("Weights");

                    b.HasIndex("WorkOrdersFilter");

                    b.ToTable("PlanificationProcesses");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PlanificationProcessWorkOrderChangeTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("LastCheckTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<int>("PlanificationProcessId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("WorkOrderId");

                    b.HasKey("Id");

                    b.ToTable("PlanificationProcessWorkOrderChangeTracker");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PlanningPanelViewConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EndViewTime");

                    b.Property<bool?>("IsDefault");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("PeopleOwnerId");

                    b.Property<int?>("StartViewTime");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("UsersMainWoViewConfigurationId");

                    b.HasKey("Id");

                    b.HasIndex("PeopleOwnerId");

                    b.HasIndex("UsersMainWoViewConfigurationId");

                    b.ToTable("PlanningPanelViewConfiguration");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PlanningPanelViewConfigurationPeople", b =>
                {
                    b.Property<int>("PlanningPanelViewConfigurationId");

                    b.Property<int>("PeopleId");

                    b.HasKey("PlanningPanelViewConfigurationId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("PlanningPanelViewConfigurationPeople");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PlanningPanelViewConfigurationPeopleCollection", b =>
                {
                    b.Property<int>("PlanningPanelViewConfigurationId");

                    b.Property<int>("PeopleCollectionId");

                    b.HasKey("PlanningPanelViewConfigurationId", "PeopleCollectionId");

                    b.HasIndex("PeopleCollectionId");

                    b.ToTable("PlanningPanelViewConfigurationPeopleCollection");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PointsRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("ErpReference")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("PointsRate");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PostconditionCollections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("TaskId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("PostconditionCollections");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Postconditions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BooleanValue");

                    b.Property<DateTime?>("DateValue")
                        .HasColumnType("datetime");

                    b.Property<double?>("DecimalValue");

                    b.Property<int?>("EnterValue");

                    b.Property<int?>("ExternalWorOrderStatusId");

                    b.Property<int?>("ExtraFieldId");

                    b.Property<string>("NameFieldModel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PeopleManipulatorId");

                    b.Property<int?>("PeopleResponsibleTechniciansCollectionId");

                    b.Property<int?>("PeopleTechniciansId");

                    b.Property<int>("PostconditionCollectionsId");

                    b.Property<int?>("QueueId");

                    b.Property<string>("StringValue")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("WorkOrderStatusId");

                    b.HasKey("Id");

                    b.HasIndex("ExternalWorOrderStatusId");

                    b.HasIndex("ExtraFieldId");

                    b.HasIndex("PeopleManipulatorId");

                    b.HasIndex("PeopleResponsibleTechniciansCollectionId");

                    b.HasIndex("PeopleTechniciansId");

                    b.HasIndex("PostconditionCollectionsId");

                    b.HasIndex("QueueId");

                    b.HasIndex("WorkOrderStatusId");

                    b.ToTable("Postconditions");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Preconditions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PeopleResponsibleTechniciansCollectionId");

                    b.Property<int?>("PostconditionCollectionId");

                    b.Property<int?>("TaskId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("PeopleResponsibleTechniciansCollectionId");

                    b.HasIndex("PostconditionCollectionId");

                    b.HasIndex("TaskId");

                    b.ToTable("Preconditions");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PreconditionsLiteralValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BooleanValue");

                    b.Property<DateTime?>("DataValue")
                        .HasColumnType("datetime");

                    b.Property<double?>("DecimalValue");

                    b.Property<int?>("EnterValue");

                    b.Property<int?>("ExternalWorOrderStatusId");

                    b.Property<int?>("FinalClientId");

                    b.Property<int?>("LiteralPreconditionId");

                    b.Property<int?>("LocationId");

                    b.Property<int?>("OriginId");

                    b.Property<int?>("PeopleManipulatorId");

                    b.Property<int?>("PeopleResponsibleTechniciansCollectionId");

                    b.Property<int?>("PeopleTechnicianId");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("QueueId");

                    b.Property<int?>("RegionId");

                    b.Property<string>("StringValue")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("TeamId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("WorkOrderCategoryId");

                    b.Property<int?>("WorkOrderStatusId");

                    b.Property<int?>("WorkOrderTypesN1id")
                        .HasColumnName("WorkOrderTypesN1Id");

                    b.Property<int?>("WorkOrderTypesN2id")
                        .HasColumnName("WorkOrderTypesN2Id");

                    b.Property<int?>("WorkOrderTypesN3id")
                        .HasColumnName("WorkOrderTypesN3Id");

                    b.Property<int?>("WorkOrderTypesN4id")
                        .HasColumnName("WorkOrderTypesN4Id");

                    b.Property<int?>("WorkOrderTypesN5id")
                        .HasColumnName("WorkOrderTypesN5Id");

                    b.Property<int?>("ZoneId");

                    b.HasKey("Id");

                    b.HasIndex("ExternalWorOrderStatusId");

                    b.HasIndex("FinalClientId");

                    b.HasIndex("LiteralPreconditionId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PeopleManipulatorId");

                    b.HasIndex("PeopleResponsibleTechniciansCollectionId");

                    b.HasIndex("PeopleTechnicianId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("QueueId");

                    b.HasIndex("TeamId");

                    b.HasIndex("WorkOrderCategoryId");

                    b.HasIndex("WorkOrderStatusId");

                    b.HasIndex("WorkOrderTypesN1id");

                    b.HasIndex("WorkOrderTypesN2id");

                    b.HasIndex("WorkOrderTypesN3id");

                    b.HasIndex("WorkOrderTypesN4id");

                    b.HasIndex("WorkOrderTypesN5id");

                    b.HasIndex("ZoneId");

                    b.ToTable("PreconditionsLiteralValues");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PredefinedServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Billable");

                    b.Property<int?>("CollectionExtraFieldId");

                    b.Property<bool>("LinkClosingCode");

                    b.Property<bool?>("MustValidate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("ProjectId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("CollectionExtraFieldId");

                    b.HasIndex("ProjectId");

                    b.ToTable("PredefinedServices");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PredefinedServicesPermission", b =>
                {
                    b.Property<int>("PermissionId");

                    b.Property<int>("PredefinedServiceId");

                    b.HasKey("PermissionId", "PredefinedServiceId");

                    b.HasIndex("PredefinedServiceId");

                    b.ToTable("PredefinedServicesPermission");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Projects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackOfficeResponsible")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("CollectionsClosureCodesId");

                    b.Property<int?>("CollectionsExtraFieldId");

                    b.Property<int>("CollectionsTypesWorkOrdersId");

                    b.Property<int?>("ContractId");

                    b.Property<int>("Counter");

                    b.Property<string>("DefaultTechnicalCode")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdIcg")
                        .HasColumnName("IdICG");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("Serie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TechnicalResponsible")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("VisibilityPda");

                    b.Property<int>("WorkOrderCategoriesCollectionId");

                    b.Property<int?>("WorkOrderStatusesId");

                    b.HasKey("Id");

                    b.HasIndex("CollectionsClosureCodesId");

                    b.HasIndex("CollectionsExtraFieldId");

                    b.HasIndex("CollectionsTypesWorkOrdersId");

                    b.HasIndex("ContractId");

                    b.HasIndex("WorkOrderCategoriesCollectionId");

                    b.HasIndex("WorkOrderStatusesId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ProjectsCalendars", b =>
                {
                    b.Property<int>("ProjectId");

                    b.Property<int>("CalendarId");

                    b.Property<int>("CalendarPriority");

                    b.HasKey("ProjectId", "CalendarId");

                    b.HasIndex("CalendarId");

                    b.ToTable("ProjectsCalendars");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ProjectsContacts", b =>
                {
                    b.Property<int>("ProjectId");

                    b.Property<int>("ContactId");

                    b.HasKey("ProjectId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("ProjectsContacts");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ProjectsPermissions", b =>
                {
                    b.Property<int>("PermissionId");

                    b.Property<int>("ProjectId");

                    b.HasKey("PermissionId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectsPermissions");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PurchaseRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("ErpReference")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("PurchaseRate");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PushNotifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Creator")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("PushNotifications");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PushNotificationsPeople", b =>
                {
                    b.Property<int>("NotificationId");

                    b.Property<int>("PeopleId");

                    b.Property<bool?>("NotificationToGroup");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("NotificationId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("PushNotificationsPeople");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PushNotificationsPeopleCollections", b =>
                {
                    b.Property<int>("NotificationId");

                    b.Property<int>("PeopleCollectionsId");

                    b.HasKey("NotificationId", "PeopleCollectionsId");

                    b.HasIndex("PeopleCollectionsId");

                    b.ToTable("PushNotificationsPeopleCollections");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Queues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Queues");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.QueuesTranslations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DescriptionText");

                    b.Property<int>("LanguageId");

                    b.Property<string>("NameText");

                    b.Property<int?>("QueuesId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("QueuesId");

                    b.ToTable("QueuesTranslations");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.SalesRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("ErpReference")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("SalesRate");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.SaltoCsversion", b =>
                {
                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Version");

                    b.ToTable("SaltoCSVersion");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Services", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Cancelled");

                    b.Property<int?>("ClosingCodeFirstId");

                    b.Property<int?>("ClosingCodeId");

                    b.Property<int?>("ClosingCodeSecondId");

                    b.Property<int?>("ClosingCodeThirdId");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeliveryNote")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DeliveryProcessInit")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("FormState")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('Billed')")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("IcgId");

                    b.Property<string>("IdentifyExternal")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IdentifyInternal")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Observations")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<int?>("PeopleResponsibleId");

                    b.Property<int>("PredefinedServiceId");

                    b.Property<int?>("ServiceStateId");

                    b.Property<int?>("ServicesCancelFormId");

                    b.Property<int?>("SubcontractResponsibleId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("ClosingCodeFirstId");

                    b.HasIndex("ClosingCodeId");

                    b.HasIndex("ClosingCodeSecondId");

                    b.HasIndex("ClosingCodeThirdId");

                    b.HasIndex("PeopleResponsibleId");

                    b.HasIndex("PredefinedServiceId");

                    b.HasIndex("ServicesCancelFormId");

                    b.HasIndex("SubcontractResponsibleId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ServicesAnalysis", b =>
                {
                    b.Property<int>("ServiceCode");

                    b.Property<string>("ClosingCodeDesc1")
                        .HasMaxLength(50);

                    b.Property<string>("ClosingCodeDesc2")
                        .HasMaxLength(50);

                    b.Property<string>("ClosingCodeDesc3")
                        .HasMaxLength(50);

                    b.Property<string>("ClosingCodeDesc4")
                        .HasMaxLength(50);

                    b.Property<string>("ClosingCodeDesc5")
                        .HasMaxLength(50);

                    b.Property<string>("ClosingCodeDesc6")
                        .HasMaxLength(50);

                    b.Property<string>("ClosingCodeName1")
                        .HasMaxLength(50);

                    b.Property<string>("ClosingCodeName2")
                        .HasMaxLength(50);

                    b.Property<string>("ClosingCodeName3")
                        .HasMaxLength(50);

                    b.Property<string>("ClosingCodeName4")
                        .HasMaxLength(50);

                    b.Property<string>("ClosingCodeName5")
                        .HasMaxLength(50);

                    b.Property<string>("ClosingCodeName6")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreationDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeliveryNote");

                    b.Property<DateTime?>("EndingTime")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Kilometers");

                    b.Property<decimal?>("KmCost");

                    b.Property<string>("Observacions")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<int?>("OnSiteTime");

                    b.Property<decimal?>("ProductionCost");

                    b.Property<string>("ServiceDescription")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<decimal?>("StandardPersonCost");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("SubcontractorCode");

                    b.Property<decimal?>("SubcontractorCost")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("SubcontractorName")
                        .HasMaxLength(50);

                    b.Property<int>("Technician");

                    b.Property<int?>("TravelTime");

                    b.Property<decimal?>("TravelTimeCost");

                    b.Property<int?>("WaitTime");

                    b.Property<int>("WorkOrderCode");

                    b.Property<int?>("WorkedTime");

                    b.HasKey("ServiceCode")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("WorkOrderCode");

                    b.ToTable("ServicesAnalysis");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ServicesViewConfigurations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserConfigurationId");

                    b.HasKey("Id");

                    b.HasIndex("UserConfigurationId");

                    b.ToTable("ServicesViewConfigurations");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ServicesViewConfigurationsColumns", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("ColumnId");

                    b.Property<int>("ColumnOrder");

                    b.Property<DateTime?>("FilterEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FilterStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FilterValues")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id", "ColumnId");

                    b.ToTable("ServicesViewConfigurationsColumns");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Sessions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AndroidRelease")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("AndroidVersion");

                    b.Property<int?>("AppVersion");

                    b.Property<DateTime>("DateLastActivity")
                        .HasColumnType("datetime");

                    b.Property<int>("SecondsExpiration");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserConfigurationId");

                    b.HasKey("Id");

                    b.HasIndex("UserConfigurationId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.SgsClosingInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ParametersSent")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("Response")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<DateTime>("SentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("StatusResponse");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("SgsClosingInfo");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.SiteUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstSurname")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("LocationId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("SiteUser");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Sla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("MinutesNaturalResponse");

                    b.Property<bool?>("MinutesPenaltyWithoutNaturalResolution");

                    b.Property<int?>("MinutesPenaltyWithoutResolution");

                    b.Property<bool?>("MinutesPenaltyWithoutResolutionOtDefined")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('false')");

                    b.Property<bool?>("MinutesPenaltyWithoutResponseOtDefined")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('false')");

                    b.Property<bool?>("MinutesResolutionNaturals");

                    b.Property<bool?>("MinutesResolutionOtDefined")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('false')");

                    b.Property<int?>("MinutesResolutions");

                    b.Property<int?>("MinutesResponse");

                    b.Property<bool?>("MinutesResponseOtDefined")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('false')");

                    b.Property<int?>("MinutesUnansweredPenalty");

                    b.Property<bool?>("MinutesWithoutNaturalResponse");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ReferenceMinutesPenaltyUnanswered")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('DataCreacio')")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ReferenceMinutesPenaltyWithoutResolution")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('DataCreacio')")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ReferenceMinutesResolution")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('DataCreacio')")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ReferenceMinutesResponse")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('DataCreacio')")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("TimePenaltyWhithoutResolutionActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('true')");

                    b.Property<bool?>("TimePenaltyWithoutResponseActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('true')");

                    b.Property<bool?>("TimeResolutionActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('true')");

                    b.Property<bool?>("TimeResponseActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('true')");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("SLA");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.SomFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Container")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("ContentMd5")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("SomFiles");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.StatesSla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MinutesToTheEnd");

                    b.Property<string>("RowColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("SlaId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("SlaId");

                    b.ToTable("StatesSla");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.StopSlaReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("StopSlaReason");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.SubContracts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int>("Priority");

                    b.Property<int?>("SalesRateId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UK_Subcontracta");

                    b.HasIndex("SalesRateId");

                    b.ToTable("SubContracts");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.SubFamilies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcio")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("FamilyId");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("SubFamilies");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.SynchronizationSessions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("SynchronizationSessions");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.SystemNotifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Creator")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("Global");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PublicationDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<DateTime?>("VisibilityEndTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("SystemNotifications");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Tasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AllowAdditionalSubscribers")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("BooleanValue");

                    b.Property<DateTime?>("DateValue")
                        .HasColumnType("datetime");

                    b.Property<double?>("DecimalValue");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("EnterValue");

                    b.Property<string>("ExternalCall")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('Empty')")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("ExternalWorOrderStatusId");

                    b.Property<int?>("ExtraFieldId");

                    b.Property<int>("FlowId");

                    b.Property<string>("MailSubjectToPrepend")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("MailSubscribers")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("MailTemplateId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NameFieldModel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PeopleManipulatorId");

                    b.Property<int?>("PeopleResponsibleTechniciansId");

                    b.Property<int?>("PeopleTechnicianId");

                    b.Property<int?>("PredefinedServiceId");

                    b.Property<int?>("QueueId");

                    b.Property<bool>("SendMailToProjectResponsible");

                    b.Property<bool>("SendMailToSiteUser");

                    b.Property<bool>("SendMailToTechnician");

                    b.Property<string>("StringValue")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("WebServiceCallId");

                    b.Property<int?>("WorkOrderStatusId");

                    b.HasKey("Id");

                    b.HasIndex("ExternalWorOrderStatusId");

                    b.HasIndex("ExtraFieldId");

                    b.HasIndex("FlowId");

                    b.HasIndex("MailTemplateId");

                    b.HasIndex("PeopleManipulatorId");

                    b.HasIndex("PeopleResponsibleTechniciansId");

                    b.HasIndex("PeopleTechnicianId");

                    b.HasIndex("PredefinedServiceId");

                    b.HasIndex("QueueId");

                    b.HasIndex("WorkOrderStatusId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.TaskTokens", b =>
                {
                    b.Property<string>("Token")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<bool>("Consumed");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Token")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("TaskTokens");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.TaskWebServiceCallItems", b =>
                {
                    b.Property<int>("TaskId");

                    b.Property<int>("ItemId");

                    b.Property<string>("Value")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("TaskId", "ItemId");

                    b.ToTable("TaskWebServiceCallItems");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Teams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetStatusId");

                    b.Property<int?>("GuaranteeId");

                    b.Property<int>("LocationClientId");

                    b.Property<int?>("LocationId");

                    b.Property<int?>("ModelId");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("StockNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("SubFamilyId");

                    b.Property<string>("TeamNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("UsageId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AssetStatusId");

                    b.HasIndex("GuaranteeId");

                    b.HasIndex("LocationClientId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ModelId");

                    b.HasIndex("SubFamilyId");

                    b.HasIndex("UsageId");

                    b.HasIndex("UserId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.TeamsHiredServices", b =>
                {
                    b.Property<int>("TeamId");

                    b.Property<int>("HiredServiceId");

                    b.HasKey("TeamId", "HiredServiceId");

                    b.HasIndex("HiredServiceId");

                    b.ToTable("TeamsHiredServices");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.TeamsWorkOrders", b =>
                {
                    b.Property<int>("WorkOrderId");

                    b.Property<int>("TeamId");

                    b.HasKey("WorkOrderId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamsWorkOrders");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.TechnicalCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("PeopleTechnicId");

                    b.Property<int?>("ProjectId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("WorkOrderCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("PeopleTechnicId");

                    b.HasIndex("WorkOrderCategoryId");

                    b.HasIndex("ProjectId", "WorkOrderCategoryId", "PeopleTechnicId")
                        .IsUnique()
                        .HasName("PK_PeopleTechnicalCodes")
                        .HasFilter("[ProjectId] IS NOT NULL AND [WorkOrderCategoryId] IS NOT NULL");

                    b.ToTable("TechnicalCodes");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.TechnicianListFilters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PeopleId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("PeopleId");

                    b.ToTable("TechnicianListFilters");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.TenantConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Group")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("TenantConfiguration");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Tools", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ToolsToolTypes", b =>
                {
                    b.Property<int>("ToolId");

                    b.Property<int>("ToolTypeId");

                    b.HasKey("ToolId", "ToolTypeId");

                    b.HasIndex("ToolTypeId");

                    b.ToTable("ToolsToolTypes");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ToolsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("ToolsType");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ToolsTypeWorkOrderTypes", b =>
                {
                    b.Property<int>("WorkOrderTypesId");

                    b.Property<int>("ToolsTypeId");

                    b.HasKey("WorkOrderTypesId", "ToolsTypeId");

                    b.HasIndex("ToolsTypeId");

                    b.ToTable("ToolsTypeWorkOrderTypes");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Usages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ__Usages__737584F6108C583C")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Usages");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.UserConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("GuidId");

                    b.HasKey("Id");

                    b.ToTable("UserConfigurations");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.UsersMainWoviewConfigurations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserConfigurationId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserConfigurationId");

                    b.ToTable("UsersMainWOViewConfigurations");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Vehicles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<double?>("Direction");

                    b.Property<double?>("Height");

                    b.Property<bool>("IsDeleted");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int?>("PeopleDriverId");

                    b.Property<double?>("Speed");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("PeopleDriverId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkCenters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("CompanyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("MunicipalityId");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("PeopleId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PeopleId");

                    b.ToTable("WorkCenters");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrderAnalysis", b =>
                {
                    b.Property<int>("WorkOrderCode");

                    b.Property<DateTime?>("AccountingClosingDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ActuationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("AssignedTechnicianCode");

                    b.Property<DateTime?>("ClientCreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ClosingClientDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ClosingClientTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ClosingSystemDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ClosingWodate")
                        .HasColumnName("ClosingWODate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ExpectedTimeWorked");

                    b.Property<decimal?>("ExpectedvsWorkedTime");

                    b.Property<decimal?>("Expenses");

                    b.Property<int?>("ExternalOtstatus")
                        .HasColumnName("ExternalOTStatus");

                    b.Property<int>("FinalClientCode");

                    b.Property<string>("FinalClientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("GrossMargin");

                    b.Property<int?>("InternalAssetCode");

                    b.Property<DateTime>("InternalCreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("InternalSystemTimeWhenOtclosed")
                        .HasColumnName("InternalSystemTimeWhenOTClosed")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Kilometers");

                    b.Property<string>("LocationAddress")
                        .HasMaxLength(200);

                    b.Property<string>("LocationCity")
                        .HasMaxLength(100);

                    b.Property<string>("LocationClientCode")
                        .HasMaxLength(100);

                    b.Property<int?>("LocationCode");

                    b.Property<string>("LocationCountry")
                        .HasMaxLength(100);

                    b.Property<string>("LocationName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LocationObservation")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("LocationPostalCode")
                        .HasMaxLength(50);

                    b.Property<string>("LocationRegion")
                        .HasMaxLength(100);

                    b.Property<string>("LocationState")
                        .HasMaxLength(100);

                    b.Property<string>("LocationTown")
                        .HasMaxLength(100);

                    b.Property<bool?>("MeetResolutionPenaltySla");

                    b.Property<bool?>("MeetResolutionSla")
                        .HasColumnName("MeetResolutionSLA");

                    b.Property<bool?>("MeetResponsePenaltySla");

                    b.Property<bool?>("MeetResponseSla")
                        .HasColumnName("MeetResponseSLA");

                    b.Property<int?>("NumberOfIntervention");

                    b.Property<int?>("NumberOfVisitsToClient");

                    b.Property<int?>("OnSiteTime");

                    b.Property<decimal?>("OtherCosts");

                    b.Property<int>("Otstatus")
                        .HasColumnName("OTStatus");

                    b.Property<decimal?>("Parking");

                    b.Property<int>("ProjectCode");

                    b.Property<int?>("ResolutionPenaltyTime");

                    b.Property<int?>("ResolutionTime");

                    b.Property<int?>("ResponsePenaltyTime");

                    b.Property<int?>("ResponseTime");

                    b.Property<DateTime?>("SlaResolutionPenaltyDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SlaResponsePenaltyDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SlaresolutionDate")
                        .HasColumnName("SLAResolutionDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SlaresponseDate")
                        .HasColumnName("SLAResponseDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Tolls");

                    b.Property<int?>("TotalTime");

                    b.Property<decimal?>("TotalWoexpensesCost")
                        .HasColumnName("TotalWOExpensesCost");

                    b.Property<decimal?>("TotalWomaterialsCost")
                        .HasColumnName("TotalWOMaterialsCost");

                    b.Property<decimal?>("TotalWoproductionCost")
                        .HasColumnName("TotalWOProductionCost");

                    b.Property<int>("TotalWorkedTime");

                    b.Property<decimal?>("TotalWosalesAmount")
                        .HasColumnName("TotalWOSalesAmount");

                    b.Property<decimal?>("TotalWosubcontractorCost")
                        .HasColumnName("TotalWOSubcontractorCost");

                    b.Property<decimal?>("TotalWotravelTimeCost")
                        .HasColumnName("TotalWOTravelTimeCost");

                    b.Property<int?>("TravelTime");

                    b.Property<int?>("WaitTime");

                    b.Property<string>("WorkOrderCampainCode")
                        .HasMaxLength(50);

                    b.Property<int>("WorkOrderCategory");

                    b.Property<string>("WorkOrderClientCode")
                        .HasMaxLength(50);

                    b.HasKey("WorkOrderCode")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("WorkOrderAnalysis");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrderCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackOfficeResponsible")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("CategoryCalendarPreference");

                    b.Property<int>("ClientSiteCalendarPreference");

                    b.Property<string>("DefaultTechnicalCode")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<double?>("EconomicCharge");

                    b.Property<double?>("EstimatedDuration");

                    b.Property<string>("Info")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<bool?>("IsGhost")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("ProjectCalendarPreference");

                    b.Property<string>("Serie")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("SiteCalendarPreference");

                    b.Property<int>("SlaId");

                    b.Property<string>("TechnicalResponsible")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("WorkOrderCategoriesCollectionId");

                    b.HasKey("Id");

                    b.HasIndex("SlaId");

                    b.HasIndex("WorkOrderCategoriesCollectionId");

                    b.ToTable("WorkOrderCategories");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrderCategoriesCollectionCalendar", b =>
                {
                    b.Property<int>("WorkOrderCategoriesCollectionId");

                    b.Property<int>("CalendarId");

                    b.Property<int>("CalendarPriority");

                    b.HasKey("WorkOrderCategoriesCollectionId", "CalendarId");

                    b.HasIndex("CalendarId");

                    b.ToTable("WorkOrderCategoriesCollectionCalendar");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrderCategoriesCollections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Info")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("WorkOrderCategoriesCollections");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrderCategoryCalendar", b =>
                {
                    b.Property<int>("WorkOrderCategoryId");

                    b.Property<int>("CalendarId");

                    b.Property<int>("CalendarPriority");

                    b.HasKey("WorkOrderCategoryId", "CalendarId");

                    b.HasIndex("CalendarId");

                    b.ToTable("WorkOrderCategoryCalendar");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrderCategoryKnowledge", b =>
                {
                    b.Property<int>("WorkOrderCategoryId");

                    b.Property<int>("KnowledgeId");

                    b.Property<int?>("KnowledgeLevel");

                    b.HasKey("WorkOrderCategoryId", "KnowledgeId");

                    b.HasIndex("KnowledgeId");

                    b.ToTable("WorkOrderCategoryKnowledge");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrderCategoryPermissions", b =>
                {
                    b.Property<int>("PermissionId");

                    b.Property<int>("WorkOrderCategoryId");

                    b.HasKey("PermissionId", "WorkOrderCategoryId");

                    b.HasIndex("WorkOrderCategoryId");

                    b.ToTable("WorkOrderCategoryPermissions");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AccountingClosingDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ActuationEndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Archived");

                    b.Property<DateTime?>("AssignmentTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("Billable");

                    b.Property<DateTime?>("ClientClosingDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ClosingOtdate")
                        .HasColumnName("ClosingOTDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatePenaltyWithoutResolutionSla")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateStopTimerSla")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUnansweredPenaltySla")
                        .HasColumnType("datetime");

                    b.Property<string>("ExternalIdentifier")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ExternalSystemId")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("ExternalWorOrderStatusId");

                    b.Property<DateTime?>("FinalClientClosingTime")
                        .HasColumnType("datetime");

                    b.Property<int>("FinalClientId");

                    b.Property<int?>("IcgId");

                    b.Property<DateTime?>("InternalClosingTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("InternalCreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InternalIdentifier")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("IsActuationDateFixed");

                    b.Property<bool>("IsResponsibleFixed");

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LocationId");

                    b.Property<bool?>("MeetSlaresolution")
                        .HasColumnName("MeetSLAResolution");

                    b.Property<bool?>("MeetSlaresponse")
                        .HasColumnName("MeetSLAResponse");

                    b.Property<string>("Observations")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<int>("OriginId");

                    b.Property<int?>("Overhead")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("PeopleIntroducedById");

                    b.Property<int?>("PeopleManipulatorId");

                    b.Property<int?>("PeopleResponsibleId");

                    b.Property<DateTime?>("PickUpTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ProjectId");

                    b.Property<int>("QueueId");

                    b.Property<bool>("ReferenceGeneratorService");

                    b.Property<bool>("ReferenceOtherServices");

                    b.Property<DateTime?>("ResolutionDateSla")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ResponseDateSla")
                        .HasColumnType("datetime");

                    b.Property<int?>("ServiceId");

                    b.Property<int?>("SiteUserId");

                    b.Property<DateTime?>("SystemDateWhenOtclosed")
                        .HasColumnName("SystemDateWhenOTClosed")
                        .HasColumnType("datetime");

                    b.Property<int?>("TeamId");

                    b.Property<string>("TextRepair")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("WorkOrderCategoryId");

                    b.Property<int>("WorkOrderStatusId");

                    b.Property<int?>("WorkOrderTypesId");

                    b.Property<int?>("WorkOrdersFatherId");

                    b.HasKey("Id");

                    b.HasIndex("ExternalWorOrderStatusId");

                    b.HasIndex("FinalClientId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PeopleIntroducedById");

                    b.HasIndex("PeopleManipulatorId");

                    b.HasIndex("PeopleResponsibleId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("QueueId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SiteUserId");

                    b.HasIndex("TeamId");

                    b.HasIndex("WorkOrderCategoryId");

                    b.HasIndex("WorkOrderStatusId");

                    b.HasIndex("WorkOrderTypesId");

                    b.HasIndex("WorkOrdersFatherId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrdersDeritative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AssignmentTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ExternalIdentifier")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ExternalWorOrderStatusId");

                    b.Property<DateTime?>("FinalClientClosingTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("FinalClientId");

                    b.Property<int>("GeneratorServiceDuplicationPolicy");

                    b.Property<int?>("IcgId");

                    b.Property<bool?>("InheritProject")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("InheritTechnician")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("InternalClosingTime")
                        .HasColumnType("datetime");

                    b.Property<string>("InternalIdentifier")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("LocationId");

                    b.Property<string>("Observations")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<int?>("OriginId");

                    b.Property<int>("OtherServicesDuplicationPolicy");

                    b.Property<int?>("PeopleIntroducedById");

                    b.Property<int?>("PeopleManipulatorId");

                    b.Property<int?>("PeopleResponsibleId");

                    b.Property<int?>("PeopleResponsibleTechniciansCollectionId");

                    b.Property<DateTime?>("PickUpTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("QueueId");

                    b.Property<int?>("SiteUserId");

                    b.Property<int>("TaskId");

                    b.Property<int?>("TeamsId");

                    b.Property<string>("TextRepair")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("WorkOrderCategoryId");

                    b.Property<int?>("WorkOrderStatusId");

                    b.Property<int?>("WorkOrderTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ExternalWorOrderStatusId");

                    b.HasIndex("FinalClientId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PeopleIntroducedById");

                    b.HasIndex("PeopleManipulatorId");

                    b.HasIndex("PeopleResponsibleId");

                    b.HasIndex("PeopleResponsibleTechniciansCollectionId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("QueueId");

                    b.HasIndex("SiteUserId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TeamsId");

                    b.HasIndex("WorkOrderCategoryId");

                    b.HasIndex("WorkOrderStatusId");

                    b.HasIndex("WorkOrderTypeId");

                    b.ToTable("WorkOrdersDeritative");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrderStatuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("IdIcg")
                        .HasColumnName("IdICG")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsPlannable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsWoclosed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("WorkOrderStatuses");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrderStatusesTranslations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DescriptionText");

                    b.Property<int>("LanguageId");

                    b.Property<string>("NameText");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("WorkOrderStatusesId");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderStatusesId");

                    b.ToTable("WorkOrderStatusesTranslations");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrderTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CollectionsTypesWorkOrdersId");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("EstimatedDuration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("Serie")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("SlaId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("WorkOrderTypesFatherId");

                    b.HasKey("Id");

                    b.HasIndex("CollectionsTypesWorkOrdersId");

                    b.HasIndex("SlaId");

                    b.HasIndex("WorkOrderTypesFatherId");

                    b.ToTable("WorkOrderTypes");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WsErpSystemInstance", b =>
                {
                    b.Property<int>("ErpSystemInstanceId");

                    b.Property<string>("WebServiceIpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("WebServiceMethod")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("WebServicePwd")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("WebServiceUser")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("ErpSystemInstanceId");

                    b.ToTable("WsErpSystemInstance");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ZoneProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProjectId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("ZoneId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ZoneId", "ProjectId")
                        .IsUnique()
                        .HasName("UQ_Zone_Project")
                        .HasFilter("[ProjectId] IS NOT NULL");

                    b.ToTable("ZoneProject");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ZoneProjectPostalCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("ZoneProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ZoneProjectId", "PostalCode")
                        .IsUnique()
                        .HasName("UQ_ZoneProject_PostalCode");

                    b.ToTable("ZoneProjectPostalCode");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Zones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.AdvancedTechnicianListFilterPersons", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("AdvancedTechnicianListFilterPersons")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK_ADVANCEDTECHNICIANLISTFILTERSPERSONS_PERSONS");

                    b.HasOne("Group.Salto.Entities.Tenant.AdvancedTechnicianListFilters", "TechnicianListFilter")
                        .WithMany("AdvancedTechnicianListFilterPersons")
                        .HasForeignKey("TechnicianListFilterId")
                        .HasConstraintName("FK_ADVANCEDTECHNICIANLISTFILTERSPERSONS_ADVANCEDTECHNICIANLISTFILTER")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.AdvancedTechnicianListFilters", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.TechnicianListFilters", "IdNavigation")
                        .WithOne("AdvancedTechnicianListFilters")
                        .HasForeignKey("Group.Salto.Entities.Tenant.AdvancedTechnicianListFilters", "Id")
                        .HasConstraintName("FK__AdvancedTech__Id__3F9B6DFF")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.AssetsAudit", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Teams", "Team")
                        .WithMany("AssetsAudit")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_AssetsAudit_Teams")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.AssetsAuditChanges", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.AssetsAudit", "AssetAudit")
                        .WithMany("AssetsAuditChanges")
                        .HasForeignKey("AssetAuditId")
                        .HasConstraintName("FK_AssetsAuditChanges_AssetsAudit");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Audits", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Tasks", "Task")
                        .WithMany("Audits")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_Audits_Tasks");

                    b.HasOne("Group.Salto.Entities.Tenant.UserConfiguration", "UserConfiguration")
                        .WithMany("AuditsUser")
                        .HasForeignKey("UserConfigurationId");

                    b.HasOne("Group.Salto.Entities.Tenant.UserConfiguration", "UserConfigurationSupplanter")
                        .WithMany("AuditsUserSupplanter")
                        .HasForeignKey("UserConfigurationSupplanterId");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrders", "WorkOrder")
                        .WithMany("Audits")
                        .HasForeignKey("WorkOrderId")
                        .HasConstraintName("FK_Auditoria_WorkOrders");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.BasicTechnicianListFilterCalendarPlanningViewConfiguration", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.CalendarPlanningViewConfiguration", "CalendarPlanningViewConfiguration")
                        .WithMany("BasicTechnicianListFilterCalendarPlanningViewConfiguration")
                        .HasForeignKey("CalendarPlanningViewConfigurationId")
                        .HasConstraintName("FK_BasicTechniciansListCalendarPlanningViewConfiguration_CalendarPlanningViewConfiguration");

                    b.HasOne("Group.Salto.Entities.Tenant.BasicTechnicianListFilters", "TechnicianListFilter")
                        .WithMany("BasicTechnicianListFilterCalendarPlanningViewConfiguration")
                        .HasForeignKey("TechnicianListFilterId")
                        .HasConstraintName("FK_CalendarPlanningViewConfiguration_BasicTechnicianListFilters")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.BasicTechnicianListFilters", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.TechnicianListFilters", "TechnicianListFilters")
                        .WithOne("BasicTechnicianListFilters")
                        .HasForeignKey("Group.Salto.Entities.Tenant.BasicTechnicianListFilters", "Id")
                        .HasConstraintName("FK__BasicTechnic__Id__4830B400")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.BasicTechnicianListFilterSkills", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Knowledge", "Skill")
                        .WithMany("BasicTechnicianListFilterSkills")
                        .HasForeignKey("SkillId")
                        .HasConstraintName("FK_BASICTECHNICIANLISTFILTERSSKILLS_SKILLS")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Group.Salto.Entities.Tenant.BasicTechnicianListFilters", "TechnicianListFilter")
                        .WithMany("BasicTechnicianListFilterSkills")
                        .HasForeignKey("TechnicianListFilterId")
                        .HasConstraintName("FK_BASICTECHNICIANLISTFILTERSSKILLS_BASICTECHNICIANLISTFILTERS")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Bill", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ErpSystemInstance", "ErpSystemInstance")
                        .WithMany("Bill")
                        .HasForeignKey("ErpSystemInstanceId")
                        .HasConstraintName("FK_Bill_ErpSystemInstance");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("Bill")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK_Bill_People");

                    b.HasOne("Group.Salto.Entities.Tenant.Services", "Service")
                        .WithMany("Bill")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_Bill_Services");

                    b.HasOne("Group.Salto.Entities.Tenant.Tasks", "TaskNavigation")
                        .WithMany("Bill")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_Bill_Task");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrders", "Workorder")
                        .WithMany("Bill")
                        .HasForeignKey("WorkorderId")
                        .HasConstraintName("FK_Bill_WorkOrders");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.BillingItems", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.BillingLineItems", "BillingLineItem")
                        .WithMany("BillingItems")
                        .HasForeignKey("BillingLineItemId")
                        .HasConstraintName("FK_BillingItems_BillingLineItems");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.BillingLineItems", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.PredefinedServices", "PredefinedService")
                        .WithMany("BillingLineItems")
                        .HasForeignKey("PredefinedServiceId")
                        .HasConstraintName("FK_BillingLineItems_PredefinedServices");

                    b.HasOne("Group.Salto.Entities.Tenant.Projects", "Project")
                        .WithMany("BillingLineItems")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_BillingLineItems_Projects");

                    b.HasOne("Group.Salto.Entities.Tenant.Tasks", "Task")
                        .WithMany("BillingLineItems")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_BillingLineItems_Tasks");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderCategories", "WorkOrderCategory")
                        .WithMany("BillingLineItems")
                        .HasForeignKey("WorkOrderCategoryId")
                        .HasConstraintName("FK_BillingLineItems_WorkOrderCategories");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.BillingRule", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ErpSystemInstance", "ErpSystemInstance")
                        .WithMany("BillingRule")
                        .HasForeignKey("ErpSystemInstanceId")
                        .HasConstraintName("FK_BillingRule_ErpSystemInstance");

                    b.HasOne("Group.Salto.Entities.Tenant.Tasks", "Task")
                        .WithMany("BillingRule")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_BillingRule_Tasks");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.BillingRuleItem", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.BillingRule", "BillingRule")
                        .WithMany("BillingRuleItem")
                        .HasForeignKey("BillingRuleId")
                        .HasConstraintName("FK_BillingRuleItem_BillingRule");

                    b.HasOne("Group.Salto.Entities.Tenant.Items", "Item")
                        .WithMany("BillingRuleItem")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_BillingRuleItem_Items");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.BillLine", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Bill", "Bill")
                        .WithMany("BillLine")
                        .HasForeignKey("BillId")
                        .HasConstraintName("FK_ItemSerialNumber_Bill");

                    b.HasOne("Group.Salto.Entities.Tenant.Items", "Item")
                        .WithMany("BillLine")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ItemSerialNumber_Items");

                    b.HasOne("Group.Salto.Entities.Tenant.ItemsSerialNumber", "ItemsSerialNumber")
                        .WithMany("BillLine")
                        .HasForeignKey("ItemId", "SerialNumber")
                        .HasConstraintName("FK_ItemsSerialNumber");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.CalendarEvents", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Calendars", "Calendar")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("CalendarId")
                        .HasConstraintName("FK__CalendarE__Calen__5B438874");

                    b.HasOne("Group.Salto.Entities.Tenant.CalendarEvents", "ParentEvent")
                        .WithMany("InverseParentEvent")
                        .HasForeignKey("ParentEventId")
                        .HasConstraintName("FK__CalendarE__Paren__5C37ACAD");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.CalendarPlanningViewConfiguration", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.UsersMainWoviewConfigurations", "CalendarPlanningViewConfigurationNavigation")
                        .WithMany("CalendarPlanningViewConfiguration")
                        .HasForeignKey("CalendarPlanningViewConfigurationId")
                        .HasConstraintName("FK__CalendarP__Calen__5D2BD0E6");

                    b.HasOne("Group.Salto.Entities.Tenant.UserConfiguration", "UserConfiguration")
                        .WithMany("CalendarPlanningViewConfiguration")
                        .HasForeignKey("UserConfigurationId");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.CalendarPlanningViewConfigurationPeople", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("CalendarPlanningViewConfigurationPeople")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK__CalendarP__Peopl__5F141958");

                    b.HasOne("Group.Salto.Entities.Tenant.CalendarPlanningViewConfiguration", "View")
                        .WithMany("CalendarPlanningViewConfigurationPeople")
                        .HasForeignKey("ViewId")
                        .HasConstraintName("FK__CalendarP__ViewI__60083D91");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.CalendarPlanningViewConfigurationPeopleCollection", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.PeopleCollections", "PeopleCollection")
                        .WithMany("CalendarPlanningViewConfigurationPeopleCollection")
                        .HasForeignKey("PeopleCollectionId")
                        .HasConstraintName("FK__CalendarP__Peopl__60FC61CA");

                    b.HasOne("Group.Salto.Entities.Tenant.CalendarPlanningViewConfiguration", "View")
                        .WithMany("CalendarPlanningViewConfigurationPeopleCollection")
                        .HasForeignKey("ViewId")
                        .HasConstraintName("FK__CalendarP__ViewI__61F08603");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ClosingCodes", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ClosingCodes", "ClosingCodesFather")
                        .WithMany("InverseClosingCodesFather")
                        .HasForeignKey("ClosingCodesFatherId")
                        .HasConstraintName("FK_ClosingCodes_ClosingCodesFather");

                    b.HasOne("Group.Salto.Entities.Tenant.CollectionsClosureCodes", "CollectionsClosureCodes")
                        .WithMany("ClosingCodes")
                        .HasForeignKey("CollectionsClosureCodesId")
                        .HasConstraintName("FK_ClosingCodes_CollectionsClosureCodes");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.CollectionsExtraFieldExtraField", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.CollectionsExtraField", "CollectionsExtraField")
                        .WithMany("CollectionsExtraFieldExtraField")
                        .HasForeignKey("CollectionsExtraFieldId")
                        .HasConstraintName("FK_CollectionsExtraFieldExtraField_CollectionsExtraField");

                    b.HasOne("Group.Salto.Entities.Tenant.ExtraFields", "ExtraField")
                        .WithMany("CollectionsExtraFieldExtraField")
                        .HasForeignKey("ExtraFieldId")
                        .HasConstraintName("FK_CollectionsExtraFieldExtraField_ExtraField");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.CompaniesCostHistorical", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Companies", "Company")
                        .WithMany("CompaniesCostHistorical")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK__Companies__Compa__66B53B20");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ContactsFinalClients", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Contacts", "Contact")
                        .WithMany("ContactsFinalClients")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_ContactsFinalClients_Contacts");

                    b.HasOne("Group.Salto.Entities.Tenant.FinalClients", "FinalClient")
                        .WithMany("ContactsFinalClients")
                        .HasForeignKey("FinalClientId")
                        .HasConstraintName("FK_ContactsFinalClients_FinalClients");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ContactsLocationsFinalClients", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Contacts", "Contact")
                        .WithMany("ContactsLocationsFinalClients")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_ContactsLocationsFinalClients_Contacts");

                    b.HasOne("Group.Salto.Entities.Tenant.Locations", "Location")
                        .WithMany("ContactsLocationsFinalClients")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_ContactsLocationsFinalClients_Locations");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ContractContacts", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Contacts", "Contact")
                        .WithMany("ContractContacts")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_ContractContacts_Contacts");

                    b.HasOne("Group.Salto.Entities.Tenant.Contracts", "Contract")
                        .WithMany("ContractContacts")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_ContractContacts_Contracts");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Contracts", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Clients", "Client")
                        .WithMany("Contracts")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Contracts_Client");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("Contracts")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK_Contracts_People");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Departments", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Companies", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK__Departmen__Compa__6F4A8121");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.DerivedServices", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ClosingCodes", "ClosingCodesIdN1Navigation")
                        .WithMany("DerivedServicesClosingCodesIdN1Navigation")
                        .HasForeignKey("ClosingCodesIdN1")
                        .HasConstraintName("FK_DerivedServices_ClosingCodesN1");

                    b.HasOne("Group.Salto.Entities.Tenant.ClosingCodes", "ClosingCodesIdN2Navigation")
                        .WithMany("DerivedServicesClosingCodesIdN2Navigation")
                        .HasForeignKey("ClosingCodesIdN2")
                        .HasConstraintName("FK_DerivedServices_ClosingCodesN2");

                    b.HasOne("Group.Salto.Entities.Tenant.ClosingCodes", "ClosingCodesIdN3Navigation")
                        .WithMany("DerivedServicesClosingCodesIdN3Navigation")
                        .HasForeignKey("ClosingCodesIdN3")
                        .HasConstraintName("FK_DerivedServices_ClosingCodesN3");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleResponsible")
                        .WithMany("DerivedServices")
                        .HasForeignKey("PeopleResponsibleId")
                        .HasConstraintName("FK_DerivedServices_People");

                    b.HasOne("Group.Salto.Entities.Tenant.PredefinedServices", "PredefinedServices")
                        .WithMany("DerivedServices")
                        .HasForeignKey("PredefinedServicesId")
                        .HasConstraintName("FK_DerivedServices_PredefinedServices");

                    b.HasOne("Group.Salto.Entities.Tenant.Projects", "Project")
                        .WithMany("DerivedServices")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_DerivedServices_Projects");

                    b.HasOne("Group.Salto.Entities.Tenant.SubContracts", "SubcontractResponsible")
                        .WithMany("DerivedServices")
                        .HasForeignKey("SubcontractResponsibleId")
                        .HasConstraintName("FK_DerivedServices_Subcontracts");

                    b.HasOne("Group.Salto.Entities.Tenant.Tasks", "Task")
                        .WithMany("DerivedServices")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_DerivedServices_Tasks");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.DnAndMaterialsAnalysis", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.BillLine", "BillLine")
                        .WithOne("DnAndMaterialsAnalysis")
                        .HasForeignKey("Group.Salto.Entities.Tenant.DnAndMaterialsAnalysis", "Id")
                        .HasConstraintName("FK_DnAndMaterialsAnalysis_BillLine");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ErpItemsSyncConfig", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ErpSystemInstance", "ErpSystemInstance")
                        .WithMany("ErpItemsSyncConfig")
                        .HasForeignKey("ErpSystemInstanceId")
                        .HasConstraintName("FK_ErpItemsSyncConfig_ErpSystemInstance");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ErpSystemInstanceQuery", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ErpSystemInstance", "ErpSystemInstance")
                        .WithMany("ErpSystemInstanceQuery")
                        .HasForeignKey("ErpSystemInstanceId")
                        .HasConstraintName("FK_ErpSystemInstanceQuery_ErpSystemInstance");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Expenses", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ExpensesTickets", "ExpenseTicket")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseTicketId")
                        .HasConstraintName("FK__Expenses__Expens__79C80F94");

                    b.HasOne("Group.Salto.Entities.Tenant.PaymentMethods", "PaymentMethod")
                        .WithMany("Expenses")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK__Expenses__Paymen__7ABC33CD");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExpensesTicketFile", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ExpensesTickets", "ExpenseTicket")
                        .WithMany("ExpensesTicketFile")
                        .HasForeignKey("ExpenseTicketId")
                        .HasConstraintName("FK_ExpensesTicket_File_ExpenseTicket");

                    b.HasOne("Group.Salto.Entities.Tenant.SomFiles", "SomFile")
                        .WithMany("ExpensesTicketFile")
                        .HasForeignKey("SomFileId")
                        .HasConstraintName("FK_ExpensesTicket_File_SomFiles");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExpensesTickets", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ExpenseTicketStatus", "ExpenseTicketStatus")
                        .WithMany()
                        .HasForeignKey("ExpenseTicketStatusId");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("ExpensesTicketsPeople")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK__ExpensesT__Peopl__7D98A078");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleValidator")
                        .WithMany("ExpensesTicketsPeopleValidator")
                        .HasForeignKey("PeopleValidatorId")
                        .HasConstraintName("FK__ExpensesT__Peopl__7E8CC4B1");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrders", "WorkOrder")
                        .WithMany("ExpensesTickets")
                        .HasForeignKey("WorkOrderId")
                        .HasConstraintName("FK__ExpensesT__WorkO__7F80E8EA");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExpensesTicketsFiles", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ExpensesTickets", "ExpenseTicket")
                        .WithMany("ExpensesTicketsFiles")
                        .HasForeignKey("ExpenseTicketId")
                        .HasConstraintName("FK_ExpensesTicketsFiles_ExpenseTicket");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExternalServicesConfiguration", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Queues", "AssetQueue")
                        .WithMany("ExternalServicesConfigurationAssetQueue")
                        .HasForeignKey("AssetQueueId")
                        .HasConstraintName("FK_ExternalServicesConfiguration_AssetQueue");

                    b.HasOne("Group.Salto.Entities.Tenant.ExternalWorOrderStatuses", "AssetWoExternalStatus")
                        .WithMany("ExternalServicesConfigurationAssetWoExternalStatus")
                        .HasForeignKey("AssetWoExternalStatusId")
                        .HasConstraintName("FK_ExternalServicesConfiguration_AssetWoExternalStatus");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderStatuses", "AssetWoStatus")
                        .WithMany("ExternalServicesConfigurationAssetWoStatus")
                        .HasForeignKey("AssetWoStatusId")
                        .HasConstraintName("FK_ExternalServicesConfiguration_AssetWoStatus");

                    b.HasOne("Group.Salto.Entities.Tenant.FinalClients", "FinalClient")
                        .WithMany("ExternalServicesConfiguration")
                        .HasForeignKey("FinalClientId")
                        .HasConstraintName("FK_ExternalServicesConfiguration_FinalClient");

                    b.HasOne("Group.Salto.Entities.Tenant.Flows", "Flow")
                        .WithMany("ExternalServicesConfiguration")
                        .HasForeignKey("FlowId")
                        .HasConstraintName("FK_ExternalServicesConfiguration_Flow");

                    b.HasOne("Group.Salto.Entities.Tenant.Locations", "Location")
                        .WithMany("ExternalServicesConfiguration")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_ExternalServicesConfiguration_Location");

                    b.HasOne("Group.Salto.Entities.Tenant.Projects", "Project")
                        .WithMany("ExternalServicesConfiguration")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_ExternalServicesConfiguration_Project");

                    b.HasOne("Group.Salto.Entities.Tenant.Queues", "Queue")
                        .WithMany("ExternalServicesConfigurationQueue")
                        .HasForeignKey("QueueId")
                        .HasConstraintName("FK_ExternalServicesConfiguration_Queue");

                    b.HasOne("Group.Salto.Entities.Tenant.Tasks", "Task")
                        .WithMany("ExternalServicesConfiguration")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_ExternalServicesConfiguration_Task");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderCategories", "WoCategory")
                        .WithMany("ExternalServicesConfiguration")
                        .HasForeignKey("WoCategoryId")
                        .HasConstraintName("FK_ExternalServicesConfiguration_WoCategory");

                    b.HasOne("Group.Salto.Entities.Tenant.ExternalWorOrderStatuses", "WoExternalStatus")
                        .WithMany("ExternalServicesConfigurationWoExternalStatus")
                        .HasForeignKey("WoExternalStatusId")
                        .HasConstraintName("FK_ExternalServicesConfiguration_WoExternalStatus");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderStatuses", "WoStatus")
                        .WithMany("ExternalServicesConfigurationWoStatus")
                        .HasForeignKey("WoStatusId")
                        .HasConstraintName("FK_ExternalServicesConfiguration_WoStatus");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExternalServicesConfigurationProjectCategories", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ExternalServicesConfiguration", "Configuration")
                        .WithMany("ExternalServicesConfigurationProjectCategories")
                        .HasForeignKey("ConfigurationId")
                        .HasConstraintName("FK__ExternalS__Confi__0BE6BFCF");

                    b.HasOne("Group.Salto.Entities.Tenant.Projects", "Project")
                        .WithMany("ExternalServicesConfigurationProjectCategories")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__ExternalS__Proje__0CDAE408");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderCategories", "WoCategory")
                        .WithMany("ExternalServicesConfigurationProjectCategories")
                        .HasForeignKey("WoCategoryId")
                        .HasConstraintName("FK__ExternalS__WoCat__0DCF0841");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExternalServicesConfigurationProjectCategoriesProperties", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ExternalServicesConfigurationProjectCategories", "ExternalServicesConfigurationProjectCategories")
                        .WithMany("ExternalServicesConfigurationProjectCategoriesProperties")
                        .HasForeignKey("ExternalServicesConfigurationProjectCategoriesId")
                        .HasConstraintName("FK__ExternalS__Exter__0EC32C7A");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExternalServicesConfigurationSites", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ExternalServicesConfiguration", "ExternalServicesConfiguration")
                        .WithMany("ExternalServicesConfigurationSites")
                        .HasForeignKey("ExternalServicesConfigurationId")
                        .HasConstraintName("FK_ExternalServicesConfiguration_Sites_ExternalServicesConfiguration");

                    b.HasOne("Group.Salto.Entities.Tenant.FinalClients", "FinalClient")
                        .WithMany("ExternalServicesConfigurationSites")
                        .HasForeignKey("FinalClientId")
                        .HasConstraintName("FK_ExternalServicesConfiguration_Sites_FinalClients");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExternalSystemImportData", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrders", "WorkOrder")
                        .WithMany("ExternalSystemImportData")
                        .HasForeignKey("WorkOrderId")
                        .HasConstraintName("FK_ExternalSystemImportData_WorkOrder");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExternalWorkOrderStatusesTranslations", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ExternalWorOrderStatuses", "ExternalWorkOrderStatuses")
                        .WithMany("ExternalWorkOrderStatusesTranslations")
                        .HasForeignKey("ExternalWorkOrderStatusesId");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExtraFields", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ErpSystemInstanceQuery", "ErpSystemInstanceQuery")
                        .WithMany("ExtraFields")
                        .HasForeignKey("ErpSystemInstanceQueryId")
                        .HasConstraintName("FK_ExtraFields_ErpSystemInstanceQuery");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ExtraFieldsValues", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.DerivedServices", "DerivedService")
                        .WithMany("ExtraFieldsValues")
                        .HasForeignKey("DerivedServiceId")
                        .HasConstraintName("FK_ExtraFieldsValues_DerivedServices");

                    b.HasOne("Group.Salto.Entities.Tenant.ExtraFields", "ExtraField")
                        .WithMany("ExtraFieldsValues")
                        .HasForeignKey("ExtraFieldId")
                        .HasConstraintName("FK_ExtraFieldsValues_ExtraFields");

                    b.HasOne("Group.Salto.Entities.Tenant.Services", "Service")
                        .WithMany("ExtraFieldsValues")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_ExtraFieldsValues_Services");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrdersDeritative", "WorkOrderDeritative")
                        .WithMany("ExtraFieldsValues")
                        .HasForeignKey("WorkOrderDeritativeId")
                        .HasConstraintName("FK_ExtraFieldsValues_WorkOrdersDeritative");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.FinalClients", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleCommercial")
                        .WithMany("FinalClients")
                        .HasForeignKey("PeopleCommercialId")
                        .HasConstraintName("FK_FinalClients_People");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.FinalClientSiteCalendar", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Calendars", "Calendar")
                        .WithMany("FinalClientSiteCalendar")
                        .HasForeignKey("CalendarId")
                        .HasConstraintName("FK__FinalClie__Calen__184C96B4");

                    b.HasOne("Group.Salto.Entities.Tenant.FinalClients", "FinalClientSite")
                        .WithMany("FinalClientSiteCalendar")
                        .HasForeignKey("FinalClientSiteId")
                        .HasConstraintName("FK__FinalClie__Final__1940BAED");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.FormElements", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.FormConfigs", "FormConfigs")
                        .WithMany("FormElements")
                        .HasForeignKey("FormConfigsId")
                        .HasConstraintName("FK_FormElements_FormConfigs");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ItemsPointsRate", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Items", "Item")
                        .WithMany("ItemsPointsRate")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ItemsPointsRate_Items");

                    b.HasOne("Group.Salto.Entities.Tenant.PointsRate", "PointsRate")
                        .WithMany("ItemsPointsRate")
                        .HasForeignKey("PointsRateId")
                        .HasConstraintName("FK_ItemsPointsRate_PointsRate");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ItemsPurchaseRate", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Items", "Item")
                        .WithMany("ItemsPurchaseRate")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ItemsPurchaseRate_Items");

                    b.HasOne("Group.Salto.Entities.Tenant.PurchaseRate", "PurchaseRate")
                        .WithMany("ItemsPurchaseRate")
                        .HasForeignKey("PurchaseRateId")
                        .HasConstraintName("FK_ItemsPurchaseRate_PurchaseRate");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ItemsSalesRate", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Items", "Item")
                        .WithMany("ItemsSalesRate")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ItemsSalesRate_Items");

                    b.HasOne("Group.Salto.Entities.Tenant.SalesRate", "SalesRate")
                        .WithMany("ItemsSalesRate")
                        .HasForeignKey("SalesRateId")
                        .HasConstraintName("FK_ItemsSalesRate_SalesRate");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ItemsSerialNumber", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Items", "Item")
                        .WithMany("ItemsSerialNumber")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ItemsSerialNumber_Items");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Journeys", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("Journeys")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK_Journeys_People");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.JourneysStates", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Journeys", "Journey")
                        .WithMany("JourneysStates")
                        .HasForeignKey("JourneyId")
                        .HasConstraintName("FK_JourneysStates_Journeys");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.KnowledgePeople", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Knowledge", "Knowledge")
                        .WithMany("KnowledgePeople")
                        .HasForeignKey("KnowledgeId")
                        .HasConstraintName("FK_KnowledgePeople_Knowledge");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("KnowledgePeople")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK_KnowledgePeople_People");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.KnowledgeSubContracts", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Knowledge", "Knowledge")
                        .WithMany("KnowledgeSubContracts")
                        .HasForeignKey("KnowledgeId")
                        .HasConstraintName("FK_KnowledgeSubContracts_Knowledge");

                    b.HasOne("Group.Salto.Entities.Tenant.SubContracts", "SubContract")
                        .WithMany("KnowledgeSubContracts")
                        .HasForeignKey("SubContractId")
                        .HasConstraintName("FK_KnowledgeSubContracts_SubContracts");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.KnowledgeToolsType", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Knowledge", "Knowledge")
                        .WithMany("KnowledgeToolsType")
                        .HasForeignKey("KnowledgeId")
                        .HasConstraintName("FK_KnowledgeToolsType_Knowledge");

                    b.HasOne("Group.Salto.Entities.Tenant.ToolsType", "ToolsType")
                        .WithMany("KnowledgeToolsType")
                        .HasForeignKey("ToolsTypeId")
                        .HasConstraintName("FK_KnowledgeToolsType_ToolsType");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.KnowledgeWorkOrderTypes", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Knowledge", "Knowledge")
                        .WithMany("KnowledgeWorkOrderTypes")
                        .HasForeignKey("KnowledgeId")
                        .HasConstraintName("FK_KnowledgeWorkOrderTypes_Knowledge");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderTypes", "WorkOrderType")
                        .WithMany("KnowledgeWorkOrderTypes")
                        .HasForeignKey("WorkOrderTypeId")
                        .HasConstraintName("FK_KnowledgeWorkOrderTypes_WorkOrderTypes");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.LiteralsPreconditions", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ExtraFields", "ExtraField")
                        .WithMany("LiteralsPreconditions")
                        .HasForeignKey("ExtraFieldId")
                        .HasConstraintName("FK_LiteralsPreconditions_ExtraFields");

                    b.HasOne("Group.Salto.Entities.Tenant.Preconditions", "Precondition")
                        .WithMany("LiteralsPreconditions")
                        .HasForeignKey("PreconditionId")
                        .HasConstraintName("FK_LiteralsPreconditions_Preconditions");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.LocationCalendar", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Calendars", "Calendar")
                        .WithMany("LocationCalendar")
                        .HasForeignKey("CalendarId")
                        .HasConstraintName("FK__LocationC__Calen__2D47B39A");

                    b.HasOne("Group.Salto.Entities.Tenant.Locations", "Location")
                        .WithMany("LocationCalendar")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK__LocationC__Locat__2E3BD7D3");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Locations", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleResponsibleLocation")
                        .WithMany("Locations")
                        .HasForeignKey("PeopleResponsibleLocationId")
                        .HasConstraintName("FK_Locations_People");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.LocationsFinalClients", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.FinalClients", "FinalClient")
                        .WithMany("LocationsFinalClients")
                        .HasForeignKey("FinalClientId")
                        .HasConstraintName("FK_LocationsFinalClients_FinalClients");

                    b.HasOne("Group.Salto.Entities.Tenant.Locations", "Location")
                        .WithMany("LocationsFinalClients")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_LocationsFinalClients_Locations");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleCommercial")
                        .WithMany("LocationsFinalClients")
                        .HasForeignKey("PeopleCommercialId")
                        .HasConstraintName("FK_LocationsFinalClients_People");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.MainWoViewConfigurationsColumns", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.UsersMainWoviewConfigurations", "UserMainWoviewConfiguration")
                        .WithMany("MainWoViewConfigurationsColumns")
                        .HasForeignKey("UserMainWoviewConfigurationId")
                        .HasConstraintName("FK_MainWOViewConfigurationsColumns_UsersMainWOViewConfigurations");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.MainWoviewConfigurationsGroups", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.PeopleCollections", "PeopleCollection")
                        .WithMany("MainWoviewConfigurationsGroups")
                        .HasForeignKey("PeopleCollectionId")
                        .HasConstraintName("FK_MainWOViewConfigurationsGroups_PeopleCollection");

                    b.HasOne("Group.Salto.Entities.Tenant.UsersMainWoviewConfigurations", "UserMainWoviewConfiguration")
                        .WithMany("MainWoviewConfigurationsGroups")
                        .HasForeignKey("UserMainWoviewConfigurationId")
                        .HasConstraintName("FK_MainWOViewConfigurationsGroups_UserMainWoViewConfiguration");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.MainWoViewConfigurationsPeople", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("MainWoViewConfigurationsPeople")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK_MainWoViewConfigurationsPeople_People");

                    b.HasOne("Group.Salto.Entities.Tenant.UsersMainWoviewConfigurations", "UserMainWoViewConfiguration")
                        .WithMany("MainWoViewConfigurationsPeople")
                        .HasForeignKey("UserMainWoViewConfigurationId")
                        .HasConstraintName("FK_MainWoViewConfigurationsPeople_UserMainWoViewConfiguration");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.MaterialForm", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ExtraFieldsValues", "ExtraFieldValue")
                        .WithMany("MaterialForm")
                        .HasForeignKey("ExtraFieldValueId")
                        .HasConstraintName("FK_MaterialForm_ExtraFieldsValues");

                    b.HasOne("Group.Salto.Entities.Tenant.Teams", "Team")
                        .WithMany("MaterialForm")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_MaterialForm_Teams");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Models", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Brands", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Models_Brands");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.People", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Companies", "Company")
                        .WithMany("People")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK__People__CompanyI__3AA1AEB8");

                    b.HasOne("Group.Salto.Entities.Tenant.Departments", "Department")
                        .WithMany("People")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__People__Departme__3B95D2F1");

                    b.HasOne("Group.Salto.Entities.Tenant.PointsRate", "PointsRate")
                        .WithMany("People")
                        .HasForeignKey("PointsRateId")
                        .HasConstraintName("FK__People__PointsRa__3C89F72A");

                    b.HasOne("Group.Salto.Entities.Tenant.SubContracts", "Subcontract")
                        .WithMany("People")
                        .HasForeignKey("SubcontractId")
                        .HasConstraintName("FK_People_SubContracts");

                    b.HasOne("Group.Salto.Entities.Tenant.UserConfiguration", "UserConfiguration")
                        .WithMany("People")
                        .HasForeignKey("UserConfigurationId");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkCenters", "WorkCenter")
                        .WithMany("WorkCenterPeople")
                        .HasForeignKey("WorkCenterId")
                        .HasConstraintName("FK__People__WorkCenter");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleCalendars", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Calendars", "Calendar")
                        .WithMany("PeopleCalendars")
                        .HasForeignKey("CalendarId")
                        .HasConstraintName("FK__PeopleCal__Calen__405A880E");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("PeopleCalendars")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK__PeopleCal__Peopl__414EAC47");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleCollectionCalendars", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Calendars", "Calendar")
                        .WithMany("PeopleCollectionCalendars")
                        .HasForeignKey("CalendarId")
                        .HasConstraintName("FK_PeopleCollectionCalendars_Calendars");

                    b.HasOne("Group.Salto.Entities.Tenant.PeopleCollections", "PeopleCollection")
                        .WithMany("PeopleCollectionCalendars")
                        .HasForeignKey("PeopleCollectionId")
                        .HasConstraintName("FK_PeopleCollectionCalendars_PeopleCollections");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleCollectionsAdmins", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.PeopleCollections", "PeopleCollection")
                        .WithMany("PeopleCollectionsAdmins")
                        .HasForeignKey("PeopleCollectionId")
                        .HasConstraintName("FK_PeopleCollectionsAdmins_PeopleCollection");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("PeopleCollectionsAdmins")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK_PeopleCollectionsAdmins_People");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleCollectionsPeople", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.PeopleCollections", "PeopleCollection")
                        .WithMany("PeopleCollectionsPeople")
                        .HasForeignKey("PeopleCollectionId")
                        .HasConstraintName("FK_PeopleCollectionsPeople_PeopleCollections");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("PeopleCollectionsPeople")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK_PeopleCollectionsPeople_People");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleCollectionsPermissions", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.PeopleCollections", "PeopleCollection")
                        .WithMany("PeopleCollectionPermission")
                        .HasForeignKey("PeopleCollectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Group.Salto.Entities.Tenant.Permissions", "Permissions")
                        .WithMany("PeopleCollectionPermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleCost", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("PeopleCost")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK_PeopleCost_People");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleCostHistorical", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("PeopleCostHistorical")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK_WorkOrderCategories_People");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeoplePermissions", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("PeoplePermissions")
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Group.Salto.Entities.Tenant.Permissions", "Permission")
                        .WithMany("PeoplePermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleProjects", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("PeopleProjects")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK_PeopleProjects_People");

                    b.HasOne("Group.Salto.Entities.Tenant.Projects", "Projects")
                        .WithMany("PeopleProjects")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_PeopleProjects_Projects");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PeopleRegisteredPda", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("PeopleRegisteredPda")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK_PeopleRegisteredPda_People");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PermissionsQueues", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Permissions", "Permission")
                        .WithMany("PermissionQueue")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Group.Salto.Entities.Tenant.Queues", "Queue")
                        .WithMany("PermissionQueue")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PermissionsTasks", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Permissions", "Permission")
                        .WithMany("PermissionTask")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Group.Salto.Entities.Tenant.Tasks", "Task")
                        .WithMany("PermissionsTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PlanificationCriterias", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("PlanificationCriterias")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK_PLANIFICATIONCRITERIAS_PERSONES");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PlanificationProcesses", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Calendars", "ExecutionCalendarNavigation")
                        .WithMany("PlanificationProcesses")
                        .HasForeignKey("ExecutionCalendar")
                        .HasConstraintName("FK__Planifica__Execu__4F9CCB9E");

                    b.HasOne("Group.Salto.Entities.Tenant.FormConfigs", "HumanResourcesFilterNavigation")
                        .WithMany("PlanificationProcessesHumanResourcesFilterNavigation")
                        .HasForeignKey("HumanResourcesFilter")
                        .HasConstraintName("FK__Planifica__Human__5090EFD7");

                    b.HasOne("Group.Salto.Entities.Tenant.OptimizationFunctionWeights", "WeightsNavigation")
                        .WithMany("PlanificationProcesses")
                        .HasForeignKey("Weights")
                        .HasConstraintName("FK__Planifica__Weigh__51851410");

                    b.HasOne("Group.Salto.Entities.Tenant.FormConfigs", "WorkOrdersFilterNavigation")
                        .WithMany("PlanificationProcessesWorkOrdersFilterNavigation")
                        .HasForeignKey("WorkOrdersFilter")
                        .HasConstraintName("FK__Planifica__WorkO__52793849");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PlanningPanelViewConfiguration", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleOwner")
                        .WithMany("PlanningPanelViewConfiguration")
                        .HasForeignKey("PeopleOwnerId")
                        .HasConstraintName("FK_PlanningPanelViewConfiguration_People");

                    b.HasOne("Group.Salto.Entities.Tenant.UsersMainWoviewConfigurations", "UsersMainWoViewConfiguration")
                        .WithMany("PlanningPanelViewConfiguration")
                        .HasForeignKey("UsersMainWoViewConfigurationId")
                        .HasConstraintName("FK_PlanningPanelViewConfiguration_UsersMainWoViewConfiguration");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PlanningPanelViewConfigurationPeople", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("PlanningPanelViewConfigurationPeople")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK_PlanningPanelViewConfiguration_People_People");

                    b.HasOne("Group.Salto.Entities.Tenant.PlanningPanelViewConfiguration", "PlanningPanelViewConfiguration")
                        .WithMany("PlanningPanelViewConfigurationPeople")
                        .HasForeignKey("PlanningPanelViewConfigurationId")
                        .HasConstraintName("FK_PlanningPanelViewConfiguration_People_PlanningPanelViewConfiguration");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PlanningPanelViewConfigurationPeopleCollection", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.PeopleCollections", "PeopleCollection")
                        .WithMany("PlanningPanelViewConfigurationPeopleCollection")
                        .HasForeignKey("PeopleCollectionId")
                        .HasConstraintName("FK__PlanningP__Peopl__573DED66");

                    b.HasOne("Group.Salto.Entities.Tenant.PlanningPanelViewConfiguration", "PlanningPanelViewConfiguration")
                        .WithMany("PlanningPanelViewConfigurationPeopleCollection")
                        .HasForeignKey("PlanningPanelViewConfigurationId")
                        .HasConstraintName("FK__PlanningP__Plann__5832119F");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PostconditionCollections", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Tasks", "Task")
                        .WithMany("PostconditionCollections")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_PostconditionCollections_Tasks");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Postconditions", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ExternalWorOrderStatuses", "ExternalWorOrderStatus")
                        .WithMany("Postconditions")
                        .HasForeignKey("ExternalWorOrderStatusId")
                        .HasConstraintName("FK_Postconditions_ExternalWorOrderStatus");

                    b.HasOne("Group.Salto.Entities.Tenant.ExtraFields", "ExtraField")
                        .WithMany("Postconditions")
                        .HasForeignKey("ExtraFieldId")
                        .HasConstraintName("FK_Postconditions_ExtraFields");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleManipulator")
                        .WithMany("PostconditionsPeopleManipulator")
                        .HasForeignKey("PeopleManipulatorId")
                        .HasConstraintName("FK_Postconditions_PeopleManipulator");

                    b.HasOne("Group.Salto.Entities.Tenant.PeopleCollections", "PeopleResponsibleTechniciansCollection")
                        .WithMany("Postconditions")
                        .HasForeignKey("PeopleResponsibleTechniciansCollectionId")
                        .HasConstraintName("FK_Postconditions_PeopleCollections");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleTechnicians")
                        .WithMany("PostconditionsPeopleTechnicians")
                        .HasForeignKey("PeopleTechniciansId")
                        .HasConstraintName("FK_Postconditions_PeopleTechnicians");

                    b.HasOne("Group.Salto.Entities.Tenant.PostconditionCollections", "PostconditionCollections")
                        .WithMany("Postconditions")
                        .HasForeignKey("PostconditionCollectionsId")
                        .HasConstraintName("FK_Postconditions_PostconditionCollections");

                    b.HasOne("Group.Salto.Entities.Tenant.Queues", "Queue")
                        .WithMany("Postconditions")
                        .HasForeignKey("QueueId")
                        .HasConstraintName("FK_Postconditions_Queues");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderStatuses", "WorkOrderStatus")
                        .WithMany("Postconditions")
                        .HasForeignKey("WorkOrderStatusId")
                        .HasConstraintName("FK_Postconditions_WorkOrderStatus");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Preconditions", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.PeopleCollections", "PeopleResponsibleTechniciansCollection")
                        .WithMany("Preconditions")
                        .HasForeignKey("PeopleResponsibleTechniciansCollectionId")
                        .HasConstraintName("FK_Preconditions_PeopleCollections");

                    b.HasOne("Group.Salto.Entities.Tenant.PostconditionCollections", "PostconditionCollection")
                        .WithMany("Preconditions")
                        .HasForeignKey("PostconditionCollectionId")
                        .HasConstraintName("FK_Postcondicions_PostconditionCollections");

                    b.HasOne("Group.Salto.Entities.Tenant.Tasks", "Task")
                        .WithMany("Preconditions")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_Preconditions_Tasks");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PreconditionsLiteralValues", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ExternalWorOrderStatuses", "ExternalWorOrderStatus")
                        .WithMany("PreconditionsLiteralValues")
                        .HasForeignKey("ExternalWorOrderStatusId")
                        .HasConstraintName("FK_PreconditionsLiteralValues_ExternalWorOrderStatuses");

                    b.HasOne("Group.Salto.Entities.Tenant.FinalClients", "FinalClient")
                        .WithMany("PreconditionsLiteralValues")
                        .HasForeignKey("FinalClientId")
                        .HasConstraintName("FK_PreconditionsLiteralValues_FinalClients");

                    b.HasOne("Group.Salto.Entities.Tenant.LiteralsPreconditions", "LiteralPrecondition")
                        .WithMany("PreconditionsLiteralValues")
                        .HasForeignKey("LiteralPreconditionId")
                        .HasConstraintName("FK_PreconditionsLiteralValues_LiteralsPreconditions");

                    b.HasOne("Group.Salto.Entities.Tenant.Locations", "Location")
                        .WithMany("PreconditionsLiteralValues")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_PreconditionsLiteralValues_Locations");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleManipulator")
                        .WithMany("PreconditionsLiteralValuesPeopleManipulator")
                        .HasForeignKey("PeopleManipulatorId")
                        .HasConstraintName("FK_PreconditionsLiteralValues_PeopleManipulator");

                    b.HasOne("Group.Salto.Entities.Tenant.PeopleCollections", "PeopleResponsibleTechniciansCollection")
                        .WithMany("PreconditionsLiteralValues")
                        .HasForeignKey("PeopleResponsibleTechniciansCollectionId")
                        .HasConstraintName("FK_PreconditionsLiteralValues_PeopleCollections");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleTechnician")
                        .WithMany("PreconditionsLiteralValuesPeopleTechnician")
                        .HasForeignKey("PeopleTechnicianId")
                        .HasConstraintName("FK_PreconditionsLiteralValues_PeopleTechnicians");

                    b.HasOne("Group.Salto.Entities.Tenant.Projects", "Project")
                        .WithMany("PreconditionsLiteralValues")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_PreconditionsLiteralValues_Projects");

                    b.HasOne("Group.Salto.Entities.Tenant.Queues", "Queue")
                        .WithMany("PreconditionsLiteralValues")
                        .HasForeignKey("QueueId")
                        .HasConstraintName("FK_PreconditionsLiteralValues_Queues");

                    b.HasOne("Group.Salto.Entities.Tenant.Teams", "Team")
                        .WithMany("PreconditionsLiteralValues")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_PreconditionsLiteralValues_Teams");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderCategories", "WorkOrderCategory")
                        .WithMany("PreconditionsLiteralValues")
                        .HasForeignKey("WorkOrderCategoryId")
                        .HasConstraintName("FK_ValorsLiteralsPrecondicio_WorkOrderCategories");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderStatuses", "WorkOrderStatus")
                        .WithMany("PreconditionsLiteralValues")
                        .HasForeignKey("WorkOrderStatusId")
                        .HasConstraintName("FK_PreconditionsLiteralValues_WorkOrderStatuses");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderTypes", "WorkOrderTypesN1")
                        .WithMany("PreconditionsLiteralValuesWorkOrderTypesN1")
                        .HasForeignKey("WorkOrderTypesN1id")
                        .HasConstraintName("FK_PreconditionsLiteralValues_WorkOrderTypesN1");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderTypes", "WorkOrderTypesN2")
                        .WithMany("PreconditionsLiteralValuesWorkOrderTypesN2")
                        .HasForeignKey("WorkOrderTypesN2id")
                        .HasConstraintName("FK_PreconditionsLiteralValues_WorkOrderTypesN2");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderTypes", "WorkOrderTypesN3")
                        .WithMany("PreconditionsLiteralValuesWorkOrderTypesN3")
                        .HasForeignKey("WorkOrderTypesN3id")
                        .HasConstraintName("FK_PreconditionsLiteralValues_WorkOrderTypesN3");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderTypes", "WorkOrderTypesN4")
                        .WithMany("PreconditionsLiteralValuesWorkOrderTypesN4")
                        .HasForeignKey("WorkOrderTypesN4id")
                        .HasConstraintName("FK_PreconditionsLiteralValues_WorkOrderTypesN4");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderTypes", "WorkOrderTypesN5")
                        .WithMany("PreconditionsLiteralValuesWorkOrderTypesN5")
                        .HasForeignKey("WorkOrderTypesN5id")
                        .HasConstraintName("FK_PreconditionsLiteralValues_WorkOrderTypesN5");

                    b.HasOne("Group.Salto.Entities.Tenant.Zones", "Zone")
                        .WithMany("PreconditionsLiteralValues")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK_ValorsLiteralsPrecondicio_Zones");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PredefinedServices", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.CollectionsExtraField", "CollectionExtraField")
                        .WithMany("PredefinedServices")
                        .HasForeignKey("CollectionExtraFieldId")
                        .HasConstraintName("FK_PredefinedServices_CollectionsExtraField");

                    b.HasOne("Group.Salto.Entities.Tenant.Projects", "Project")
                        .WithMany("PredefinedServices")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_PredefinedServices_Projects");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PredefinedServicesPermission", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Permissions", "Permission")
                        .WithMany("PredefinedServicesPermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Group.Salto.Entities.Tenant.PredefinedServices", "PredefinedService")
                        .WithMany("PredefinedServicesPermission")
                        .HasForeignKey("PredefinedServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Projects", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.CollectionsClosureCodes", "CollectionsClosureCodes")
                        .WithMany("Projects")
                        .HasForeignKey("CollectionsClosureCodesId")
                        .HasConstraintName("FK_Projects_CollectionsClosureCodes");

                    b.HasOne("Group.Salto.Entities.Tenant.CollectionsExtraField", "CollectionsExtraField")
                        .WithMany("Projects")
                        .HasForeignKey("CollectionsExtraFieldId")
                        .HasConstraintName("FK_Projects_CollectionsExtraField");

                    b.HasOne("Group.Salto.Entities.Tenant.CollectionsTypesWorkOrders", "CollectionsTypesWorkOrders")
                        .WithMany("Projects")
                        .HasForeignKey("CollectionsTypesWorkOrdersId")
                        .HasConstraintName("FK_Projects_CollectionsTypesWorkOrders");

                    b.HasOne("Group.Salto.Entities.Tenant.Contracts", "Contract")
                        .WithMany("Projects")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_Projects_Contract");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderCategoriesCollections", "WorkOrderCategoriesCollection")
                        .WithMany("Projects")
                        .HasForeignKey("WorkOrderCategoriesCollectionId")
                        .HasConstraintName("FK_Projects_WorkOrderCategoriesCollections");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderStatuses", "WorkOrderStatuses")
                        .WithMany("Projects")
                        .HasForeignKey("WorkOrderStatusesId")
                        .HasConstraintName("FK_Projects_WorkOrderStatuses");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ProjectsCalendars", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Calendars", "Calendar")
                        .WithMany("ProjectsCalendars")
                        .HasForeignKey("CalendarId")
                        .HasConstraintName("FK_ProjectsCalendars_Calendars");

                    b.HasOne("Group.Salto.Entities.Tenant.Projects", "Project")
                        .WithMany("ProjectsCalendars")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_ProjectsCalendars_Projects");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ProjectsContacts", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Contacts", "Contact")
                        .WithMany("ProjectsContacts")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_ProjectsContacts_Contact");

                    b.HasOne("Group.Salto.Entities.Tenant.Projects", "Project")
                        .WithMany("ProjectsContacts")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_ProjectsContacts_Project");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ProjectsPermissions", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Permissions", "Permission")
                        .WithMany("ProjectPermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Group.Salto.Entities.Tenant.Projects", "Project")
                        .WithMany("ProjectPermission")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PushNotificationsPeople", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.PushNotifications", "PushNotification")
                        .WithMany("PushNotificationsPeople")
                        .HasForeignKey("NotificationId")
                        .HasConstraintName("FK_PushNotificationsPeople_PushNotification");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("PushNotificationsPeople")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK_PushNotificationsPeople_People");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.PushNotificationsPeopleCollections", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.PushNotifications", "Notification")
                        .WithMany("PushNotificationsPeopleCollections")
                        .HasForeignKey("NotificationId")
                        .HasConstraintName("FK_PushNotificationsPeopleCollections_Notification");

                    b.HasOne("Group.Salto.Entities.Tenant.PeopleCollections", "PeopleCollections")
                        .WithMany("PushNotificationsPeopleCollections")
                        .HasForeignKey("PeopleCollectionsId")
                        .HasConstraintName("FK_PushNotificationsPeopleCollections_PeopleCollection");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.QueuesTranslations", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Queues", "Queues")
                        .WithMany("QueuesTranslations")
                        .HasForeignKey("QueuesId");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Services", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ClosingCodes", "ClosingCodeFirst")
                        .WithMany("ServicesClosingCodeFirst")
                        .HasForeignKey("ClosingCodeFirstId")
                        .HasConstraintName("FK_Services_ClosingCodesFirst");

                    b.HasOne("Group.Salto.Entities.Tenant.ClosingCodes", "ClosingCode")
                        .WithMany("ServicesClosingCode")
                        .HasForeignKey("ClosingCodeId")
                        .HasConstraintName("FK__Services__Closin__0D99FE17");

                    b.HasOne("Group.Salto.Entities.Tenant.ClosingCodes", "ClosingCodeSecond")
                        .WithMany("ServicesClosingCodeSecond")
                        .HasForeignKey("ClosingCodeSecondId")
                        .HasConstraintName("FK_Services_ClosingCodesSecond");

                    b.HasOne("Group.Salto.Entities.Tenant.ClosingCodes", "ClosingCodeThird")
                        .WithMany("ServicesClosingCodeThird")
                        .HasForeignKey("ClosingCodeThirdId")
                        .HasConstraintName("FK_Services_ClosingCodesThird");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleResponsible")
                        .WithMany("Services")
                        .HasForeignKey("PeopleResponsibleId")
                        .HasConstraintName("FK_Services_People");

                    b.HasOne("Group.Salto.Entities.Tenant.PredefinedServices", "PredefinedService")
                        .WithMany("Services")
                        .HasForeignKey("PredefinedServiceId")
                        .HasConstraintName("FK_Services_PredefinedServices");

                    b.HasOne("Group.Salto.Entities.Tenant.Services", "ServicesCancelForm")
                        .WithMany("InverseServicesCancelForm")
                        .HasForeignKey("ServicesCancelFormId")
                        .HasConstraintName("FK__Services__Servic__0E8E2250");

                    b.HasOne("Group.Salto.Entities.Tenant.SubContracts", "SubcontractResponsible")
                        .WithMany("Services")
                        .HasForeignKey("SubcontractResponsibleId")
                        .HasConstraintName("FK_Services_Subcontracts");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ServicesAnalysis", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrders", "WorkOrderCodeNavigation")
                        .WithMany("ServicesAnalysis")
                        .HasForeignKey("WorkOrderCode")
                        .HasConstraintName("FK_SERVICEANALYSIS_ORDRES");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ServicesViewConfigurations", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.UserConfiguration", "UserConfiguration")
                        .WithMany("ServicesViewConfigurations")
                        .HasForeignKey("UserConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ServicesViewConfigurationsColumns", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ServicesViewConfigurations", "IdNavigation")
                        .WithMany("ServicesViewConfigurationsColumns")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_ServicesViewConfigurationsColumns_ServicesViewConfigurations");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Sessions", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.UserConfiguration", "UserConfiguration")
                        .WithMany("Sessions")
                        .HasForeignKey("UserConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.SgsClosingInfo", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrders", "WorkOrder")
                        .WithMany("SgsClosingInfo")
                        .HasForeignKey("WorkOrderId")
                        .HasConstraintName("FK__SgsClosin__WorkO__190BB0C3");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.SiteUser", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Locations", "Location")
                        .WithMany("SiteUser")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK__SiteUser__Locati__19FFD4FC");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.StatesSla", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Sla", "Sla")
                        .WithMany("StatesSla")
                        .HasForeignKey("SlaId")
                        .HasConstraintName("FK_StatesSla_Sla");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.SubContracts", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.SalesRate", "SalesRate")
                        .WithMany("SubContracts")
                        .HasForeignKey("SalesRateId")
                        .HasConstraintName("FK__SubContra__Sales__1BE81D6E");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.SubFamilies", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Families", "Family")
                        .WithMany("SubFamilies")
                        .HasForeignKey("FamilyId")
                        .HasConstraintName("FK_SubFamilies_Families");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Tasks", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ExternalWorOrderStatuses", "ExternalWorOrderStatus")
                        .WithMany("Tasks")
                        .HasForeignKey("ExternalWorOrderStatusId")
                        .HasConstraintName("FK_Tasks_ExternalWorOrderStatuses");

                    b.HasOne("Group.Salto.Entities.Tenant.ExtraFields", "ExtraField")
                        .WithMany("Tasks")
                        .HasForeignKey("ExtraFieldId")
                        .HasConstraintName("FK_Tasks_ExtraFields");

                    b.HasOne("Group.Salto.Entities.Tenant.Flows", "Flow")
                        .WithMany("Tasks")
                        .HasForeignKey("FlowId")
                        .HasConstraintName("FK_Tasks_Flows");

                    b.HasOne("Group.Salto.Entities.Tenant.MailTemplate", "MailTemplate")
                        .WithMany("Tasks")
                        .HasForeignKey("MailTemplateId")
                        .HasConstraintName("FK__Tasks__MailTempl__1DD065E0");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleManipulator")
                        .WithMany("TasksPeopleManipulator")
                        .HasForeignKey("PeopleManipulatorId")
                        .HasConstraintName("FK_Tasks_PeopleManipulator");

                    b.HasOne("Group.Salto.Entities.Tenant.PeopleCollections", "PeopleResponsibleTechnicians")
                        .WithMany("Tasks")
                        .HasForeignKey("PeopleResponsibleTechniciansId")
                        .HasConstraintName("FK_Tasks_PeopleResponsibleTechnicians");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleTechnician")
                        .WithMany("TasksPeopleTechnician")
                        .HasForeignKey("PeopleTechnicianId")
                        .HasConstraintName("FK_Tasks_PeopleTechnician");

                    b.HasOne("Group.Salto.Entities.Tenant.PredefinedServices", "PredefinedService")
                        .WithMany("Tasks")
                        .HasForeignKey("PredefinedServiceId")
                        .HasConstraintName("FK_Tasks_PredefinedServices");

                    b.HasOne("Group.Salto.Entities.Tenant.Queues", "Queue")
                        .WithMany("Tasks")
                        .HasForeignKey("QueueId")
                        .HasConstraintName("FK_Tasks_Queues");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderStatuses", "WorkOrderStatus")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkOrderStatusId")
                        .HasConstraintName("FK_Tasks_WorkOrderStatuses");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.TaskWebServiceCallItems", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Tasks", "Task")
                        .WithMany("TaskWebServiceCallItems")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK__TaskWebSe__TaskI__2759D01A");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Teams", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.AssetStatuses", "AssetStatus")
                        .WithMany("Teams")
                        .HasForeignKey("AssetStatusId")
                        .HasConstraintName("FK_Status_AssetStatuses");

                    b.HasOne("Group.Salto.Entities.Tenant.Guarantee", "Guarantee")
                        .WithMany("Teams")
                        .HasForeignKey("GuaranteeId")
                        .HasConstraintName("FK_Teams_Guarantee");

                    b.HasOne("Group.Salto.Entities.Tenant.Locations", "LocationClient")
                        .WithMany("TeamsLocationClient")
                        .HasForeignKey("LocationClientId")
                        .HasConstraintName("FK_Teams_LocationsClient");

                    b.HasOne("Group.Salto.Entities.Tenant.Locations", "Location")
                        .WithMany("TeamsLocation")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Teams_Locations");

                    b.HasOne("Group.Salto.Entities.Tenant.Models", "Model")
                        .WithMany("Teams")
                        .HasForeignKey("ModelId")
                        .HasConstraintName("FK_Teams_Model");

                    b.HasOne("Group.Salto.Entities.Tenant.SubFamilies", "SubFamily")
                        .WithMany("Teams")
                        .HasForeignKey("SubFamilyId")
                        .HasConstraintName("FK_Teams_Subfamilies");

                    b.HasOne("Group.Salto.Entities.Tenant.Usages", "Usage")
                        .WithMany("Teams")
                        .HasForeignKey("UsageId")
                        .HasConstraintName("FK__Teams__UsageId__284DF453");

                    b.HasOne("Group.Salto.Entities.Tenant.SiteUser", "User")
                        .WithMany("Teams")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Teams__UserId__2942188C");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.TeamsHiredServices", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.HiredServices", "HiredService")
                        .WithMany("TeamsHiredServices")
                        .HasForeignKey("HiredServiceId")
                        .HasConstraintName("FK_TeamsHiredServices_HiredServices");

                    b.HasOne("Group.Salto.Entities.Tenant.Teams", "Team")
                        .WithMany("TeamsHiredServices")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_TeamsHiredServices_Teams");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.TeamsWorkOrders", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Teams", "Team")
                        .WithMany("TeamsWorkOrders")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_TeamsWorkOrders_Teams");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrders", "WorkOrder")
                        .WithMany("TeamsWorkOrders")
                        .HasForeignKey("WorkOrderId")
                        .HasConstraintName("FK_TeamsWorkOrders_WorkOrders");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.TechnicalCodes", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleTechnic")
                        .WithMany("TechnicalCodes")
                        .HasForeignKey("PeopleTechnicId")
                        .HasConstraintName("FK_TechnicalCodes_People");

                    b.HasOne("Group.Salto.Entities.Tenant.Projects", "Project")
                        .WithMany("TechnicalCodes")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_TechnicalCodes_Projects");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderCategories", "WorkOrderCategory")
                        .WithMany("TechnicalCodes")
                        .HasForeignKey("WorkOrderCategoryId")
                        .HasConstraintName("FK__Technical__WorkO__33BFA6FF");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.TechnicianListFilters", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("TechnicianListFilters")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK_TECHNICIANLISTFILTERS_PERSONES");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Tools", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Vehicles", "Vehicle")
                        .WithMany("Tools")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_Tools_Vehicles");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ToolsToolTypes", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Tools", "Tool")
                        .WithMany("ToolsToolTypes")
                        .HasForeignKey("ToolId")
                        .HasConstraintName("FK_ToolsToolTypes_Tools");

                    b.HasOne("Group.Salto.Entities.Tenant.ToolsType", "ToolType")
                        .WithMany("ToolsToolTypes")
                        .HasForeignKey("ToolTypeId")
                        .HasConstraintName("FK_ToolsToolTypes_ToolsType");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ToolsTypeWorkOrderTypes", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ToolsType", "ToolsType")
                        .WithMany("ToolsTypeWorkOrderTypes")
                        .HasForeignKey("ToolsTypeId")
                        .HasConstraintName("FK_ToolsTypeWorkOrderTypes_ToolsType");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderTypes", "WorkOrderTypes")
                        .WithMany("ToolsTypeWorkOrderTypes")
                        .HasForeignKey("WorkOrderTypesId")
                        .HasConstraintName("FK_ToolsTypeWorkOrderTypes_WorkOrderTypes");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.UsersMainWoviewConfigurations", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.UserConfiguration", "UserConfiguration")
                        .WithMany("UsersMainWoviewConfigurations")
                        .HasForeignKey("UserConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.Vehicles", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleDriver")
                        .WithMany("Vehicles")
                        .HasForeignKey("PeopleDriverId")
                        .HasConstraintName("FK_Vehicles_People");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkCenters", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Companies", "Company")
                        .WithMany("WorkCenters")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "People")
                        .WithMany("WorkCenters")
                        .HasForeignKey("PeopleId");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrderAnalysis", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrders", "WorkOrders")
                        .WithOne("WorkOrderAnalysis")
                        .HasForeignKey("Group.Salto.Entities.Tenant.WorkOrderAnalysis", "WorkOrderCode")
                        .HasConstraintName("FK_WorkOrderAnalysis_WorkOrders");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrderCategories", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Sla", "Sla")
                        .WithMany("WorkOrderCategories")
                        .HasForeignKey("SlaId")
                        .HasConstraintName("FK_WorkOrderCategories_Sla");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderCategoriesCollections", "WorkOrderCategoriesCollection")
                        .WithMany("WorkOrderCategories")
                        .HasForeignKey("WorkOrderCategoriesCollectionId")
                        .HasConstraintName("FK_WorkOrderCategories_WorkOrderCategoriesCollections");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrderCategoriesCollectionCalendar", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Calendars", "Calendar")
                        .WithMany("WorkOrderCategoriesCollectionCalendar")
                        .HasForeignKey("CalendarId")
                        .HasConstraintName("FK__WorkOrder__Calen__420DC656");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderCategoriesCollections", "WorkOrderCategoriesCollection")
                        .WithMany("WorkOrderCategoriesCollectionCalendar")
                        .HasForeignKey("WorkOrderCategoriesCollectionId")
                        .HasConstraintName("FK__WorkOrder__WorkO__4301EA8F");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrderCategoryCalendar", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Calendars", "Calendar")
                        .WithMany("WorkOrderCategoryCalendar")
                        .HasForeignKey("CalendarId")
                        .HasConstraintName("FK__WorkOrder__Calen__43F60EC8");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderCategories", "WorkOrderCategory")
                        .WithMany("WorkOrderCategoryCalendar")
                        .HasForeignKey("WorkOrderCategoryId")
                        .HasConstraintName("FK__WorkOrder__WorkO__44EA3301");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrderCategoryKnowledge", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Knowledge", "Knowledge")
                        .WithMany("WorkOrderCategoryKnowledge")
                        .HasForeignKey("KnowledgeId")
                        .HasConstraintName("FK__WorkOrder__Knowl__45DE573A");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderCategories", "WorkOrderCategory")
                        .WithMany("WorkOrderCategoryKnowledge")
                        .HasForeignKey("WorkOrderCategoryId")
                        .HasConstraintName("FK__WorkOrder__WorkO__46D27B73");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrderCategoryPermissions", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Permissions", "Permission")
                        .WithMany("WorkOrderCategoryPermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderCategories", "WorkOrderCategory")
                        .WithMany("WorkOrderCategoryPermission")
                        .HasForeignKey("WorkOrderCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrders", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ExternalWorOrderStatuses", "ExternalWorOrderStatus")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ExternalWorOrderStatusId")
                        .HasConstraintName("FK_WorkOrders_ExternalWorOrderStatuses");

                    b.HasOne("Group.Salto.Entities.Tenant.FinalClients", "FinalClient")
                        .WithMany("WorkOrders")
                        .HasForeignKey("FinalClientId")
                        .HasConstraintName("FK_WorkOrders_FinalClients");

                    b.HasOne("Group.Salto.Entities.Tenant.Locations", "Location")
                        .WithMany("WorkOrders")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_WorkOrders_Locations");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleIntroducedBy")
                        .WithMany("WorkOrdersPeopleIntroducedBy")
                        .HasForeignKey("PeopleIntroducedById")
                        .HasConstraintName("FK_WorkOrders_PeopleIntroducedBy");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleManipulator")
                        .WithMany("WorkOrdersPeopleManipulator")
                        .HasForeignKey("PeopleManipulatorId")
                        .HasConstraintName("FK_WorkOrders_PeopleManipulator");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleResponsible")
                        .WithMany("WorkOrdersPeopleResponsible")
                        .HasForeignKey("PeopleResponsibleId")
                        .HasConstraintName("FK_WorkOrders_PeopleResponsible");

                    b.HasOne("Group.Salto.Entities.Tenant.Projects", "Project")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_OrdreTreball_Projects");

                    b.HasOne("Group.Salto.Entities.Tenant.Queues", "Queue")
                        .WithMany("WorkOrders")
                        .HasForeignKey("QueueId")
                        .HasConstraintName("FK_WorkOrders_Queues");

                    b.HasOne("Group.Salto.Entities.Tenant.Services", "Service")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_OrdreTreball_Services");

                    b.HasOne("Group.Salto.Entities.Tenant.SiteUser", "SiteUser")
                        .WithMany("WorkOrders")
                        .HasForeignKey("SiteUserId")
                        .HasConstraintName("FK__WorkOrder__SiteU__4B973090");

                    b.HasOne("Group.Salto.Entities.Tenant.Teams", "Team")
                        .WithMany("WorkOrders")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_WorkOrders_Teams");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderCategories", "WorkOrderCategory")
                        .WithMany("WorkOrders")
                        .HasForeignKey("WorkOrderCategoryId")
                        .HasConstraintName("FK_WorkOrders_WorkOrderCategories");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderStatuses", "WorkOrderStatus")
                        .WithMany("WorkOrders")
                        .HasForeignKey("WorkOrderStatusId")
                        .HasConstraintName("FK_WorkOrders_WorkOrderStatuses");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderTypes", "WorkOrderTypes")
                        .WithMany("WorkOrders")
                        .HasForeignKey("WorkOrderTypesId")
                        .HasConstraintName("FK_WorkOrders_WorkOrderTypes");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrders", "WorkOrdersFather")
                        .WithMany("InverseWorkOrdersFather")
                        .HasForeignKey("WorkOrdersFatherId")
                        .HasConstraintName("FK_WorkOrders_WorkOrdersFather");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrdersDeritative", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ExternalWorOrderStatuses", "ExternalWorOrderStatus")
                        .WithMany("WorkOrdersDeritative")
                        .HasForeignKey("ExternalWorOrderStatusId")
                        .HasConstraintName("FK_WorkOrdersDeritative_ExternalWorOrderStatuses");

                    b.HasOne("Group.Salto.Entities.Tenant.FinalClients", "FinalClient")
                        .WithMany("WorkOrdersDeritative")
                        .HasForeignKey("FinalClientId")
                        .HasConstraintName("FK_WorkOrdersDeritative_FinalClients");

                    b.HasOne("Group.Salto.Entities.Tenant.Locations", "Location")
                        .WithMany("WorkOrdersDeritative")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_WorkOrdersDeritative_Locations");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleIntroducedBy")
                        .WithMany("WorkOrdersDeritativePeopleIntroducedBy")
                        .HasForeignKey("PeopleIntroducedById")
                        .HasConstraintName("FK_WorkOrdersDeritative_PeopleIntroducedBy");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleManipulator")
                        .WithMany("WorkOrdersDeritativePeopleManipulator")
                        .HasForeignKey("PeopleManipulatorId")
                        .HasConstraintName("FK_WorkOrdersDeritative_PeopleManipulator");

                    b.HasOne("Group.Salto.Entities.Tenant.People", "PeopleResponsible")
                        .WithMany("WorkOrdersDeritativePeopleResponsible")
                        .HasForeignKey("PeopleResponsibleId")
                        .HasConstraintName("FK_WorkOrdersDeritative_PeopleResponsible");

                    b.HasOne("Group.Salto.Entities.Tenant.PeopleCollections", "PeopleResponsibleTechniciansCollection")
                        .WithMany("WorkOrdersDeritative")
                        .HasForeignKey("PeopleResponsibleTechniciansCollectionId")
                        .HasConstraintName("FK_WorkOrdersDeritative_PeopleResponsibleTechniciansCollection");

                    b.HasOne("Group.Salto.Entities.Tenant.Projects", "Project")
                        .WithMany("WorkOrdersDeritative")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_OrdreTreballDerivades_Projects");

                    b.HasOne("Group.Salto.Entities.Tenant.Queues", "Queue")
                        .WithMany("WorkOrdersDeritative")
                        .HasForeignKey("QueueId")
                        .HasConstraintName("FK_WorkOrdersDeritative_Queues");

                    b.HasOne("Group.Salto.Entities.Tenant.SiteUser", "SiteUser")
                        .WithMany("WorkOrdersDeritative")
                        .HasForeignKey("SiteUserId")
                        .HasConstraintName("FK__WorkOrder__SiteU__59E54FE7");

                    b.HasOne("Group.Salto.Entities.Tenant.Tasks", "Task")
                        .WithMany("WorkOrdersDeritative")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_WorkOrdersDeritative_Tasks");

                    b.HasOne("Group.Salto.Entities.Tenant.Teams", "Teams")
                        .WithMany("WorkOrdersDeritative")
                        .HasForeignKey("TeamsId")
                        .HasConstraintName("FK_WorkOrdersDeritative_Teams");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderCategories", "WorkOrderCategory")
                        .WithMany("WorkOrdersDeritative")
                        .HasForeignKey("WorkOrderCategoryId")
                        .HasConstraintName("FK_WorkOrdersDeritative_WorkOrderCategories");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderStatuses", "WorkOrderStatus")
                        .WithMany("WorkOrdersDeritative")
                        .HasForeignKey("WorkOrderStatusId")
                        .HasConstraintName("FK_WorkOrdersDeritative_WorkOrderStatuses");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderTypes", "WorkOrderType")
                        .WithMany("WorkOrdersDeritative")
                        .HasForeignKey("WorkOrderTypeId")
                        .HasConstraintName("FK_WorkOrdersDeritative_WorkOrderTypes");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrderStatusesTranslations", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderStatuses", "WorkOrderStatuses")
                        .WithMany("WorkOrderStatusesTranslations")
                        .HasForeignKey("WorkOrderStatusesId");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WorkOrderTypes", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.CollectionsTypesWorkOrders", "CollectionsTypesWorkOrders")
                        .WithMany("WorkOrderTypes")
                        .HasForeignKey("CollectionsTypesWorkOrdersId")
                        .HasConstraintName("FK_WorkOrderTypes_CollectionsTypesWorkOrders");

                    b.HasOne("Group.Salto.Entities.Tenant.Sla", "Sla")
                        .WithMany("WorkOrderTypes")
                        .HasForeignKey("SlaId")
                        .HasConstraintName("FK_WorkOrderTypes_Sla");

                    b.HasOne("Group.Salto.Entities.Tenant.WorkOrderTypes", "WorkOrderTypesFather")
                        .WithMany("InverseWorkOrderTypesFather")
                        .HasForeignKey("WorkOrderTypesFatherId")
                        .HasConstraintName("FK_WorkOrderTypes_WorkOrderTypesFather");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.WsErpSystemInstance", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ErpSystemInstance", "ErpSystemInstance")
                        .WithOne("WsErpSystemInstance")
                        .HasForeignKey("Group.Salto.Entities.Tenant.WsErpSystemInstance", "ErpSystemInstanceId")
                        .HasConstraintName("FK_WsErpSystemInstance_ErpSystemInstance");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ZoneProject", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.Projects", "Project")
                        .WithMany("ZoneProject")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__ZoneProje__Proje__6C040022");

                    b.HasOne("Group.Salto.Entities.Tenant.Zones", "Zone")
                        .WithMany("ZoneProject")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK__ZoneProje__ZoneI__6CF8245B");
                });

            modelBuilder.Entity("Group.Salto.Entities.Tenant.ZoneProjectPostalCode", b =>
                {
                    b.HasOne("Group.Salto.Entities.Tenant.ZoneProject", "ZoneProject")
                        .WithMany("ZoneProjectPostalCode")
                        .HasForeignKey("ZoneProjectId")
                        .HasConstraintName("FK__ZoneProje__ZoneP__6DEC4894");
                });
#pragma warning restore 612, 618
        }
    }
}
