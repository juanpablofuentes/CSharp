using Autofac;
using Group.Salto.Agents.PushNotification;
using Group.Salto.Common;
using Group.Salto.Common.Constants;
using Group.Salto.Common.Entities.Settings;
using Group.Salto.DataAccess.Repositories;
using Group.Salto.DataAccess.Tenant.Repositories;
using Group.Salto.DataAccess.Tenant.Service;
using Group.Salto.Infrastructure.Common.Agent;
using Group.Salto.Infrastructure.Common.Repository.SOM;
using Group.Salto.Infrastructure.Common.Repository.Tenant;
using Group.Salto.Infrastructure.Common.Service;
using Group.Salto.Log;
using Group.Salto.ServiceLibrary.Common.Contracts;
using Group.Salto.ServiceLibrary.Common.Contracts.Actions;
using Group.Salto.ServiceLibrary.Common.Contracts.ActionsRoles;
using Group.Salto.ServiceLibrary.Common.Contracts.Analysis;
using Group.Salto.ServiceLibrary.Common.Contracts.Calendar;
using Group.Salto.ServiceLibrary.Common.Contracts.AzureBlobStorage;
using Group.Salto.ServiceLibrary.Common.Contracts.CalendarEvent;
using Group.Salto.ServiceLibrary.Common.Contracts.Clients;
using Group.Salto.ServiceLibrary.Common.Contracts.Company;
using Group.Salto.ServiceLibrary.Common.Contracts.Contracts;
using Group.Salto.ServiceLibrary.Common.Contracts.ContractType;
using Group.Salto.ServiceLibrary.Common.Contracts.Country;
using Group.Salto.ServiceLibrary.Common.Contracts.Customer;
using Group.Salto.ServiceLibrary.Common.Contracts.Expense;
using Group.Salto.ServiceLibrary.Common.Contracts.Idantity;
using Group.Salto.ServiceLibrary.Common.Contracts.Knowledge;
using Group.Salto.ServiceLibrary.Common.Contracts.Language;
using Group.Salto.ServiceLibrary.Common.Contracts.Maturity;
using Group.Salto.ServiceLibrary.Common.Contracts.Module;
using Group.Salto.ServiceLibrary.Common.Contracts.Notification;
using Group.Salto.ServiceLibrary.Common.Contracts.People;
using Group.Salto.ServiceLibrary.Common.Contracts.PeopleCost;
using Group.Salto.ServiceLibrary.Common.Contracts.PeoplePermissions;
using Group.Salto.ServiceLibrary.Common.Contracts.Permisions;
using Group.Salto.ServiceLibrary.Common.Contracts.PointRate;
using Group.Salto.ServiceLibrary.Common.Contracts.PostalCode;
using Group.Salto.ServiceLibrary.Common.Contracts.Priority;
using Group.Salto.ServiceLibrary.Common.Contracts.Project;
using Group.Salto.ServiceLibrary.Common.Contracts.Rol;
using Group.Salto.ServiceLibrary.Common.Contracts.SalesRate;
using Group.Salto.ServiceLibrary.Common.Contracts.Subcontracts;
using Group.Salto.ServiceLibrary.Common.Contracts.Templates;
using Group.Salto.ServiceLibrary.Common.Contracts.TenantConfiguration;
using Group.Salto.ServiceLibrary.Common.Contracts.Tools;
using Group.Salto.ServiceLibrary.Common.Contracts.User;
using Group.Salto.ServiceLibrary.Common.Contracts.Vehicles;
using Group.Salto.ServiceLibrary.Common.Contracts.WorkCenter;
using Group.Salto.ServiceLibrary.Common.Contracts.WorkOrderStatus;
using Group.Salto.ServiceLibrary.Implementations;
using Group.Salto.ServiceLibrary.Implementations.Actions;
using Group.Salto.ServiceLibrary.Implementations.ActionsRoles;
using Group.Salto.ServiceLibrary.Implementations.Calendar;
using Group.Salto.ServiceLibrary.Implementations.AzureBlobStorage;
using Group.Salto.ServiceLibrary.Implementations.CalendarEvent;
using Group.Salto.ServiceLibrary.Implementations.Clients;
using Group.Salto.ServiceLibrary.Implementations.Company;
using Group.Salto.ServiceLibrary.Implementations.Contracts;
using Group.Salto.ServiceLibrary.Implementations.ContractType;
using Group.Salto.ServiceLibrary.Implementations.Country;
using Group.Salto.ServiceLibrary.Implementations.Customer;
using Group.Salto.ServiceLibrary.Implementations.Email;
using Group.Salto.ServiceLibrary.Implementations.Expense;
using Group.Salto.ServiceLibrary.Implementations.FinalClients;
using Group.Salto.ServiceLibrary.Implementations.Identity;
using Group.Salto.ServiceLibrary.Implementations.Knowledge;
using Group.Salto.ServiceLibrary.Implementations.Language;
using Group.Salto.ServiceLibrary.Implementations.Maturity;
using Group.Salto.ServiceLibrary.Implementations.Module;
using Group.Salto.ServiceLibrary.Implementations.Notification;
using Group.Salto.ServiceLibrary.Implementations.People;
using Group.Salto.ServiceLibrary.Implementations.PeopleCost;
using Group.Salto.ServiceLibrary.Implementations.PeoplePermissions;
using Group.Salto.ServiceLibrary.Implementations.Permisions;
using Group.Salto.ServiceLibrary.Implementations.PointRate;
using Group.Salto.ServiceLibrary.Implementations.PostalCode;
using Group.Salto.ServiceLibrary.Implementations.Priority;
using Group.Salto.ServiceLibrary.Implementations.Project;
using Group.Salto.ServiceLibrary.Implementations.Rol;
using Group.Salto.ServiceLibrary.Implementations.SalesRate;
using Group.Salto.ServiceLibrary.Implementations.Subcontracts;
using Group.Salto.ServiceLibrary.Implementations.Templates;
using Group.Salto.ServiceLibrary.Implementations.Tenant;
using Group.Salto.ServiceLibrary.Implementations.TenantConfiguration;
using Group.Salto.ServiceLibrary.Implementations.ToolsImplementation;
using Group.Salto.ServiceLibrary.Implementations.User;
using Group.Salto.ServiceLibrary.Implementations.Vehicles;
using Group.Salto.ServiceLibrary.Implementations.WorkCenter;
using Group.Salto.ServiceLibrary.Implementations.WorkOrderStatus;
using Microsoft.Extensions.Configuration;
using Group.Salto.ServiceLibrary.Implementations.EventCategories;
using Group.Salto.ServiceLibrary.Common.Contracts.EventCategories;
using Group.Salto.ServiceLibrary.Implementations.AvailabilityCategories;
using Group.Salto.ServiceLibrary.Common.Contracts.AvailabilityCategories;
using Group.Salto.ServiceLibrary.Common.Contracts.BasicInfo;
using Group.Salto.ServiceLibrary.Common.Contracts.ClosingCode;
using Group.Salto.ServiceLibrary.Common.Contracts.ClosureCode;
using Group.Salto.ServiceLibrary.Common.Contracts.ExternalWorkOrderStatus;
using Group.Salto.ServiceLibrary.Common.Contracts.Journey;
using Group.Salto.ServiceLibrary.Common.Contracts.PeopleCollection;
using Group.Salto.ServiceLibrary.Common.Contracts.PurchaseRates;
using Group.Salto.ServiceLibrary.Common.Contracts.Queue;
using Group.Salto.ServiceLibrary.Common.Contracts.ToolsType;
using Group.Salto.ServiceLibrary.Implementations.BasicInfo;
using Group.Salto.ServiceLibrary.Implementations.ClosureCode;
using Group.Salto.ServiceLibrary.Implementations.ExternalWorkOrderStatus;
using Group.Salto.ServiceLibrary.Implementations.Journey;
using Group.Salto.ServiceLibrary.Implementations.PeopleCollection;
using Group.Salto.ServiceLibrary.Implementations.PurchaseRate;
using Group.Salto.ServiceLibrary.Implementations.Queue;
using Group.Salto.ServiceLibrary.Implementations.Toolstype;
using Group.Salto.ServiceLibrary.Implementations.Origins;
using Group.Salto.ServiceLibrary.Common.Contracts.Origins;
using Group.Salto.ServiceLibrary.Implementations.PeopleCalendar;
using Group.Salto.ServiceLibrary.Common.Contracts.PeopleCalendar;
using Group.Salto.ServiceLibrary.Common.Contracts.PredefinedServices;
using Group.Salto.ServiceLibrary.Common.Contracts.Tasks;
using Group.Salto.ServiceLibrary.Common.Contracts.WorkOrderCategories;
using Group.Salto.ServiceLibrary.Implementations.PredefinedService;
using Group.Salto.ServiceLibrary.Implementations.Tasks;
using Group.Salto.ServiceLibrary.Implementations.WorkOrderCategories;
using Group.Salto.ServiceLibrary.Common.Contracts.WorkOrder;
using Group.Salto.ServiceLibrary.Implementations.WorkOrder;
using Group.Salto.ServiceLibrary.Implementations.CollectionTypeWorkOrders;
using Group.Salto.ServiceLibrary.Common.Contracts.CollectionTypeWorkOrders;
using Group.Salto.ServiceLibrary.Implementations.WorkOrderCategoriesCollection;
using Group.Salto.ServiceLibrary.Common.Contracts.WorkOrderCategoriesCollection;
using Group.Salto.ServiceLibrary.Common.Contracts.Sla;
using Group.Salto.ServiceLibrary.Implementations.sla;
using Group.Salto.ServiceLibrary.Common.Contracts.Symptom;
using Group.Salto.ServiceLibrary.Implementations.Symptoms;
using Group.Salto.ServiceLibrary.Implementations.WorkOrderCategoryCalendar;
using Group.Salto.ServiceLibrary.Common.Contracts.WorkOrderCategoryCalendar;
using Group.Salto.ServiceLibrary.Implementations.ReferenceTimeSla;
using Group.Salto.ServiceLibrary.Common.Contracts.ReferenceTimeSla;
using Group.Salto.ServiceLibrary.Implementations.ExtraFields;
using Group.Salto.ServiceLibrary.Common.Contracts.ExtraFields;
using Group.Salto.ServiceLibrary.Common.Contracts.SymptomCollection;
using Group.Salto.ServiceLibrary.Implementations.SymptomCollection;
using Group.Salto.ServiceLibrary.Implementations.CollectionsExtraField;
using Group.Salto.ServiceLibrary.Common.Contracts.CollectionsExtraField;
using Group.Salto.ServiceLibrary.Implementations.ProjectCalendar;
using Group.Salto.ServiceLibrary.Common.Contracts.ProjectCalendar;
using Group.Salto.ServiceLibrary.Implementations.ExtraFieldTypes;
using Group.Salto.ServiceLibrary.Common.Contracts.ExtraFieldTypes;
using Group.Salto.ServiceLibrary.Common.Contracts.ErpSystemInstanceQuery;
using Group.Salto.ServiceLibrary.Implementations.ErpSystemInstanceQuery;
using Group.Salto.ServiceLibrary.Implementations.AssetStatuses;
using Group.Salto.ServiceLibrary.Common.Contracts.AssetStatuses;
using Group.Salto.ServiceLibrary.Common.Contracts.Brand;
using Group.Salto.ServiceLibrary.Implementations.Brand;
using Group.Salto.ServiceLibrary.Common.Contracts.FinalClients;
using Group.Salto.ServiceLibrary.Implementations.Assets;
using Group.Salto.ServiceLibrary.Common.Contracts.Assets;
using Group.Salto.ServiceLibrary.Implementations.Zones;
using Group.Salto.ServiceLibrary.Common.Contracts.Zones;
using Group.Salto.ServiceLibrary.Implementations.Models;
using Group.Salto.ServiceLibrary.Common.Contracts.Models;
using Group.Salto.ServiceLibrary.Implementations.Brands;
using Group.Salto.ServiceLibrary.Common.Contracts.Brands;
using Group.Salto.ServiceLibrary.Common.Contracts.Families;
using Group.Salto.ServiceLibrary.Implementations.Families;
using Group.Salto.ServiceLibrary.Common.Contracts.SubFamilies;
using Group.Salto.ServiceLibrary.Implementations.SubFamilies;
using Group.Salto.ServiceLibrary.Implementations.WorkOrderColumns;
using Group.Salto.ServiceLibrary.Common.Contracts.WorkOrderColumns;
using Group.Salto.ServiceLibrary.Implementations.Municipality;
using Group.Salto.ServiceLibrary.Common.Contracts.Municipality;
using Group.Salto.ServiceLibrary.Implementations.Sites;
using Group.Salto.ServiceLibrary.Common.Contracts.Sites;
using Group.Salto.ServiceLibrary.Implementations.FinalClientSiteCalendars;
using Group.Salto.ServiceLibrary.Common.Contracts.FinalClientSite;
using Group.Salto.ServiceLibrary.Implementations.WorkOrderDefaultColumns;
using Group.Salto.ServiceLibrary.Common.Contracts.WorkOrderDefaultColumns;
using Group.Salto.ServiceLibrary.Implementations.State;
using Group.Salto.ServiceLibrary.Common.Contracts.States;
using Group.Salto.ServiceLibrary.Implementations.SiteUser;
using Group.Salto.ServiceLibrary.Common.Contracts.SiteUser;
using Group.Salto.ServiceLibrary.Implementations.SitesFinalClients;
using Group.Salto.ServiceLibrary.Common.Contracts.SitesFinalClients;
using Group.Salto.ServiceLibrary.Implementations.RolesActionGroupsActionsTenant;
using Group.Salto.ServiceLibrary.Common.Contracts.RolesActionGroupsActionsTenant;
using Group.Salto.ServiceLibrary.Implementations.UserConfigurationRolesTenant;
using Group.Salto.ServiceLibrary.Common.Contracts.UserConfigurationRolesTenant;
using Group.Salto.ServiceLibrary.Implementations.PaymentMethod;
using Group.Salto.ServiceLibrary.Common.Contracts.PaymentMethod;
using Group.Salto.ServiceLibrary.Common.Contracts.Flows;
using Group.Salto.ServiceLibrary.Implementations.Flows;
using Group.Salto.ServiceLibrary.Implementations.RepetitionParameter;
using Group.Salto.ServiceLibrary.Common.Contracts.RepetitionParameters;
using Group.Salto.ServiceLibrary.Implementations.CalculationType;
using Group.Salto.ServiceLibrary.Common.Contracts.CalculationType;
using Group.Salto.ServiceLibrary.Implementations.DamagedEquipment;
using Group.Salto.ServiceLibrary.Common.Contracts.DamagedEquipment;
using Group.Salto.ServiceLibrary.Common.Contracts.DaysType;
using Group.Salto.ServiceLibrary.Common.Contracts.Service;
using Group.Salto.ServiceLibrary.Implementations.Service;
using Group.Salto.ServiceLibrary.Implementations.ExpenseType;
using Group.Salto.ServiceLibrary.Common.Contracts.ExpenseType;
using Group.Salto.ServiceLibrary.Common.Contracts.TaskExecution;
using Group.Salto.ServiceLibrary.Implementations.TaskExecution;
using Group.Salto.ServiceLibrary.Implementations.Items;
using Group.Salto.ServiceLibrary.Common.Contracts.Items;
using Group.Salto.ServiceLibrary.Common.Contracts.Postcondition;
using Group.Salto.ServiceLibrary.Common.Contracts.PostconditionExecute;
using Group.Salto.ServiceLibrary.Implementations.Postconditions;
using Group.Salto.ServiceLibrary.Common.Contracts.SitesCalendar;
using Group.Salto.ServiceLibrary.Implementations.Analysis;
using Group.Salto.ServiceLibrary.Implementations.SitesCalendar;
using Group.Salto.ServiceLibrary.Implementations.PostconditionsExecute;
using Group.Salto.ServiceLibrary.Implementations.ItemTypes;
using Group.Salto.ServiceLibrary.Common.Contracts.ItemTypes;
using Group.Salto.ServiceLibrary.Common.Contracts.Derivative;
using Group.Salto.ServiceLibrary.Implementations.Derivative;
using Group.Salto.ServiceLibrary.Implementations.TriggerTypes;
using Group.Salto.ServiceLibrary.Common.Contracts.Trigger;
using Group.Salto.ServiceLibrary.Implementations.Trigger;
using Group.Salto.ServiceLibrary.Implementations.PreconditionTypes;
using Group.Salto.ServiceLibrary.Implementations.TasksTypes;
using Group.Salto.ServiceLibrary.Common.Contracts.TasksTypes;
using Group.Salto.ServiceLibrary.Common.Contracts.TriggerTypes;
using Group.Salto.ServiceLibrary.Implementations.ItemsSerialNumberStatusesService;
using Group.Salto.ServiceLibrary.Common.Contracts.ItemsSerialNumberStatuses;
using Group.Salto.ServiceLibrary.Common.Contracts.Billing;
using Group.Salto.ServiceLibrary.Implementations.Billing;
using Group.Salto.ServiceLibrary.Implementations.BillLines;
using Group.Salto.ServiceLibrary.Common.Contracts.BillLines;
using Group.Salto.ServiceLibrary.Common.Contracts.Ncalc;
using Group.Salto.ServiceLibrary.Implementations.Ncalc;
using Group.Salto.ServiceLibrary.Implementations.Preconditions;
using Group.Salto.ServiceLibrary.Common.Contracts.Precondition;
using Group.Salto.ServiceLibrary.Implementations.PostconditionTypes;
using Group.Salto.ServiceLibrary.Implementations.ServiceGauges;
using Group.Salto.ServiceLibrary.Common.Contracts.ServiceGauges;
using Group.Salto.ServiceLibrary.Common.Contracts.Warehouses;
using Group.Salto.ServiceLibrary.Implementations.Warehouses;
using Group.Salto.ServiceLibrary.Common.Contracts.Material;
using Group.Salto.ServiceLibrary.Implementations.Material;
using Group.Salto.ServiceLibrary.Common.Contracts.WarehouseMovements;
using Group.Salto.ServiceLibrary.Implementations.WarehouseMovements;
using Group.Salto.ServiceLibrary.Common.Contracts.LiteralPreconditions;
using Group.Salto.ServiceLibrary.Implementations.LiteralPreconditions;
using Group.Salto.ServiceLibrary.Common.Contracts.Excel;
using Group.Salto.ServiceLibrary.Implementations.Excel;
using Group.Salto.ServiceLibrary.Implementations.ActionsGroups;
using Group.Salto.ServiceLibrary.Common.Contracts.ActionsGroups;
using Group.Salto.ServiceLibrary.Implementations.WorkOrderViewConfigurations;
using Group.Salto.ServiceLibrary.Common.Contracts.WorkOrderViewConfigurations;
using Group.Salto.ServiceLibrary.Implementations.WOType;
using Group.Salto.ServiceLibrary.Common.Contracts.WOType;
using Group.Salto.ServiceLibrary.Implementations.ZoneProject;
using Group.Salto.ServiceLibrary.Common.Contracts.ZoneProject;
using Group.Salto.ServiceLibrary.Implementations.MailTemplate;
using Group.Salto.ServiceLibrary.Common.Contracts.MailTemplate;
using Group.Salto.ServiceLibrary.Implementations.WorkForm;
using Group.Salto.ServiceLibrary.Common.Contracts.WorkForm;
using Group.Salto.ServiceLibrary.Implementations.RolesTenant;
using Group.Salto.ServiceLibrary.Common.Contracts.RolesTenant;
using Group.Salto.ServiceLibrary.Common.Contracts.BillingRule;
using Group.Salto.ServiceLibrary.Implementations.BillingRules;
using Group.Salto.ServiceLibrary.Implementations.WorkOrderDerivated;
using Group.Salto.ServiceLibrary.Common.Contracts.WorkOrderDerivated;
using Group.Salto.ServiceLibrary.Implementations.CustomerModules;
using Group.Salto.ServiceLibrary.Common.Contracts.CustomerModules;
using Group.Salto.ServiceLibrary.Implementations.ZoneProjectPostalCode;
using Group.Salto.ServiceLibrary.Common.Contracts.ZoneProjectPostalCode;
using Group.Salto.ServiceLibrary.Common.Contracts.ErpSystemInstance;
using Group.Salto.ServiceLibrary.Implementations.ErpSystemInstance;
using Group.Salto.ServiceLibrary.Implementations.BillingRuleItemService;
using Group.Salto.ServiceLibrary.Common.Contracts.BillingRuleItem;

namespace Microsoft.Extensions.DependencyInjection
{
    public class ResolverIoC : Module
    {
        private readonly IConfiguration _configuration;

        public ResolverIoC(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        protected override void Load(ContainerBuilder builder)
        {
            base.Load(builder);
            RegisterTenantRepositoryLayer(builder);
            RegisterRepositoryLayer(builder);
            RegisterServiceLayer(builder);
            RegisterAgentLayer(builder);
            builder.Register(context => new Log4netLoggingService(ThisAssembly, "Salto.SOM")).As<ILoggingService>().SingleInstance();
        }

        private void RegisterRepositoryLayer(ContainerBuilder builder)
        {
            builder.RegisterType<TenantCreatorService>().As<ITenantCreatorService>()
                .WithParameter(AppConstants.ConfigurationParamenter,
                    _configuration.GetSection(AppsettingsKeys.TenantConfiguration)
                    .Get<TenantConfiguration>())
                .InstancePerLifetimeScope();
            builder.RegisterType<TranslationRepository>().As<ITranslationRepository>().InstancePerLifetimeScope();
            builder.RegisterType<CustomerRepository>().As<ICustomerRepository>().InstancePerLifetimeScope();
            builder.RegisterType<UserRepository>().As<IUserRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ModuleRepository>().As<IModuleRepository>().InstancePerLifetimeScope();
            builder.RegisterType<LanguageRepository>().As<ILanguageRepository>().InstancePerLifetimeScope();
            builder.RegisterType<UserConfigurationRepository>().As<IUserConfigurationRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ActionRepository>().As<IActionRepository>().InstancePerLifetimeScope();
            builder.RegisterType<CountryRepository>().As<ICountryRepository>().InstancePerLifetimeScope();
            builder.RegisterType<MunicipalityRepository>().As<IMunicipalityRepository>().InstancePerLifetimeScope();
            builder.RegisterType<TenantConfigurationRepository>().As<ITenantConfigurationRepository>().InstancePerLifetimeScope();
            builder.RegisterType<EventCategoriesRepository>().As<IEventCategoriesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<AvailabilityCategoriesRepository>().As<IAvailabilityCategoriesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<OriginsRepository>().As<IOriginsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ExtraFieldTypesRepository>().As<IExtraFieldTypesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderDefaultColumnsRepository>().As<IWorkOrderDefaultColumnsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderColumnsRepository>().As<IWorkOrderColumnsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<CalculationTypeRepository>().As<ICalculationTypeRepository>().InstancePerLifetimeScope();
            builder.RegisterType<DamagedEquipmentRepository>().As<IDamagedEquipmentRepository>().InstancePerLifetimeScope();
            builder.RegisterType<DaysTypeRepository>().As<IDaysTypeRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ActionGroupRepository>().As<IActionGroupRepository>().InstancePerLifetimeScope();
            builder.RegisterType<WorkFormRepository>().As<IWorkFormRepository>().InstancePerLifetimeScope();
            builder.RegisterType<CustomerModuleRepository>().As<ICustomerModuleRepository>().InstancePerLifetimeScope();
        }

        private void RegisterTenantRepositoryLayer(ContainerBuilder builder)
        {
            builder.RegisterType<CompanyRepository>().As<ICompanyRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PeopleRepository>().As<IPeopleRepository>().InstancePerLifetimeScope();
            builder.RegisterType<KnowledgeRepository>().As<IKnowledgeRepository>().InstancePerLifetimeScope();
            builder.RegisterType<DepartmentRepository>().As<IDepartmentRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PermissionsRepository>().As<IPermissionsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PeoplePermissionsRepository>().As<IPeoplePermissionsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<TenantConfigurationRepository>().As<ITenantConfigurationRepository>().InstancePerLifetimeScope();
            builder.RegisterType<SubContractRepository>().As<ISubContractRepository>().InstancePerLifetimeScope();
            builder.RegisterType<SalesRateRepository>().As<ISalesRateRepository>().InstancePerLifetimeScope();
            builder.RegisterType<WorkCenterRepository>().As<IWorkCenterRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PointRateRepository>().As<IPointRateRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ProjectRepository>().As<IProjectRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ContractsRepository>().As<IContractsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ClientRepository>().As<IClientRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ContractTypeRepository>().As<IContractTypeRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PostalCodeRepository>().As<IPostalCodeRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ExpenseTicketRepository>().As<IExpenseTicketRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ExpenseTypeRepository>().As<IExpenseTypeRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PaymentMethodRepository>().As<IPaymentMethodRepository>().InstancePerLifetimeScope();
            builder.RegisterType<VehiclesRepository>().As<IVehiclesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ExpenseTicketStatusRepository>().As<Group.Salto.Infrastructure.Common.Repository.Tenant.IExpenseTicketStatusRepository>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderStatusRepository>().As<IWorkOrderStatusRepository>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrdersRepository>().As<IWorkOrdersRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PeopleCostRepository>().As<IPeopleCostRepository>().InstancePerLifetimeScope();
            builder.RegisterType<CalendarRepository>().As<ICalendarRepository>().InstancePerLifetimeScope();
            builder.RegisterType<CalendarEventRepository>().As<ICalendarEventRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ToolsRepository>().As<IToolsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<StatesSlaRepository>().As<IStatesSlaRepository>().InstancePerLifetimeScope();
            builder.RegisterType<SlaRepository>().As<ISlaRepository>().InstancePerLifetimeScope();
            builder.RegisterType<AssetStatusesRepository>().As<IAssetStatusesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<BrandsRepository>().As<IBrandsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ReferenceTimeSlaRepository>().As<IReferenceTimeSlaRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ToolsTypeRepository>().As<IToolsTypeRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ExternalWorkOrderStatusRepository>().As<IExternalWorkOrderStatusRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PredefinedDayStatesRepository>().As<IPredefinedDayStatesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<JourneyRepository>().As<IJourneyRepository>().InstancePerLifetimeScope();
            builder.RegisterType<QueueRepository>().As<IQueueRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PeopleCollectionRepository>().As<IPeopleCollectionRepository>().InstancePerLifetimeScope();
            builder.RegisterType<CollectionsClosureCodesRepository>().As<ICollectionsClosureCodesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PurchaseRateRepository>().As<IPurchaseRateRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ModelsRepository>().As<IModelsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PeopleCalendarsRepository>().As<IPeopleCalendarsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ClosingCodeRepository>().As<IClosingCodeRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PredefinedServiceRepository>().As<IPredefinedServiceRepository>().InstancePerLifetimeScope();
            builder.RegisterType<TaskRepository>().As<ITaskRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ZonesRepository>().As<IZonesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ZoneProjectRepository>().As<IZoneProjectRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PaymentMethodRepository>().As<IPaymentMethodRepository>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderCategoriesRepository>().As<IWorkOrderCategoriesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<CollectionTypeWorkOrdersRepository>().As<ICollectionTypeWorkOrdersRepository>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderCategoriesCollectionRepository>().As<IWorkOrderCategoriesCollectionRepository>().InstancePerLifetimeScope();
            builder.RegisterType<SymptomRepository>().As<ISymptomRepository>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderCategoryCalendarRepository>().As<IWorkOrderCategoryCalendarRepository>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderCategoryPermissionsRepository>().As<IWorkOrderCategoryPermissionsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderCategoryRolesRepository>().As<IWorkOrderCategoryRolesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ExtraFieldsRepository>().As<IExtraFieldsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<SymptomCollectionRepository>().As<ISymptomCollectionRepository>().InstancePerLifetimeScope();
            builder.RegisterType<CollectionsExtraFieldRepository>().As<ICollectionsExtraFieldRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ProjectCalendarRepository>().As<IProjectCalendarRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PeopleProjectsRepository>().As<IPeopleProjectsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ProjectsPermissionsRepository>().As<IProjectsPermissionsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ErpSystemInstanceQueryRepository>().As<IErpSystemInstanceQueryRepository>().InstancePerLifetimeScope();
            builder.RegisterType<CollectionsExtraFieldExtraFieldRepository>().As<ICollectionsExtraFieldExtraFieldRepository>().InstancePerLifetimeScope();
            builder.RegisterType<FinalClientsRepository>().As<IFinalClientsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<AssetsRepository>().As<IAssetsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderTypesRepository>().As<IWorkOrderTypesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ModelsRepository>().As<IModelsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<SiteUserRepository>().As<ISiteUserRepository>().InstancePerLifetimeScope();
            builder.RegisterType<UsagesRepository>().As<IUsagesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<SubFamiliesRepository>().As<ISubFamiliesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<FamiliesRepository>().As<IFamiliesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<SubFamiliesRepository>().As<ISubFamiliesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderViewConfigurationsRepository>().As<IWorkOrderViewConfigurationsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<SitesRepository>().As<ISitesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<SiteCalendarRepository>().As<ISiteCalendarRepository>().InstancePerLifetimeScope();
            builder.RegisterType<FinalClientSiteCalendarRepository>().As<IFinalClientSiteCalendarRepository>().InstancePerLifetimeScope();
            builder.RegisterType<StatesRepository>().As<IStatesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<SitesFinalClientsRepository>().As<ISitesFinalClientsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<LocationsFinalClientsRepository>().As<ILocationsFinalClientsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<FinalClientSiteCalendarRepository>().As<IFinalClientSiteCalendarRepository>().InstancePerLifetimeScope();
            builder.RegisterType<MainWoViewConfigurationsColumnsRepository>().As<IMainWoViewConfigurationsColumnsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<RolesActionGroupsActionsTenantRepository>().As<IRolesActionGroupsActionsTenantRepository>().InstancePerLifetimeScope();
            builder.RegisterType<UserConfigurationRolesTenantRepository>().As<IUserConfigurationRolesTenantRepository>().InstancePerLifetimeScope();
            builder.RegisterType<FormElementsRepository>().As<IFormElementRepository>().InstancePerLifetimeScope();
            builder.RegisterType<FlowsRepository>().As<IFlowsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ExpenseRepository>().As<IExpenseRepository>().InstancePerLifetimeScope();
            builder.RegisterType<RepetitionParametersRepository>().As<IRepetitionParametersRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ServiceRepository>().As<IServiceRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ItemsRepository>().As<IItemsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<SomFileRepository>().As<ISomFileRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ExpenseTicketFileRepository>().As<IExpenseTicketFileRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ItemTypesRepository>().As<IItemTypesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ExpenseTicketStatusRepository>().As<IExpenseTicketStatusRepository>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderAnalysisRepository>().As<IWorkOrderAnalysisRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PointsRateRepository>().As<IPointsRateRepository>().InstancePerLifetimeScope();
            builder.RegisterType<TriggerTypesRepository>().As<ITriggerTypesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PreconditionTypesRepository>().As<IPreconditionTypesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<TasksTypesRepository>().As<ITasksTypesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PostconditionsCollectionRepository>().As<IPostconditionsCollectionRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ItemsSerialNumberStatusesRepository>().As<IItemsSerialNumberStatusesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<BillLineRepository>().As<IBillLineRepository>().InstancePerLifetimeScope();
            builder.RegisterType<BillRepository>().As<IBillRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PostconditionTypesRepository>().As<IPostconditionTypesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PreconditionsRepository>().As<IPreconditionsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ServiceGaugesRepository>().As<IServiceGaugesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<WarehousesRepository>().As<IWarehousesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PeopleNotificationRepository>().As<IPeopleNotificationRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PeoplePushRegistrationRepository>().As<IPeoplePushRegistrationRepository>().InstancePerLifetimeScope();
            builder.RegisterType<WarehouseMovementsRepository>().As<IWarehouseMovementsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<NotificationTemplateTypeRepository>().As<INotificationTemplateTypeRepository>().InstancePerLifetimeScope();
            builder.RegisterType<NotificationTemplateRepository>().As<INotificationTemplateRepository>().InstancePerLifetimeScope();
            builder.RegisterType<LiteralPreconditionsRepository>().As<ILiteralPreconditionsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PermissionsTasksRepository>().As<IPermissionsTasksRepository>().InstancePerLifetimeScope();
            builder.RegisterType<TasksTranslationsRepository>().As<ITasksTranslationsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PreconditionsLiteralValuesRepository>().As<IPreconditionsLiteralValuesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ServicesAnalysisRepository>().As<IServicesAnalysisRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ExtraFieldsValuesRepository>().As<IExtraFieldsValuesRepository>().InstancePerLifetimeScope();
            builder.RegisterType<MailTemplateRepository>().As<IMailTemplateRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ZoneProjectPostalCodeRepository>().As<IZoneProjectPostalCodeRepository>().InstancePerLifetimeScope();
            builder.RegisterType<RolesTenantRepository>().As<IRolesTenantRepository>().InstancePerLifetimeScope();
            builder.RegisterType<BillingRuleRepository>().As<IBillingRuleRepository>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrdersDerivateRepository>().As<IWorkOrdersDerivateRepository>().InstancePerLifetimeScope();
            builder.RegisterType<PostconditionsRepository>().As<IPostconditionsRepository>().InstancePerLifetimeScope();
            builder.RegisterType<ErpSystemInstanceRepository>().As<IErpSystemInstanceRepository>().InstancePerLifetimeScope();
            builder.RegisterType<BillingRuleItemRepository>().As<IBillingRuleItemRepository>().InstancePerLifetimeScope();
        }

        private void RegisterAgentLayer(ContainerBuilder builder)
        {
            builder.RegisterType<DroidPushNotificationAgent>().As<IDroidPushNotificationAgent>().InstancePerLifetimeScope();
            builder.RegisterType<IosPushNotificationAgent>().As<IIosPushNotificationAgent>().InstancePerLifetimeScope();
        }

        private void RegisterServiceLayer(ContainerBuilder builder)
        {
            builder.RegisterType<IdentityService>().As<IIdentityService>().InstancePerLifetimeScope();
            builder.RegisterType<TranslationService>().As<ITranslationService>().InstancePerLifetimeScope();
            builder.RegisterType<CustomerService>().As<ICustomerService>().InstancePerLifetimeScope();
            builder.RegisterType<ModuleService>().As<IModuleService>().InstancePerLifetimeScope();
            builder.RegisterType<PeopleAdapter>().As<IPeopleAdapter>().InstancePerLifetimeScope();
            builder.RegisterType<PeopleService>().As<IPeopleService>().InstancePerLifetimeScope();
            builder.RegisterType<RolService>().As<IRolService>().InstancePerLifetimeScope();
            builder.RegisterType<LanguageService>().As<ILanguageService>().InstancePerLifetimeScope();
            builder.RegisterType<UserConfigurationService>().As<IUserConfigurationService>().InstancePerLifetimeScope();
            builder.RegisterType<ActionService>().As<IActionService>().InstancePerLifetimeScope();
            builder.RegisterType<UserService>().As<IUserService>().InstancePerLifetimeScope();
            builder.RegisterType<AccessService>().As<IAccessService>().InstancePerLifetimeScope();
            builder.RegisterType<KnowledgeService>().As<IKnowledgeService>().InstancePerLifetimeScope();
            builder.RegisterType<KnowledgeQueryFactory>().As<IKnowledgeQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<KnowledgeQueryResult>().As<IKnowledgeQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<CompanyService>().As<ICompanyService>().InstancePerLifetimeScope();
            builder.RegisterType<PermissionsService>().As<IPermissionsService>().InstancePerLifetimeScope();
            builder.RegisterType<PeoplePermissionsService>().As<IPeoplePermissionsService>().InstancePerLifetimeScope();
            builder.RegisterType<CountryService>().As<ICountryService>().InstancePerLifetimeScope();
            builder.RegisterType<NotificationConfigurationService>().As<INotificationConfigurationService>().InstancePerLifetimeScope();
            builder.RegisterType<EmailSendGridNotification>().As<IEmailSendGridNotification>().InstancePerLifetimeScope();
            builder.RegisterType<EmailSmtpNotification>().As<IEmailSmtpNotification>().InstancePerLifetimeScope();
            builder.RegisterType<ActionsRolesService>().As<IActionsRolesService>().InstancePerLifetimeScope();
            builder.RegisterType<TenantConfigurationService>().As<ITenantConfigurationService>().InstancePerLifetimeScope();
            builder.RegisterType<TemplateForgotPasswordService>().As<ITemplateForgotPasswordService>().InstancePerLifetimeScope();
            builder.RegisterType<TenantService>().As<ITenantService>().InstancePerLifetimeScope();
            builder.RegisterType<SubContractService>().As<ISubContractService>().InstancePerLifetimeScope();
            builder.RegisterType<SalesRateService>().As<ISalesRateService>().InstancePerLifetimeScope();
            builder.RegisterType<PriorityService>().As<IPriorityService>().InstancePerLifetimeScope();
            builder.RegisterType<WorkCenterAdapter>().As<IWorkCenterAdapter>().InstancePerLifetimeScope();
            builder.RegisterType<WorkCenterService>().As<IWorkCenterService>().InstancePerLifetimeScope();
            builder.RegisterType<MaturityService>().As<IMaturityService>().InstancePerLifetimeScope();
            builder.RegisterType<PointRateService>().As<IPointRateService>().InstancePerLifetimeScope();
            builder.RegisterType<ProjectService>().As<IProjectsService>().InstancePerLifetimeScope();
            builder.RegisterType<ContractsService>().As<IContractsService>().InstancePerLifetimeScope();
            builder.RegisterType<ClientService>().As<IClientService>().InstancePerLifetimeScope();
            builder.RegisterType<ContractTypeService>().As<IContractTypeService>().InstancePerLifetimeScope();
            builder.RegisterType<PeopleQueryFactory>().As<IPeopleQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<AutocompleteQueryResult>().As<IAutocompleteQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<PeopleWithoutCompanyAndSubContractorQueryResult>().As<IPeopleWithoutCompanyAndSubContractorQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<PeopleByCompanyQueryResult>().As<IPeopleByCompanyQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<PostalCodeService>().As<IPostalCodeService>().InstancePerLifetimeScope();
            builder.RegisterType<WorkCenterQueryFactory>().As<IWorkCenterQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<WorkCenterByCompanyQueryResult>().As<IWorkCenterByCompanyQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<ExpenseService>().As<IExpenseService>().InstancePerLifetimeScope();
            builder.RegisterType<ExpenseTypeService>().As<IExpenseTypeService>().InstancePerLifetimeScope();
            builder.RegisterType<VehiclesService>().As<IVehiclesService>().InstancePerLifetimeScope();
            builder.RegisterType<ToolsService>().As<IToolsService>().InstancePerLifetimeScope();
            builder.RegisterType<SlaService>().As<ISlaService>().InstancePerLifetimeScope();
            builder.RegisterType<AssetStatusesService>().As<IAssetStatusesService>().InstancePerLifetimeScope();
            builder.RegisterType<BrandsService>().As<IBrandsService>().InstancePerLifetimeScope();
            builder.RegisterType<ReferenceTimeSlaService>().As<IReferenceTimeSlaService>().InstancePerLifetimeScope();
            builder.RegisterType<ToolsTypeQueryFactory>().As<IToolsTypeQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<ToolsTypeQueryResult>().As<IToolsTypeQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<ToolsTypeService>().As<IToolsTypeService>().InstancePerLifetimeScope();
            builder.RegisterType<PaymentMethodService>().As<IPaymentMethodService>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderStatusService>().As<IWorkOrderStatusService>().InstancePerLifetimeScope();
            builder.RegisterType<CalendarService>().As<ICalendarService>().InstancePerLifetimeScope();
            builder.RegisterType<AzureBlobStorageService>().As<IAzureBlobStorageService>().InstancePerLifetimeScope();
            builder.RegisterType<PeopleCostService>().As<IPeopleCostService>().InstancePerLifetimeScope();
            builder.RegisterType<EventCategoriesService>().As<IEventCategoriesService>().InstancePerLifetimeScope();
            builder.RegisterType<CalendarEventService>().As<ICalendarEventService>().InstancePerLifetimeScope();
            builder.RegisterType<AvailabilityCategoriesService>().As<IAvailabilityCategoriesService>().InstancePerLifetimeScope();
            builder.RegisterType<ExternalWorkOrderStatusService>().As<IExternalWorkOrderStatusService>().InstancePerLifetimeScope();
            builder.RegisterType<BasicInfoService>().As<IBasicInfoService>().InstancePerLifetimeScope();
            builder.RegisterType<JourneyService>().As<IJourneyService>().InstancePerLifetimeScope();
            builder.RegisterType<QueueService>().As<IQueueService>().InstancePerLifetimeScope();
            builder.RegisterType<PeopleCollectionService>().As<IPeopleCollectionService>().InstancePerLifetimeScope();
            builder.RegisterType<PurchaseRateService>().As<IPurchaseRateService>().InstancePerLifetimeScope();
            builder.RegisterType<ZonesService>().As<IZonesService>().InstancePerLifetimeScope();
            builder.RegisterType<ZoneProjectService>().As<IZoneProjectService>().InstancePerLifetimeScope();
            builder.RegisterType<ClosureCodeService>().As<IClosureCodeService>().InstancePerLifetimeScope();
            builder.RegisterType<OriginsService>().As<IOriginsService>().InstancePerLifetimeScope();
            builder.RegisterType<PeopleCalendarService>().As<IPeopleCalendarService>().InstancePerLifetimeScope();
            builder.RegisterType<ClosingCodeService>().As<IClosingCodeService>().InstancePerLifetimeScope();
            builder.RegisterType<PredefinedServiceService>().As<IPredefinedServiceService>().InstancePerLifetimeScope();
            builder.RegisterType<TasksService>().As<ITasksService>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderCategoriesService>().As<IWorkOrderCategoriesService>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderService>().As<IWorkOrderService>().InstancePerLifetimeScope();
            builder.RegisterType<CollectionTypeWorkOrdersService>().As<ICollectionTypeWorkOrdersService>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderCategoriesCollectionService>().As<IWorkOrderCategoriesCollectionService>().InstancePerLifetimeScope();
            builder.RegisterType<SymptomService>().As<ISymptomService>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderCategoryCalendarService>().As<IWorkOrderCategoryCalendarService>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderCategoriesCollectionQueryFactory>().As<IWorkOrderCategoriesCollectionQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<AutocompleteWOCQueryResult>().As<IAutocompleteWOCQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<ExtraFieldsService>().As<IExtraFieldsService>().InstancePerLifetimeScope();
            builder.RegisterType<SymptomCollectionService>().As<ISymptomCollectionService>().InstancePerLifetimeScope();
            builder.RegisterType<CollectionsExtraFieldService>().As<ICollectionsExtraFieldService>().InstancePerLifetimeScope();
            builder.RegisterType<ProjectCalendarService>().As<IProjectCalendarService>().InstancePerLifetimeScope();
            builder.RegisterType<ExtraFieldTypesService>().As<IExtraFieldTypesService>().InstancePerLifetimeScope();
            builder.RegisterType<ErpSystemInstanceQueryService>().As<IErpSystemInstanceQueryService>().InstancePerLifetimeScope();
            builder.RegisterType<FinalClientsServices>().As<IFinalClientsServices>().InstancePerLifetimeScope();
            builder.RegisterType<FinalClientSiteCalendarServices>().As<IFinalClientSiteCalendarServices>().InstancePerLifetimeScope();
            builder.RegisterType<AssetsService>().As<IAssetsService>().InstancePerLifetimeScope();
            builder.RegisterType<AssetStatusesQueryFactory>().As<IAssetStatusesQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<AssetStatusesAutocompleteQueryResult>().As<IAssetStatusesAutocompleteQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<ModelsService>().As<IModelsService>().InstancePerLifetimeScope();
            builder.RegisterType<ModelsQueryFactory>().As<IModelsQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<ModelsAutocompleteQueryResult>().As<IModelsAutocompleteQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<BrandsQueryFactory>().As<IBrandsQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<BrandsAutocompleteQueryResult>().As<IBrandsAutocompleteQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<FamiliesService>().As<IFamiliesService>().InstancePerLifetimeScope();
            builder.RegisterType<FamiliesQueryFactory>().As<IFamiliesQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<FamiliesAutocompleteQueryResult>().As<IFamiliesAutocompleteQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<SubFamiliesService>().As<ISubFamiliesService>().InstancePerLifetimeScope();
            builder.RegisterType<ZoneProjectPostalCodeService>().As<IZoneProjectPostalCodeService>().InstancePerLifetimeScope();
            builder.RegisterType<SubFamiliesQueryFactory>().As<ISubFamiliesQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<SubFamiliesAutocompleteQueryResult>().As<ISubFamiliesAutocompleteQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderDefaultColumnsService>().As<IWorkOrderDefaultColumnsService>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderColumnsAdapter>().As<IWorkOrderColumnsAdapter>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderQueryAdapter>().As<IWorkOrderQueryAdapter>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderQuerySelect>().As<IWorkOrderQuerySelect>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderQueryForm>().As<IWorkOrderQueryForm>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderQueryWhere>().As<IWorkOrderQueryWhere>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderToDataDto>().As<IWorkOrderToDto>().InstancePerLifetimeScope();
            builder.RegisterType<MunicipalityService>().As<IMunicipalityService>().InstancePerLifetimeScope();
            builder.RegisterType<SitesService>().As<ISitesService>().InstancePerLifetimeScope();
            builder.RegisterType<SitesQueryFactory>().As<ISitesQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<SitesAutocompleteQueryResult>().As<ISitesAutocompleteQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<FinalClientsQueryFactory>().As<IFinalClientsQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<FinalClientsAutocompleteQueryResult>().As<IFinalClientsAutocompleteQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<ProjectQueryFactory>().As<IProjectQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<ProjectAutocompleteQueryResult>().As<IProjectAutocompleteQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderCategoryQueryFactory>().As<IWorkOrderCategoryQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderCategoryAutocompleteQueryResult>().As<IWorkOrderCategoryAutocompleteQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<StateService>().As<IStateService>().InstancePerLifetimeScope();
            builder.RegisterType<StateQueryFactory>().As<IStateQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<StateAutocompleteQueryResult>().As<IStateAutocompleteQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<PeopleTechnicians>().As<IPeopleTechnicians>().InstancePerLifetimeScope();
            builder.RegisterType<SiteUserService>().As<ISiteUserService>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderQueryOrderBy>().As<IWorkOrderQueryOrderBy>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderQueryPagination>().As<IWorkOrderQueryPagination>().InstancePerLifetimeScope();
            builder.RegisterType<SitesFinalClientsService>().As<ISitesFinalClientsService>().InstancePerLifetimeScope();
            builder.RegisterType<RolesActionGroupsActionsTenantService>().As<IRolesActionGroupsActionsTenantService>().InstancePerLifetimeScope();
            builder.RegisterType<UserConfigurationRolesTenantService>().As<IUserConfigurationRolesTenantService>().InstancePerLifetimeScope();
            builder.RegisterType<RolesActionGroupsActionsTenantAdapter>().As<IRolesActionGroupsActionsTenantAdapter>().InstancePerLifetimeScope();
            builder.RegisterType<RepetitionParameterService>().As<IRepetitionParameterService>().InstancePerLifetimeScope();
            builder.RegisterType<FlowsService>().As<IFlowsService>().InstancePerLifetimeScope();
            builder.RegisterType<FormService>().As<IFormService>().InstancePerLifetimeScope();
            builder.RegisterType<ProjectRelatedInfoAdapter>().As<IProjectRelatedInfoAdapter>().InstancePerLifetimeScope();
            builder.RegisterType<AssetsQueryFactory>().As<IAssetsQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<AssetsAutocompleteQueryResult>().As<IAssetsAutocompleteQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<CalculationTypeService>().As<ICalculationTypeService>().InstancePerLifetimeScope();
            builder.RegisterType<DamagedEquipmentService>().As<IDamagedEquipmentService>().InstancePerLifetimeScope();
            builder.RegisterType<DaysTypeService>().As<IDaysTypeService>().InstancePerLifetimeScope();
            builder.RegisterType<TaskFactory>().As<ITaskFactory>().InstancePerLifetimeScope();
            builder.RegisterType<WoAccountingClosingDateExecution>().As<IWoAccountingClosingDateExecution>().InstancePerLifetimeScope();
            builder.RegisterType<WoActionDateTaskExecution>().As<IWoActionDateTaskExecution>().InstancePerLifetimeScope();
            builder.RegisterType<WoAssignmentDateTaskExecution>().As<IWoAssignmentDateTaskExecution>().InstancePerLifetimeScope();
            builder.RegisterType<WoClosingClientDateTaskExecution>().As<IWoClosingClientDateTaskExecution>().InstancePerLifetimeScope();
            builder.RegisterType<WoClosingDateTaskExecution>().As<IWoClosingDateTaskExecution>().InstancePerLifetimeScope();
            builder.RegisterType<WoCreationTaskExecution>().As<IWoCreationTaskExecution>().InstancePerLifetimeScope();
            builder.RegisterType<WoReopenTaskExecution>().As<IWoReopenTaskExecution>().InstancePerLifetimeScope();
            builder.RegisterType<WoRestartSlaTaskExecution>().As<IWoRestartSlaTaskExecution>().InstancePerLifetimeScope();
            builder.RegisterType<WoServiceExecution>().As<IWoServiceExecution>().InstancePerLifetimeScope();
            builder.RegisterType<WoStopSlaTaskExecution>().As<IWoStopSlaTaskExecution>().InstancePerLifetimeScope();
            builder.RegisterType<WoTechnicianAndActDateTaskExecution>().As<IWoTechnicianAndActDateTaskExecution>().InstancePerLifetimeScope();
            builder.RegisterType<WoTechnicianTaskExecution>().As<IWoTechnicianTaskExecution>().InstancePerLifetimeScope();
            builder.RegisterType<ItemsService>().As<IItemsService>().InstancePerLifetimeScope();
            builder.RegisterType<WoAuditoryExecution>().As<IWoAuditoryExecution>().InstancePerLifetimeScope();
            builder.RegisterType<PostconditionFactory>().As<IPostconditionFactory>().InstancePerLifetimeScope();
            builder.RegisterType<SitesCalendarService>().As<ISitesCalendarServices>().InstancePerLifetimeScope();
            builder.RegisterType<ExpenseQueryFactory>().As<IExpenseQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<ExpenseQueryResult>().As<IExpenseQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<ActionDatePostconditionExecution>().As<IActionDatePostconditionExecution>().InstancePerLifetimeScope();
            builder.RegisterType<ActuationEndDatePostconditionExecution>().As<IActuationEndDatePostconditionExecution>().InstancePerLifetimeScope();
            builder.RegisterType<ClientClosingDatePostconditionExecution>().As<IClientClosingDatePostconditionExecution>().InstancePerLifetimeScope();
            builder.RegisterType<ClosingDatePostconditionExecution>().As<IClosingDatePostconditionExecution>().InstancePerLifetimeScope();
            builder.RegisterType<ExternalWoStatusPostconditionExecution>().As<IExternalWoStatusPostconditionExecution>().InstancePerLifetimeScope();
            builder.RegisterType<ManipulatorPostconditionExecution>().As<IManipulatorPostconditionExecution>().InstancePerLifetimeScope();
            builder.RegisterType<ObservationsPostconditionExecution>().As<IObservationsPostconditionExecution>().InstancePerLifetimeScope();
            builder.RegisterType<OtnTypePostconditionExecution>().As<IOtnTypePostconditionExecution>().InstancePerLifetimeScope();
            builder.RegisterType<ParentWoExternalStatusPostconditionExecution>().As<IParentWoExternalStatusPostconditionExecution>().InstancePerLifetimeScope();
            builder.RegisterType<PickUpDatePostconditionExecution>().As<IPickupDatePostconditionExecution>().InstancePerLifetimeScope();
            builder.RegisterType<QueuePostconditionExecution>().As<IQueuePostconditionExecution>().InstancePerLifetimeScope();
            builder.RegisterType<ResolutionDatePostconditionExecution>().As<IResolutionDatePostconditionExecution>().InstancePerLifetimeScope();
            builder.RegisterType<TechnicianPostconditionExecution>().As<ITechnicianPostconditionExecution>().InstancePerLifetimeScope();
            builder.RegisterType<WoStatusPostconditionExecution>().As<IWoStatusPostconditionExecution>().InstancePerLifetimeScope();
            builder.RegisterType<ParentWoStatusPostconditionExecute>().As<IParentWoStatusPostconditionExecute>().InstancePerLifetimeScope();
            builder.RegisterType<ParentWoQueuePostconditionExecute>().As<IParentWoQueuePostconditionExecute>().InstancePerLifetimeScope();
            builder.RegisterType<AssignmentDatePostconditionExecution>().As<IAssignmentDatePostconditionExecution>().InstancePerLifetimeScope();
            builder.RegisterType<WoPickupDateTaskExecution>().As<IWoPickupDateTaskExecution>().InstancePerLifetimeScope();
            builder.RegisterType<WoInternalClosingDateTaskExecute>().As<IWoInternalClosingDateTaskExecute>().InstancePerLifetimeScope();
            builder.RegisterType<WoDerivedServicesTaskExecution>().As<IWoDerivedServicesTaskExecution>().InstancePerLifetimeScope();
            builder.RegisterType<WoDerivedWorkOrderTaskExecution>().As<IWoDerivedWorkOrderTaskExecution>().InstancePerLifetimeScope();
            builder.RegisterType<AnalysisTaskExecution>().As<IAnalysisTaskExecution>().InstancePerLifetimeScope();
            builder.RegisterType<ItemTypesService>().As<IItemTypesService>().InstancePerLifetimeScope();
            builder.RegisterType<AnalysisService>().As<IAnalysisService>().InstancePerLifetimeScope();
            builder.RegisterType<WoAnalysisService>().As<IWoAnalysisService>().InstancePerLifetimeScope();
            builder.RegisterType<DerivedCloneService>().As<IDerivedCloneService>().InstancePerLifetimeScope();
            builder.RegisterType<BillAnalysisService>().As<IBillAnalysisService>().InstancePerLifetimeScope();
            builder.RegisterType<TriggerService>().As<ITriggerService>().InstancePerLifetimeScope();
            builder.RegisterType<TriggerTypesService>().As<ITriggerTypesService>().InstancePerLifetimeScope();
            builder.RegisterType<PreconditionTypesService>().As<IPreconditionTypesService>().InstancePerLifetimeScope();
            builder.RegisterType<TasksTypesService>().As<ITasksTypesService>().InstancePerLifetimeScope();
            builder.RegisterType<ItemsSerialNumberStatusesService>().As<IItemsSerialNumberStatusesService>().InstancePerLifetimeScope();
            builder.RegisterType<WoBillableRulesTaskExecution>().As<IWoBillableRulesTaskExecution>().InstancePerLifetimeScope();
            builder.RegisterType<TemplateProcessorService>().As<ITemplateProcessorService>().InstancePerLifetimeScope();
            builder.RegisterType<BillService>().As<IBillService>().InstancePerLifetimeScope();
            builder.RegisterType<BillLineService>().As<IBillLineService>().InstancePerLifetimeScope();
            builder.RegisterType<NcalcService>().As<INcalcService>().InstancePerLifetimeScope();
            builder.RegisterType<WoSubscribersNotificationsTaskExecution>().As<IWoSubscribersNotificationsTaskExecution>().InstancePerLifetimeScope();
            builder.RegisterType<PostconditionsService>().As<IPostconditionsService>().InstancePerLifetimeScope();
            builder.RegisterType<PreconditionsService>().As<IPreconditionsService>().InstancePerLifetimeScope();
            builder.RegisterType<PostconditionTypesService>().As<IPostconditionTypesService>().InstancePerLifetimeScope();
            builder.RegisterType<WarehousesService>().As<IWarehousesService>().InstancePerLifetimeScope();
            builder.RegisterType<MaterialService>().As<IMaterialService>().InstancePerLifetimeScope();
            builder.RegisterType<PushNotificationService>().As<IPushNotificationService>().InstancePerLifetimeScope();
            builder.RegisterType<PushSendNotification>().As<IPushSendNotification>().InstancePerLifetimeScope();
            builder.RegisterType<WarehouseMovementsService>().As<IWarehouseMovementsService>().InstancePerLifetimeScope();
            builder.RegisterType<LiteralPreconditionsService>().As<ILiteralPreconditionsService>().InstancePerLifetimeScope();
            builder.RegisterType<ServiceGaugesService>().As<IServiceGaugesService>().InstancePerLifetimeScope();
            builder.RegisterType<ItemsQueryFactory>().As<IItemsQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<ItemsAutocompleteQueryResult>().As<IItemsAutocompleteQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderCalculateSLADate>().As<IWorkOrderCalculateSLADate>().InstancePerLifetimeScope();
            builder.RegisterType<OrderedCalendars>().As<IOrderedCalendars>().InstancePerLifetimeScope();
            builder.RegisterType<ClientQueryFactory>().As<IClientQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<ClientAutocompleteQueryResult>().As<IClientsAutocompleteQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<LiteralQueryFactory>().As<ILiteralQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<ProjectLiteralQueryResult>().As<IProjectLiteralQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<AssetLiteralQueryResult>().As<IAssetLiteralQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<FinalClientLiteralQueryResult>().As<IFinalClientLiteralQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<QueueLiteralQueryResult>().As<IQueueLiteralQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<StateLiteralQueryResult>().As<IStateLiteralQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderCategoriesLiteralQueryResult>().As<IWorkOrderCategoriesLiteralQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<ZoneLiteralQueryResult>().As<IZoneLiteralQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<WoStatusLiteralQueryResult>().As<IWoStatusLiteralQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<ExternalWoLiteralQueryResult>().As<IExternalWoLiteralQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<ImportToExcel>().As<IImportToExcel>().InstancePerLifetimeScope();
            builder.RegisterType<ActionGroupService>().As<IActionGroupService>().InstancePerLifetimeScope();
            builder.RegisterType<PeopleTechnicianLiteralQueryResult>().As<IPeopleTechnicianLiteralQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<SitesFinalClientLiteralQueryResult>().As<ISitesFinalClientLiteralQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderViewConfigurationsServices>().As<IWorkOrderViewConfigurationsServices>().InstancePerLifetimeScope();
            builder.RegisterType<WOTypeLiteralQueryResult>().As<IWOTypeLiteralQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderViewMultiselect>().As<IWorkOrderViewMultiselect>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderViewToolTip>().As<IWorkOrderViewToolTip>().InstancePerLifetimeScope();
            builder.RegisterType<QueueQueryFactory>().As<IQueueQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<QueueAutocompleteQueryResult>().As<IQueueAutocompleteQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<MailTemplateService>().As<IMailTemplateService>().InstancePerLifetimeScope();
            builder.RegisterType<MailTemplateQueryFactory>().As<IMailTemplateQueryFactory>().InstancePerLifetimeScope();
            builder.RegisterType<MailTemplateAutocompleteQueryResult>().As<IMailTemplateAutocompleteQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<WorkFormService>().As<IWorkFormService>().InstancePerLifetimeScope();
            builder.RegisterType<TriggerFactory>().As<ITriggerFactory>().InstancePerLifetimeScope();
            builder.RegisterType<ExternalWoTriggerQueryResult>().As<IExternalWoTriggerQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<QueueTriggerQueryResult>().As<IQueueTriggerQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<WOStatusTriggerQueryResult>().As<IWOStatusTriggerQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<PeopleTechnicianTriggerQueryResult>().As<IPeopleTechnicianTriggerQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<PredefinedServiceTriggerQueryResult>().As<IPredefinedServiceTriggerQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderViewFilterValues>().As<IWorkOrderViewFilterValues>().InstancePerLifetimeScope();
            builder.RegisterType<RolTenantService>().As<IRolTenantService>().InstancePerLifetimeScope();
            builder.RegisterType<BillingRuleService>().As<IBillingRuleService>().InstancePerLifetimeScope();
            builder.RegisterType<WorkOrderDerivatedService>().As<IWorkOrderDerivatedService>().InstancePerLifetimeScope();
            builder.RegisterType<PostconditionServiceFactory>().As<IPostconditionServiceFactory>().InstancePerLifetimeScope();
            builder.RegisterType<QueuePostconditionQueryResult>().As<IQueuePostconditionQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<WOStatusPostconditionQueryResult>().As<IWOStatusPostconditionQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<ExternalWoPostconditionQueryResult>().As<IExternalWoPostconditionQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<PeopleTechnicianPostconditionQueryResult>().As<IPeopleTechnicianPostconditionQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<WOTypePostconditionQueryResult>().As<IWOTypePostconditionQueryResult>().InstancePerLifetimeScope();
            builder.RegisterType<CustomerModuleService>().As<ICustomerModuleService>().InstancePerLifetimeScope();
            builder.RegisterType<ErpSystemInstanceService>().As<IErpSystemInstanceService>().InstancePerLifetimeScope();
            builder.RegisterType<BillingRuleItemService>().As<IBillingRuleItemService>().InstancePerLifetimeScope();
        }
    }
}