@using Group.Salto.ServiceLibrary.Helpers
@using Group.Salto.SOM.Web.Extensions
@using Group.Salto.SOM.Web.Models.ExpenseTicket
@using Group.Salto.SOM.Web.Models.Result
@using Group.Salto.Controls.Table
@using System;
@using Group.Salto.Common.Constants.ExpenseTicket
@using Group.Salto.Common.Constants.People
@using Group.Salto.Common.Constants

@model ResultViewModel<ExpensesTicketsViewModel>

@{
    ViewData["Title"] = @Html.GetLocalizedText("ExpenseTicketIndexTitle");
    var title = @Html.GetLocalizedText("ExpenseTicketIndexTitle");
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1 class="page-title">@title</h1>

@{
    var table = Html.GetMultiSelectTableFor(Model.Data.ExpenseTickets, au => au.Id, Model.Data.ExpenseTicketFilters, TranslationHelper.GetTranslationService());
    table.SetColumns(m => m.Status, m => m.Date, m => m.ValidationDate, m => m.NamePeople, m => m.WorkOrderId, m => m.ValidationObservations, m => m.Amount);
    table.SetSortingColumns(m => m.Date);
    table.ShowSelectColumn = false;
    table.TableCssClass = "table table-striped table-hover";
    table.TableHeaderCssClass = "thead-som";


    table.AddColumnTemplateFor(m => m.Id,
    @<div class="col-update text-right" data-expenseTicket="@item.RawValue">
        <a asp-action="Details" asp-route-id="@item.RawValue" id="@item.RawValue">
            <i class="fa fa-eye fa-lg"></i>
        </a>
        <a asp-action="Edit" asp-route-id="@item.RawValue" id="@item.RawValue">
            <i class="fa fa-pencil fa-lg"></i>
        </a>
        <a asp-action="Delete" asp-route-id="@item.RawValue" id="@item.RawValue" class="deleteButtonList"
           data-toggle="tooltip" data-placement="top">
            <i class="fa fa-trash-o fa-lg"></i>
        </a>
        <input type="hidden" id="expenseticket-id" value="@item.RawValue" />
    </div>, "");
table.AddColumnTemplateFor(m => m.Status,
@<div>
    @if (String.Compare(item.RawValue, ExpenseTicketConstants.ExpenseTicketAccepted) == 0)
    {
        <span class="button expand tiny x-padding no-margin badge badge-pill expenses-status--accepted">@item.RawValue</span>
    }
    else if (String.Compare(item.RawValue, ExpenseTicketConstants.ExpenseTicketEscaled) == 0)
    {
        <span class="button expand tiny x-padding no-margin badge badge-pill expenses-status--escaled">@item.RawValue</span>
    }
    else if (String.Compare(item.RawValue, ExpenseTicketConstants.ExpenseTicketPending) == 0)
    {
        <span class="button expand tiny x-padding no-margin badge badge-pill expenses-status--pending">@item.RawValue</span>
    }
    else if (String.Compare(item.RawValue, ExpenseTicketConstants.ExpenseTicketPaid) == 0)
    {
        <span class="button expand tiny x-padding no-margin badge badge-pill expenses-status--paid">@item.RawValue</span>
    }
    else if (String.Compare(item.RawValue, ExpenseTicketConstants.ExpenseTicketFinished) == 0)
    {
        <span class="button expand tiny x-padding no-margin badge badge-pill expenses-status--finished">@item.RawValue</span>
    }
    else if (String.Compare(item.RawValue, ExpenseTicketConstants.ExpenseTicketRejected) == 0)
    {
        <span class="button expand tiny x-padding no-margin badge badge-pill expenses-status--rejected">@item.RawValue</span>
    }
    <div id="contextual-menu" class="list-group contextual-menu d-none" data-status="@item.RawValue">
        <a href="#" class="list-group-item list-group-item-action active disabled">
            @Html.GetLocalizedText(ExpenseTicketConstants.ExpenseTicketValidation)
        </a>

        <a href="#" class="list-group-item list-group-item-action d-none" data-toggle="modal" data-target="#AcceptedModal">Aceptar</a>
        <a href="#" class="list-group-item list-group-item-action d-none" data-toggle="modal" data-target="#RejectedModal">Denegar</a>

        <a href="#" class="list-group-item list-group-item-action d-none" data-toggle="modal" data-target="#PaidModal">Pagar</a>
        <a href="#" class="list-group-item list-group-item-action d-none" data-toggle="modal" data-target="#FinishedModal">Finalizar</a>

    </div>

</div>, "");

}
<div class="content">
    <div class="row">
        <div class="col-12">
            <partial name="_ExpenseTicketFilter" model="@Model.Data.ExpenseTicketFilters" />
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            @if (Model.Data.ExpenseTickets.Any())
            {
                <div class="table-responsive workstation-table" id="multigridContainerId">
                    @table.Render("ExpenseTicketsGrid")
                </div>

                <partial name="_Pager" for="@Model.Data.ExpenseTicketFilters" />
            }
            else
            {
                <partial name="_NoRecords" />
            }
        </div>
    </div>
</div>


<popup Text="@Html.GetLocalizedText(ExpenseTicketConstants.ExpenseTicketDeleteMessage)" Id="confirmationModal"
       submit-button-text="@Html.GetLocalizedText(LocalizationsConstants.Confirm)"
       cancel-button-text="@Html.GetLocalizedText(LocalizationsConstants.Close)"></popup>

<input type="hidden" id="expense-ticket-id" />
@section Modals{
    <div class="modal fade" id="AcceptedModal" tabindex="-1" style="display:none;" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-primary" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <form id="AcceptedForm" name="ExpenseTicketForm" asp-controller="ExpenseTicket" asp-action="ValidateExpense">
                        <div id="modalcontaineraccepted" name="modalcontaineraccepted"></div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="RejectedModal" tabindex="-1" style="display:none;" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-primary" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <form id="RejectedForm" name="ExpenseTicketForm" asp-controller="ExpenseTicket" asp-action="ValidateExpense">
                        <div id="modalcontainerrejected" name="modalcontainerrejected"></div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="EscaledModal" tabindex="-1" style="display:none;" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-primary" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <form id="EscaledForm" name="ExpenseTicketForm" asp-controller="ExpenseTicket" asp-action="ValidateExpense">
                        <div id="modalcontainerescaled" name="modalcontainerescaled"></div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="PaidModal" tabindex="-1" style="display:none;" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-primary" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <form id="PaidForm" name="ExpenseTicketForm" asp-controller="ExpenseTicket" asp-action="ValidateExpense">
                        <div id="modalcontainerpaid" name="modalcontainerpaid"></div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="FinishedModal" tabindex="-1" style="display:none;" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-primary" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <form id="FinishedForm" name="ExpenseTicketForm" asp-controller="ExpenseTicket" asp-action="ValidateExpense">
                        <div id="modalcontainerfinished" name="modalcontainerfinished"></div>
                    </form>
                </div>
            </div>
        </div>
    </div>
}
@section Styles{
    <link href="~/lib/dhtmlx/suite/codebase/dhtmlx.css" rel="stylesheet" />
}

@section scripts {
    <script src="~/js/Common/constants.js"></script>
    <script src="~/js/Common/config.js"></script>
    <script src="~/js/Common/validations.js"></script>
    <script src="~/js/MultiComboListSelector.js"></script>
    <script src="~/js/AutocompleteControl.js"></script>
    <script src="~/js/AutoCompleteListSelector.js"></script>
    <script src="~/js/ExpenseTicket/ExpenseTicketCalendar.js"></script>
    <script src="~/js/ExpenseTicket/ExpenseTicket.js"></script>
    <script src="~/js/ExpenseTicket/ExpenseTicketDetail.js"></script>

    <script>

        (function ($) {
            $(document).ready(function () {

                app.expenseticketcalendar.CalendarLoad();
                 var selectedPeople =@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data.ExpenseTicketFilters.NamePeople));
                 var selectedStates = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data.ExpenseTicketFilters.States));
                function getPeopleFilter(text) {
                    var data = {
                        QueryType: app.constants.QueryPeopleExpense,
                        QueryTypeParameters: {
                            Value: text,
                        }
                    }
                    return data;
                }

                function getStatesFilter(text) {
                    var data = {
                        QueryType: app.constants.QueryStates,
                        QueryTypeParameters: {
                            Value: text,
                        }
                    }
                    return data;
                }

                var options = {
                    peopleCombo: {
                        selectedItems: selectedPeople,
                        column1Text: '',
                        column2Text: '@Html.GetLocalizedText(PeopleConstants.PeopleFilterName)',
                        getDataMethod: getPeopleFilter

                    },
                    statesCombo: {
                        selectedItems: selectedStates,
                        column1Text: '',
                        column2Text: '@Html.GetLocalizedText(ExpenseTicketConstants.ExpenseTicketStatesTitle)',
                        getDataMethod: getStatesFilter
                    },
                    contextualMenu: {
                        GetExpense: '@Url.Action("GetExpense", "ExpenseTicket")',
                        container: 'multigridContainerId',
                        menuClass: '.contextual-menu',
                        listItems: 'list-group-item',
                        status: {
                           pending: '@ExpenseTicketConstants.ExpenseTicketPending',
                           escaled: '@ExpenseTicketConstants.ExpenseTicketEscaled',
                           accepted: '@ExpenseTicketConstants.ExpenseTicketAccepted',
                           paid: '@ExpenseTicketConstants.ExpenseTicketPaid',
                           finished: '@ExpenseTicketConstants.ExpenseTicketFinished',
                           rejected: '@ExpenseTicketConstants.ExpenseTicketRejected',
                        }
                    }
                };
                app.expenseticket.detail.Init(options);

                app.expenseticket.Init();
                app.expenseticket.detail.ContextualMenu(options.contextualMenu);
                MultiTableScript("ExpenseTicketGrid");
                var page = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Data.ExpenseTicketFilters));

                pager.PagerSelector.Init({ PageData: page });

                $(".deleteButtonList").on("click",
                    function (evt) {
                        evt.preventDefault();
                        var id = $(this).attr('id');
                            deleteElement(id, "#confirmationModal",
                            "#confirmationModalConfirmSave");
                    });
                $(".btnClear").on("click",
                    function (evt) {
                        app.expenseticket.Init();
                        app.expenseticket.detail.Init(options);

                    });

                function deleteElement(id, modalId, saveButtonId) {
                    $(modalId).modal();

                    $(saveButtonId).on("click",
                        function () {
                            $.ajax({
                                url: '@Url.Action("Delete", "ExpenseTicket")',
                                type: 'POST',
                                dataType: 'json',
                                cache: false,
                                data: { id: id },
                                success: function() {
                                    $("#btnApplyFilter").click();
                                },
                            });
                            $(modalId).modal();
                        });
                }

                $("#confirmationModalConfirmCancel").on("click", function () {
                    $("#confirmationModal").removeClass("in show");
                    $("#confirmationModal").css("display", "none");
                    $("#confirmationModalConfirmSave").off("click");
                });
            });
        })(jQuery);
    </script>
}