@using Group.Salto.Common.Constants
@using Group.Salto.Common.Constants.People
@using Group.Salto.SOM.Web.Extensions
@using Group.Salto.SOM.Web.Models.Result
@using Group.Salto.SOM.Web.Models.People;
@using Group.Salto.Common.Constants.CalendarEvent;
@using Group.Salto.Common.Enums
@model ResultViewModel<PeopleEditViewModel>

@{
    var title = @Html.GetLocalizedText(PeopleConstants.PeopleTitle);
    ViewData["Title"] = title;
    var cultureInfo = Html.GetLanguageCookie().ToLower();
    var GlobalScriptLang = "/lib/dhtmlx/scheduler/codebase/sources/locale/locale_" + cultureInfo + ".js";
    var RecurringScriptLang = "/lib/dhtmlx/scheduler/codebase/sources/locale/recurring/locale_recurring_" + cultureInfo + ".js";
    var claimUserConfigurationId = ((System.Security.Claims.ClaimsIdentity)User.Identity).GetSpecificClaim(AppIdentityClaims.UserId);
}

<form asp-controller="People" asp-action="Edit" method="post" class="form-horizontal">
    <partial name="_PeopleGenericTab" model="Model?.Data" />
    <div class="form-group row">
        <div class="col-12 text-right">
            <input type="button" class="btn btn-outline-danger" onclick="location.href='@Url.Action("Index", "People")'" value="@Html.GetLocalizedText(LocalizationsConstants.CancelText)" />
            <input type="submit" class="btn btn-success spinner-loader" id="btnSendMessage" name="sendMessage" value="@Html.GetLocalizedText(LocalizationsConstants.SaveText)" />
        </div>
    </div>
</form>

@section sideBarMenu {
    <partial name="_CalendarsAvailable" />
}

<div id="costmodal-placeholder"></div>

@section Modals {
    <partial name="_CalendarModal" />
}

@section Styles{
    <link href="~/lib/dhtmlx/suite/codebase/dhtmlx.css" rel="stylesheet" />
    <link href="~/lib/dhtmlx/scheduler/codebase/dhtmlxscheduler_material.css" rel="stylesheet" />
    <link href="~/lib/dhtmlx/scheduler/codebase/dhtmlxscheduler_material__custom.css" rel="stylesheet" />
}

@section scripts {
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=@Model.Data.GeoLocalitzationEditViewModel.Apikey&amp;language=@Model.Data.GeoLocalitzationEditViewModel.Language&amp;region=@Model.Data.GeoLocalitzationEditViewModel.Language.ToUpper()"></script>
    <script src="~/js/Common/constants.js"></script>
    <script src="~/js/Common/config.js"></script>
    <script src="~/js/Common/contrastColor.js"></script>
    <script src="~/js/Bundle/bundle--colorPicker.js"></script>
    <script src="~/js/Bundle/bundle--scheduler.js"></script>
    <script src="~/lib/dhtmlx/suite/sources/dhtmlxCalendar/codebase/dhtmlxcalendar.js"></script>
    <script src="~/js/Scheduler/calendar.js"></script>
    <script src="~/js/Scheduler/Scheduler.js"></script>
    <script src="@GlobalScriptLang"></script>
    <script src="@RecurringScriptLang"></script>
    <script src="~/js/MultiSelect.js"></script>
    <script src="~/js/MultiComboListSelector.js"></script>
    <script src="~/js/Controls/ModalFromList.js"></script>
    <script src="~/js/People/PeopleWork.js"></script>
    <script src="~/js/People/PeopleApi.js"></script>
    <script src="~/js/WorkCenter/WorkCenterApi.js"></script>
    <script src="~/js/People/peopleWorkConstants.js"></script>
    <script src="~/js/Common/mapGeo.js"></script>
    <script src="~/js/Calendar/calendarConstants.js"></script>
    <script src="~/js/Common/authorization.js"></script>

    <script language="javascript">
        var schedulerLoaded = false;
        function loadScheduler() {
            if (!schedulerLoaded) {
                var optionsSheduler = {
                    id: '@Model.Data.PersonalEditViewModel.Id',
                    url: app.config.Urls.peopleCalendar,
                    eventUrl: app.config.Urls.saveCalendarEvents,
                    avariableCalendarUrl: app.config.Urls.getAvariableCalendars,
                    addCalendarUrl: app.config.Urls.addCalendar,
                    initCalendar: true,
                    eventCategory: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.SchedulerViewModel.CalendarEventCategory)),
                    btnSelect: '@Html.GetLocalizedText(LocalizationsConstants.Select)',
                    btnCancel: '@Html.GetLocalizedText(LocalizationsConstants.CancelText)',
                    SequenceNoMove: '@Html.GetLocalizedText(CalendarEventConstants.CalendarEventSequenceNoMove)',
                    NameEmpty: '@Html.GetLocalizedText(CalendarEventConstants.CalendarEventNameEmpty)',
                    CostHourEmpty: '@Html.GetLocalizedText(CalendarEventConstants.CalendarEventCostHourEmpty)',
                    CostHourNotNumber: '@Html.GetLocalizedText(CalendarEventConstants.CalendarEventCostHourNotNumber)',
                    CalendarEmpty :  '@Html.GetLocalizedText(CalendarEventConstants.CalendarEventCalendarIdEmpty)',
                    startDateEmpty: '@Html.GetLocalizedText(CalendarEventConstants.CalendarEventStartDateEmpty)',
                    endDateEmpty: '@Html.GetLocalizedText(CalendarEventConstants.CalendarEventEndDateEmpty)',
                    endDateGreaterThanStartDate: '@Html.GetLocalizedText(CalendarEventConstants.CalendarEventEndDateGreaterThanStartDate)'
                };
                app.Scheduler.Init(optionsSheduler);

                var options = {
                    btnSelect: '@Html.GetLocalizedText(LocalizationsConstants.Select)',
                    btnCancel: '@Html.GetLocalizedText(LocalizationsConstants.CancelText)',
                    color: app.calendar.constants.CalendarColorPickerInitialColor,
                    skin: app.calendar.constants.ColorPickerSkin,
                    parent: app.calendar.constants.CalendarColorPickerParent,
                    input: app.calendar.constants.CalendarColorPickerInput
                }
                app.colorPicker.Init(options);
                schedulerLoaded = true;
            }
        }

        (function ($) {
            $(document).ready(function () {

                $(document).on('shown.bs.modal', '#AddCalendarPeopleModal', function () {
                    app.Scheduler.CleanAddCalendarPeopleModal();
                });

                app.multiselect.Init('@Model?.Data.AccessEditViewModel.Permissions.Name');
                app.peopleWork.Init(
                {
                    urlDepartments: '@Url.Action("GetDepartmentsByCompany", "People")',
                    selectedCompany: '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.WorkEditViewModel.CompanyId ?? 0))',
                    selectedDepartments: '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.WorkEditViewModel.DepartmentId ?? 0))',
                    defaultOptionText: '@Html.GetLocalizedText(LocalizationsConstants.VoidOption)',
                });

                var selectedKnowledge = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.WorkEditViewModel.KnowledgeSelected));
                new multiComboListSelector().Init("#knowledgesContainer",
                {
                    selectedItems: selectedKnowledge,
                    urlPrincipalCombo: '@Url.Action("GetKnowledges", "Knowledge")',
                    urlSecondaryCombo: '@Url.Action("GetMaturities", "Maturity")',
                    collectionProperty: "WorkEditViewModel.KnowledgeSelected",
                    itemIdProperty: "Value",
                    itemTextProperty: "Text",
                    itemIdSecondaryProperty: "ValueSecondary",
                    itemTextSecondaryProperty: "TextSecondary",
                    column1Text: '#',
                    column2Text: '@Html.GetLocalizedText(LocalizationsConstants.Name)',
                    column3Text: '@Html.GetLocalizedText(LocalizationsConstants.Maturity)',
                });

                app.peopleapi.Init(
                {
                    elementSelected: 'WorkEditViewModel_CompanyId',
                    elementFiltered: 'WorkEditViewModel_ResponsibleId',
                    valueSelected: @(Model.Data.WorkEditViewModel.ResponsibleId ?? 0)
                });

                app.workcenterapi.Init(
                {
                    elementSelected: 'WorkEditViewModel_CompanyId',
                    elementFiltered: 'WorkEditViewModel_WorkCenterId',
                    valueSelected: @(Model.Data.WorkEditViewModel.WorkCenterId ?? 0)
                });

                var selectedContacts =  @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.CostSelected));
                var onCreateOverride = function () {
                    $("#" + '@nameof(PeopleCostEditViewModel.PeopleId)').val(@Model.Data.PersonalEditViewModel.Id);
                };

                var modalList = new modalFromList(onCreateOverride);
                modalList.Init("#CostContainer",
                {
                    selectedItems: selectedContacts,
                    collectionPropertyId: "@nameof(PeopleEditViewModel.CostSelected)",
                    collectionPropertyName: "@nameof(PeopleEditViewModel.CostSelected)",
                    linkText: "@Html.GetLocalizedText(@LocalizationsConstants.CreateButtonText)",
                    modalName: '@PeopleConstants.CostModalName',
                    id: '@nameof(PeopleCostEditViewModel.CostId)',
                    columnsText: '#,@Html.GetLocalizedText(PeopleConstants.PeopleCostCostKM),@Html.GetLocalizedText(PeopleConstants.PeopleCostStartDate),@Html.GetLocalizedText(PeopleConstants.PeopleCostEndDate)',
                    columnsModal: '@nameof(PeopleCostEditViewModel.CostId),@nameof(PeopleCostEditViewModel.PeopleId),@nameof(PeopleCostEditViewModel.HourCost),@nameof(PeopleCostEditViewModel.StartDate),@nameof(PeopleCostEditViewModel.EndDate)',
                    columnsValues: '@nameof(PeopleCostEditViewModel.HourCost),@nameof(PeopleCostEditViewModel.StartDate),@nameof(PeopleCostEditViewModel.EndDate)',
                    dataUrl: '@Url.Action("Cost", "People")',
                    placeholderElement: '@PeopleConstants.placeholderElement',
                    saveButton: '@PeopleConstants.PeopleCostConfirmSave',
                    initialIdValue: 0,
                    dateColumns: '@nameof(PeopleCostEditViewModel.StartDate),@nameof(PeopleCostEditViewModel.EndDate)',
                    actionCreate: '@Url.Action("CostCreate", "People")',
                    actionEdit: '@Url.Action("CostEdit", "People")',
                    actionDelete: '@Url.Action("CostDelete", "People")',
                    deleteModalButton: '@PeopleConstants.deleteModalButton',
                    formatDate: '@Model.Data.FormatDate'
                });

                app.mapGeo.Init(
                {
                    inputLatitude: '@nameof(GeoLocalitzationEditViewModel)_@nameof(GeoLocalitzationEditViewModel.Latitude)',
                    inputLongitude: '@nameof(GeoLocalitzationEditViewModel)_@nameof(GeoLocalitzationEditViewModel.Longitude)',
                    inputRatio: '@nameof(GeoLocalitzationEditViewModel)_@nameof(GeoLocalitzationEditViewModel.WorkRadiusKm)',
                    searchcodeaddress: 'searchcodeaddress',
                    mGeoCodeAddressError: '@PeopleConstants.PeopleGeoCodeAddressError',
                    mGeoPosicionBase: '@PeopleConstants.PeopleGeoPosicionBase',
                    mGeoLatitudeIncorrectFormat: '@PeopleConstants.PeopleGeoLatitudeIncorrectFormat',
                    mGeoLongitudeIncorrectFormat: '@PeopleConstants.PeopleGeoLongitudeIncorrectFormat',
                    mGeoRadioIncorrectFormat: '@PeopleConstants.PeopleGeoRadioIncorrectFormat',
                    });

                var saveEdit = @Html.CanDoAction(claimUserConfigurationId, ActionGroupEnum.People, ActionEnum.Update).ToString().ToLower();
                app.common.authorization.disable("btnSendMessage", saveEdit);
            });
        })(jQuery);
    </script>
}