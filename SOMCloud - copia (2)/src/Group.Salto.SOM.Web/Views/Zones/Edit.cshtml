@using Group.Salto.SOM.Web.Models.Zones;
@using Group.Salto.SOM.Web.Models.ZoneProject;
@using Group.Salto.SOM.Web.Models.ZoneProjectPostalCode;
@using Group.Salto.SOM.Web.Models.Result;
@using Group.Salto.SOM.Web.Extensions;
@using Group.Salto.Common.Constants;
@using Group.Salto.Common.Constants.Zones;

@model ResultViewModel<ZoneViewModel>

@{
    ViewData["Title"] = @Html.GetLocalizedText(ZonesConstants.ZonesCreateTitle);
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <div class="col-12">
        <h2 asp-localized-key="ZonesEditTitle"></h2>
        <form id="PrincipalZoneForm" name="PrincipalZoneForm" asp-controller="Zones" asp-action="Edit" method="post" class="form-horizontal">
            <partial name="_ZonesForm" model="Model?.Data" />
            <input type="hidden" id="ZoneProjectSelected " />
            <input type="hidden" id="ActualZoneProjectId" />
        </form>
    </div>
</div>

@section Modals {
    <div id="projectmodal-placeholder"></div>
    <div id="postalcodesmodal-placeholder"></div>
}
@section Scripts{
    <script src="~/js/Controls/ModalFromList.js"></script>
    <script src="~/js/Zones/Zones.js"></script>
    <script src="~/js/Zones/ZonesAjax.js"></script>
    <script src="~/js/Common/config.js"></script>
    <script src="~/js/Zones/ZonesFormSubmit.js"></script>
    <script>
        (function ($) {
            $(document).ready(function () {
                var selectedZones =  @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data.ZonesProjects));
                var onCreateOverride = function () { };
                var modalList = new modalFromList(onCreateOverride);
                modalList.Init("#ProjectContainer",
                {
                    selectedItems: selectedZones,
                    collectionPropertyId: "@nameof(ZoneViewModel.ZonesProjects)",
                    collectionPropertyName: "@nameof(ZoneViewModel.ZonesProjects)",
                    linkText: "@Html.GetLocalizedText(@ZonesConstants.ZonesAddButtonText)",
                    modalName: 'ProjectModal',
                    id: '@nameof(ZoneProjectViewModel.ZoneProjectId)',
                    columnsText: '#,@Html.GetLocalizedText(LocalizationsConstants.Name)',
                    columnsValues: '@nameof(ZoneProjectViewModel.ProjectName)',
                    columnsModal: '@nameof(ZoneProjectViewModel.ZoneId),@nameof(ZoneProjectViewModel.ProjectId),@nameof(ZoneProjectViewModel.ZoneProjectId),@nameof(ZoneProjectViewModel.ProjectName)',
                    dataUrl: '@Url.Action("Project", "Zones")',
                    placeholderElement: 'projectmodal-placeholder',
                    saveButton: 'ProjectConfirmSave',
                    state: '@nameof(ZoneProjectViewModel.State)',
                    initialIdValue: 1
                    });
                app.zones.Init();

            });
            $(document).on('click','a.deleteButton', function (e) {
                $.refreshModal();
            });
            $('#ProjectContainer').on('click', 'tr', function (e) {
                var idZone = $(e.currentTarget).children('input[id$=__ZoneProjectId]').val();
                var zoneProjectName = $(e.currentTarget).children('input[id$=__ProjectName]').val();
                $('#selectedzoneproject').remove();
                $('<label id="selectedzoneproject" class="card-title" >Zone project selected : ' + zoneProjectName + '</label>').insertAfter("#titlepostalcode");
                var existTable = false;
                $('#ActualZoneProjectId').val(idZone);
                $('#PostalCodesContainer').children('div').each(function () {
                    var idRes = $(this).attr('id');
                    if (idRes == idZone) {
                        existTable = true;
                }
                });

                var resultFinal=[];
                if (!existTable) {
                    var result = app.zonesajax.MakeQuery(idZone);
                    function convert(item, index) {
                        resultFinal[index] = {'PostalCodeId': item.postalCodeId,'ZoneProjectId': item.zoneProjectId,'PostalCode': item.postalCode,'ZoneProject': item.zoneProject };
                        resultFinal.length = result.length;
                    }
                    result.forEach(convert);
                    var selectedZonesPostalCode = resultFinal;
                        var onCreateOverride = function () { };
                        var modalListPostal = new modalFromList(onCreateOverride);
                        modalListPostal.Init("#PostalCodesContainer",
                            {
                                selectedItems: selectedZonesPostalCode,
                                collectionPropertyId: "@nameof(ZoneViewModel.SelectedPostalCodes)",
                                collectionPropertyName: "@nameof(ZoneViewModel.SelectedPostalCodes)",
                                linkText: "@Html.GetLocalizedText(@ZonesConstants.ZonesAddButtonText)",
                                modalName: 'PostalCodeModal',
                                id: '@nameof(ZoneProjectPostalCodeViewModel.PostalCodeId)',
                                columnsText: '#,@Html.GetLocalizedText(LocalizationsConstants.Name)',
                                columnsValues: '@nameof(ZoneProjectPostalCodeViewModel.PostalCode)',
                                columnsModal: '@nameof(ZoneProjectPostalCodeViewModel.PostalCodeId),@nameof(ZoneProjectPostalCodeViewModel.PostalCode),@nameof(ZoneProjectViewModel.ZoneProjectId)',
                                dataUrl: '@Url.Action("PostalsCode", "Zones")',
                                placeholderElement: 'postalcodesmodal-placeholder',
                                saveButton: 'PostalCodeConfirmSave',
                                state: '@nameof(ZoneProjectPostalCodeViewModel.State)',
                                initialIdValue: 1
                            });
                        var actual = $('#PostalCodesContainer').children('div:last-child');
                        if (actual.id == null) {
                            $(actual.attr('id', idZone));
                        }
                        actual = $('#PostalCodesContainer').children('div:last-child').prev('div');
                        if (actual.id == null) {
                            $(actual.attr('id', idZone));
                        }

                }
                $('#PostalCodesContainer > div').each(function () {
                    if ($(this).attr('id') !== idZone) {
                        $(this).hide();
                        $(this).prop("disabled", true);
                    }
                    if ($(this).attr('id') === idZone) {
                        $(this).show();
                        $(this).prop("disabled", false);
                    }
                });  
                                           
            });
        })(jQuery);
    </script>
}