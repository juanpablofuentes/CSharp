@using Group.Salto.Common.Constants
@using Group.Salto.SOM.Web.Extensions
@using Group.Salto.SOM.Web.Models.Result
@using Group.Salto.SOM.Web.Models.WorkOrderCategory
@using Group.Salto.SOM.Web.Models.Technicians
@using Group.Salto.Common.Constants.WorkOrderCategory
@using Group.Salto.Common.Constants.Technical
@using Group.Salto.Common.Constants.CalendarEvent
@using Group.Salto.Common.Enums

@model ResultViewModel<WorkOrderCategoryDetailViewModel>

@{
    var title = @Html.GetLocalizedText(WorkOrderCategoryConstants.WOCategoryPageTitle);
    ViewData["Title"] = title;
    var cultureInfo = Html.GetLanguageCookie().ToLower();
    var GlobalScriptLang = "/lib/dhtmlx/scheduler/codebase/sources/locale/locale_" + cultureInfo + ".js";
    var RecurringScriptLang = "/lib/dhtmlx/scheduler/codebase/sources/locale/recurring/locale_recurring_" + cultureInfo + ".js";
    var claimUserConfigurationId = ((System.Security.Claims.ClaimsIdentity)User.Identity).GetSpecificClaim(AppIdentityClaims.UserId);
}

<form asp-controller="WorkOrderCategory" asp-action="Edit" method="post" class="form-horizontal">
    <partial name="_WOCategoryGenericTab" model="Model?.Data" />
    <div class="form-group row">
        <hr />
        <div class="col-12 text-right">
            <input type="button" class="btn btn-outline-danger" onclick="location.href='@Url.Action("Index", "WorkOrderCategory" )'" value="@Html.GetLocalizedText(LocalizationsConstants.CancelText)" />
            <input type="submit" class="btn btn-success spinner-loader" id="btnSendMessage" name="sendMessage" value="@Html.GetLocalizedText(LocalizationsConstants.SaveText)" />
        </div>
    </div>
</form>

@section sideBarMenu {
    <partial name="_CalendarsAvailable" />
}

@section Modals {
    <partial name="_CalendarModal" />
    <div id="Techniciansmodal-placeholder"></div>
}

@section Styles{
    <link href="~/lib/dhtmlx/suite/codebase/dhtmlx.css" rel="stylesheet" />
    <link href="~/lib/dhtmlx/scheduler/codebase/dhtmlxscheduler_material.css" rel="stylesheet" />
    <link href="~/lib/dhtmlx/scheduler/codebase/dhtmlxscheduler_material__custom.css" rel="stylesheet" />
}

@section scripts {
    <script src="~/js/Common/constants.js"></script>
    <script src="~/js/Common/config.js"></script>
    <script src="~/js/Common/ui.js"></script>
    <script src="~/js/Common/contrastColor.js"></script>
    <script src="~/js/Bundle/bundle--colorPicker.js"></script>
    <script src="~/js/Bundle/bundle--scheduler.js"></script>
    <script src="~/js/Scheduler/calendar.js"></script>
    <script src="~/js/Scheduler/Scheduler.js"></script>
    <script src="@GlobalScriptLang"></script>
    <script src="@RecurringScriptLang"></script>
    <script src="~/js/WorkOrderCategories/WorkOrderCategoriesDetail.js"></script>
    <script src="~/js/Technician/TechnicianDetails.js"></script>
    <script src="~/js/Common/uiConstants.js"></script>
    <script src="~/js/WorkOrderCategories/WorkOrderCategoriesConstants.js"></script>
    <script src="~/js/Controls/ModalFromList.js"></script>
    <script src="~/js/MultiSelect.js"></script>
    <script src="~/js/Calendar/calendarConstants.js"></script>
    <script src="~/js/WorkOrderCategories/WorkOrderCategoriesDragAndDrop.js"></script>
    <script src="~/js/MultiComboListSelector.js"></script>
    <script src="~/js/Common/authorization.js"></script>

    <script language="javascript">
    var schedulerLoaded = false;

    function loadScheduler() {
        if (!schedulerLoaded) {
            var optionsSheduler = {
                id: '@Model.Data.GenericEditViewModel.Id',
                url: app.config.Urls.workOrderCategoryCalendar,
                eventUrl: app.config.Urls.saveCalendarEvents,
                avariableCalendarUrl: app.config.Urls.getWOCategoryAvariableCalendars,
                addCalendarUrl: app.config.Urls.addWOCategoryCalendar,
                initCalendar: true,
                eventCategory: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.SchedulerViewModel.CalendarEventCategory)),
                btnSelect: '@Html.GetLocalizedText(LocalizationsConstants.Select)',
                btnCancel: '@Html.GetLocalizedText(LocalizationsConstants.CancelText)',
                SequenceNoMove: '@Html.GetLocalizedText(CalendarEventConstants.CalendarEventSequenceNoMove)',
                NameEmpty: '@Html.GetLocalizedText(CalendarEventConstants.CalendarEventNameEmpty)',
                CostHourEmpty: '@Html.GetLocalizedText(CalendarEventConstants.CalendarEventCostHourEmpty)',
                CostHourNotNumber: '@Html.GetLocalizedText(CalendarEventConstants.CalendarEventCostHourNotNumber)',
                CalendarEmpty :  '@Html.GetLocalizedText(CalendarEventConstants.CalendarEventCalendarIdEmpty)',
                startDateEmpty: '@Html.GetLocalizedText(CalendarEventConstants.CalendarEventStartDateEmpty)',
                endDateEmpty: '@Html.GetLocalizedText(CalendarEventConstants.CalendarEventEndDateEmpty)',
                endDateGreaterThanStartDate: '@Html.GetLocalizedText(CalendarEventConstants.CalendarEventEndDateGreaterThanStartDate)'
            };
            app.Scheduler.Init(optionsSheduler);

            var options = {
                btnSelect: '@Html.GetLocalizedText(LocalizationsConstants.Select)',
                btnCancel: '@Html.GetLocalizedText(LocalizationsConstants.CancelText)',
                color: app.calendar.constants.CalendarColorPickerInitialColor,
                skin: app.calendar.constants.ColorPickerSkin,
                parent: app.calendar.constants.CalendarColorPickerParent,
                input: app.calendar.constants.CalendarColorPickerInput
            }
            app.colorPicker.Init(options);
            schedulerLoaded = true;
        }
    }

    (function ($) {
        $(document).ready(function () {
            app.WorkOrderCategoriesDetail.Init();
            app.WorkOrderCategoriesDragAndDrop.Init();
            app.WorkOrderCategoriesDragAndDrop.AddData([
                {
                    id: 1,
                    name: '@Html.GetLocalizedText(WorkOrderCategoryConstants.WOCategoryCategoryCalendarPreference)',
                    position:@Model.Data.GenericEditViewModel.CategoryCalendarPreference
                },
                {
                    id: 2,
                    name: '@Html.GetLocalizedText(WorkOrderCategoryConstants.WOCategoryClientSiteCalendarPreference)',
                    position:@Model.Data.GenericEditViewModel.ClientSiteCalendarPreference
                },
                {
                    id: 3,
                    name: '@Html.GetLocalizedText(WorkOrderCategoryConstants.WOCategoryProjectCalendarPreference)',
                    position:@Model.Data.GenericEditViewModel.ProjectCalendarPreference
                },
                {
                    id: 4,
                    name: '@Html.GetLocalizedText(WorkOrderCategoryConstants.WOCategorySiteCalendarPreference)',
                    position:@Model.Data.GenericEditViewModel.SiteCalendarPreference
                },
            ]);
            app.multiselect.Init('@Model?.Data.Permissions.Name');
            app.multiselect.Init('@Model?.Data.Roles.Name');
            var selectedContacts = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.TechniciansSelected));
            var onCreateOverride = function () {};
            var modalList = new modalFromList(onCreateOverride);

            modalList.Init("#TechniciansContainer",
            {
                selectedItems: selectedContacts,
                collectionPropertyId: "@nameof(WorkOrderCategoryDetailViewModel.TechniciansSelected)",
                collectionPropertyName: "@nameof(WorkOrderCategoryDetailViewModel.TechniciansSelected)",
                linkText: "@Html.GetLocalizedText(@LocalizationsConstants.CreateButtonText)",
                modalName: 'TechniciansModal',
                id: '@nameof(TechniciansEditViewModel.TechniciansId)',
                columnsText : '#,@Html.GetLocalizedText(TechnicalConstants.TechniciansNameText),@Html.GetLocalizedText(TechnicalConstants.TechniciansCodeText)',
                columnsModal: '@nameof(TechniciansEditViewModel.TechniciansId),@nameof(TechniciansEditViewModel.PeopleId),@nameof(TechniciansEditViewModel.Code),@nameof(TechniciansEditViewModel.TechniciansName)',
                columnsValues: '@nameof(TechniciansEditViewModel.TechniciansName),@nameof(TechniciansEditViewModel.Code)',
                dataUrl: '@Url.Action("Technicians", "Technicians")',
                placeholderElement: 'Techniciansmodal-placeholder',
                saveButton: 'TechniciansConfirmSave',
                initialIdValue: 1
            });

            var selectedKnowledge = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.KnowledgeSelected));
            new multiComboListSelector().Init("#KnowLedgeContainer",
            {
                selectedItems: selectedKnowledge,
                urlPrincipalCombo: '@Url.Action("GetKnowledges", "Knowledge")',
                urlSecondaryCombo: '@Url.Action("GetMaturities", "Maturity")',
                collectionProperty: "KnowledgeSelected",
                itemIdProperty: "Value",
                itemTextProperty: "Text",
                itemIdSecondaryProperty: "ValueSecondary",
                itemTextSecondaryProperty: "TextSecondary",
                column1Text: '#',
                column2Text: '@Html.GetLocalizedText(LocalizationsConstants.Name)',
                column3Text: '@Html.GetLocalizedText(LocalizationsConstants.Maturity)',
                });

            var saveEdit = @Html.CanDoAction(claimUserConfigurationId, ActionGroupEnum.WOCategory, ActionEnum.Update).ToString().ToLower();
            app.common.authorization.disable("btnSendMessage", saveEdit);
        });
    })(jQuery);
    </script>
}