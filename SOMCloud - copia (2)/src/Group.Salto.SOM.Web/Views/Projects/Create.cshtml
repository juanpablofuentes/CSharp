@using Group.Salto.Common.Constants
@using Group.Salto.SOM.Web.Extensions
@using Group.Salto.SOM.Web.Models.Result
@using Group.Salto.SOM.Web.Models.Projects
@using Group.Salto.SOM.Web.Models.Technicians
@using Group.Salto.Common.Constants.Project
@using Group.Salto.Common.Constants.Contracts
@using Group.Salto.Common.Constants.Technical
@using Group.Salto.SOM.Web.Models.Contracts
@using Group.Salto.Common.Constants.PredefinedServices
@using Group.Salto.SOM.Web.Models.PredefinedServices
@using Group.Salto.Common.Enums
@model ResultViewModel<ProjectsDetailViewModel>

@{
    string title = @Html.GetLocalizedText(ProjectConstants.ProjectCreatePageTitle);
    ViewData["Title"] = title;

    var claimUserConfigurationId = ((System.Security.Claims.ClaimsIdentity)User.Identity).GetSpecificClaim(AppIdentityClaims.UserId);
}

<h1 class="page-title">@title</h1>

<div class="content">
    <div class="row justify-content-center">
        <div class="col-12">
            <form asp-controller="Projects" asp-action="Create" method="post" class="form-horizontal">
                <partial name="_ProjectGenericTab" model="Model?.Data" />
                <div class="form-group row">
                    <div class="col-12 text-right">
                        <input type="button" onclick="location.href='@Url.Action("Index", "Projects")'" value="@Html.GetLocalizedText(LocalizationsConstants.CancelText)" class="btn btn-outline-danger" />
                        <input type="submit" class="btn btn-success spinner-loader" id="btnSendMessage" name="sendMessage" value="@Html.GetLocalizedText(LocalizationsConstants.SaveText)" />
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
@section Styles{
    <link href="~/lib/dhtmlx/suite/codebase/dhtmlx.css" rel="stylesheet" />
}

@section Modals {
    <div id="contactmodal-placeholder"></div>
    <div id="Techniciansmodal-placeholder"></div>
    <div id="@PredefinedServicesConstants.PredefinedServicesPlaceholder"></div>
}

@section scripts {
    <script src="~/js/Common/constants.js"></script>
    <script src="~/js/Common/config.js"></script>
    <script src="~/js/Common/ui.js"></script>
    <script src="~/js/Controls/ModalFromList.js"></script>
    <script src="~/js/Projects/ProjectsDetails.js"></script>
    <script src="~/js/Technician/TechnicianDetails.js"></script>
    <script src="~/js/Contacts/ContactsDetails.js"></script>
    <script src="~/js/PredefinedServices/PredefinedServicesDetails.js"></script>
    <script src="~/js/Controls/ModalFromList.js"></script>
    <script src="~/js/MultiSelect.js"></script>
    <script src="~/js/Common/authorization.js"></script>
    <script language="javascript">
    (function ($) {
        $(document).ready(function () {
            app.ProjectsDetails.CalendarLoad();
            app.multiselect.Init('@Model?.Data.GenericDetailViewModel.Permissions.Name');

            var selectedContacts =  @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GenericDetailViewModel?.ContactsSelected));
            var onCreateOverride = function () {};
            var modalList = new modalFromList(onCreateOverride);
            modalList.Init("#ContactContainer",
            {
                selectedItems: selectedContacts,
                collectionPropertyId: "@nameof(ProjectsDetailViewModel.GenericDetailViewModel)_@nameof(ProjectsDetailViewModel.GenericDetailViewModel.ContactsSelected)",
                collectionPropertyName:"@nameof(ProjectsDetailViewModel.GenericDetailViewModel).@nameof(ProjectsDetailViewModel.GenericDetailViewModel.ContactsSelected)",
                linkText: "@Html.GetLocalizedText(@LocalizationsConstants.CreateButtonText)",
                modalName: '@ContractsConstants.ContactModalName',
                id: '@nameof(ContactsEditViewModel.ContactsId)',
                columnsText : '#,@Html.GetLocalizedText(LocalizationsConstants.Name)',
                columnsModal: '@nameof(ContactsEditViewModel.ContactsId),@nameof(ContactsEditViewModel.Name),@nameof(ContactsEditViewModel.FirstSurname),@nameof(ContactsEditViewModel.SecondSurname),@nameof(ContactsEditViewModel.Email),@nameof(ContactsEditViewModel.Telephone),@nameof(ContactsEditViewModel.Position),@nameof(ContactsEditViewModel.FullName)',
                columnsValues: '@nameof(ContactsEditViewModel.FullName)',
                dataUrl: '@Url.Action("Contact", "Contacts")',
                placeholderElement: 'contactmodal-placeholder',
                saveButton: '@ContractsConstants.ContactConfirmSave',
                initialIdValue: 1
            });

            var selectedTechnicians = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.TechniciansSelected));
            var onCreateOverride = function () {};
            var modalList = new modalFromList(onCreateOverride);
            modalList.Init("#TechniciansContainer",
            {
                selectedItems: selectedTechnicians,
                collectionPropertyId: "@nameof(ProjectsDetailViewModel.TechniciansSelected)",
                collectionPropertyName: "@nameof(ProjectsDetailViewModel.TechniciansSelected)",
                linkText: "@Html.GetLocalizedText(@LocalizationsConstants.CreateButtonText)",
                modalName: 'TechniciansModal',
                id: '@nameof(TechniciansEditViewModel.TechniciansId)',
                columnsText : '#,@Html.GetLocalizedText(TechnicalConstants.TechniciansNameText),@Html.GetLocalizedText(TechnicalConstants.TechniciansCodeText)',
                columnsModal: '@nameof(TechniciansEditViewModel.TechniciansId),@nameof(TechniciansEditViewModel.PeopleId),@nameof(TechniciansEditViewModel.Code),@nameof(TechniciansEditViewModel.TechniciansName)',
                columnsValues: '@nameof(TechniciansEditViewModel.TechniciansName),@nameof(TechniciansEditViewModel.Code)',
                dataUrl: '@Url.Action("Technicians", "Technicians")',
                placeholderElement: 'Techniciansmodal-placeholder',
                saveButton: 'TechniciansConfirmSave',
                initialIdValue: 1
             });

            var selectedPredefinedServices = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.PredefinedServicesSelected));
            var onCreateOverride = function () {};
            var modalList = new modalFromList(onCreateOverride);
            modalList.Init("#@PredefinedServicesConstants.PredefinedServicesContainer",
            {
                selectedItems: selectedPredefinedServices,
                collectionPropertyId: "@nameof(ProjectsDetailViewModel.PredefinedServicesSelected)",
                collectionPropertyName: "@nameof(ProjectsDetailViewModel.PredefinedServicesSelected)",
                linkText: "@Html.GetLocalizedText(@LocalizationsConstants.CreateButtonText)",
                modalName: '@PredefinedServicesConstants.PredefinedServicesModal',
                id: '@nameof(PredefinedServicesEditViewModel.PredefinedServicesId)',
                columnsText : '#,@Html.GetLocalizedText(PredefinedServicesConstants.PredefinedServicesNameText),@Html.GetLocalizedText(PredefinedServicesConstants.PredefinedServicesLinkClosingCodeText),@Html.GetLocalizedText(PredefinedServicesConstants.PredefinedServicesBillableText),@Html.GetLocalizedText(PredefinedServicesConstants.PredefinedServicesMustValidateText),@Html.GetLocalizedText(PredefinedServicesConstants.PredefinedServicesExtraFieldCollectionText),@Html.GetLocalizedText(PredefinedServicesConstants.PredefinedServicesPermissionsText)',
                columnsModal: '@nameof(PredefinedServicesEditViewModel.PredefinedServicesId),@nameof(PredefinedServicesEditViewModel.CollectionExtraFieldId),@nameof(PredefinedServicesEditViewModel.CollectionExtraFieldName),@nameof(PredefinedServicesEditViewModel.PredefinedServicesName),@nameof(PredefinedServicesEditViewModel.PredefinedServicesLinkClosingCode),@nameof(PredefinedServicesEditViewModel.PredefinedServicesBillable),@nameof(PredefinedServicesEditViewModel.PredefinedServicesMustValidate),@nameof(PredefinedServicesEditViewModel.PredefinedServicesPermissionsIds),@nameof(PredefinedServicesEditViewModel.PredefinedServicesPermissionsString)',
                columnsValues: '@nameof(PredefinedServicesEditViewModel.PredefinedServicesName),@nameof(PredefinedServicesEditViewModel.PredefinedServicesLinkClosingCode),@nameof(PredefinedServicesEditViewModel.PredefinedServicesBillable),@nameof(PredefinedServicesEditViewModel.PredefinedServicesMustValidate),@nameof(PredefinedServicesEditViewModel.CollectionExtraFieldName),@nameof(PredefinedServicesEditViewModel.PredefinedServicesPermissionsString)',
                dataUrl: '@Url.Action("PredefinedServices", "PredefinedServices")',
                placeholderElement: '@PredefinedServicesConstants.PredefinedServicesPlaceholder',
                saveButton: '@PredefinedServicesConstants.PredefinedServicesConfirmSave',
                initialIdValue: 1,
                state: '@nameof(PredefinedServicesEditViewModel.State)',
                multiSelect: '@nameof(PredefinedServicesConstants.PredefinedServicesPermission),@nameof(PredefinedServicesEditViewModel.PredefinedServicesPermissionsIds),@nameof(PredefinedServicesEditViewModel.PredefinedServicesPermissionsString)',
                textYes: '@Html.GetLocalizedText(LocalizationsConstants.Yes)',
                textNo: '@Html.GetLocalizedText(LocalizationsConstants.No)'
                });

            var saveCreate = @Html.CanDoAction(claimUserConfigurationId, ActionGroupEnum.Project, ActionEnum.Create).ToString().ToLower();
            app.common.authorization.disable("btnSendMessage", saveCreate);
        });
    })(jQuery);
    </script>
}