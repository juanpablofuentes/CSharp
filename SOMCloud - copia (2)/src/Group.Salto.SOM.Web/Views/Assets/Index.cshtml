@using Group.Salto.Common.Constants.Assets
@using Group.Salto.Common.Constants
@using Group.Salto.SOM.Web.Extensions
@using Group.Salto.SOM.Web.Models.Assets
@using Group.Salto.SOM.Web.Models.Result
@using Group.Salto.ServiceLibrary.Helpers
@using Group.Salto.Controls.Table
@model ResultViewModel<AssetsListViewModel>

@{
    var title = Html.GetLocalizedText(AssetsConstants.AssetsListPageTitle);
    ViewData["Title"] = title;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h1 class="page-title">@title <small class="text-muted">@Model.Data.Filters.SitesName</small></h1>
@{
    var table = Html.GetMultiSelectTableFor(Model.Data.AssetsList, au => au.Id, Model.Data.Filters, TranslationHelper.GetTranslationService());
    table.SetColumns(m => m.SerialNumber, m => m.StockNumber, m => m.AssetNumber, m => m.AssetStatusName, m => m.StdEndDate, m => m.BlnEndDate, m => m.ProEndDate);
    table.SetSortingColumns(m => m.SerialNumber);
    table.ShowSelectColumn = true;
    table.TableCssClass = "table table-striped table-hover";
    table.TableHeaderCssClass = "thead-som";

    table.AddColumnTemplateFor(m => m.Id,
    @<div class="col-update text-right">
        
        <a asp-action="Edit" asp-route-id="@item.RawValue" id="@item.RawValue" asp-route-siteId="@Model.Data.FromSiteId" >
            <i class="fa fa-pencil fa-lg"></i>
        </a>
        <a asp-action="Delete" asp-route-id="@item.RawValue" id="@item.RawValue" class="deleteButton"
           data-toggle="tooltip" data-placement="top">
            <i class="fa fa-trash-o fa-lg"></i>
        </a>
    </div>, "");
}


<div class="content">
    <div class="row">
        <div class="col-12">
            <partial name="_TransferForm" model="@Model.Data?.Transfer" />
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <partial name="_AssetsFilter" model="@Model.Data.Filters" />
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            @if (Model.Data.AssetsList.Any())
            {
                <div class="table-responsive workstation-table">
                    @table.Render("AssetsGrid")
                </div>

                <partial name="_Pager" for="@Model.Data.Filters" />
            }
            else
            {
                <partial name="_NoRecords" />
            }
        </div>
        @if (Model.Data.Filters.SitesId != 0)
        {
            <div class="col-12">
                <a asp-controller="Sites" asp-action="Index" asp-route-id="@Model.Data.FinalClientsId" class="btn btn-outline-dark mb-3">
                    <i class="fa fa-arrow-left mr-1"></i> <span asp-localized-key="@AssetsConstants.AssetsGoBackSites"></span>
                </a>
            </div>
        }
    </div>
</div>
@section scripts {
    <script src="~/js/Common/constants.js"></script>
    <script src="~/js/Common/validations.js"></script>
    <script src="~/js/Common/config.js"></script>
    <script src="~/js/Assets/AssetsList.js"></script>
    <script src="~/js/Assets/assetsConstants.js"></script>
    <script src="~/js/AutoCompleteListSelector.js"></script>
    <script src="~/js/AutocompleteControl.js"></script>
    <script>
        (function ($) {
            $(document).ready(function () {
                MultiTableScript("AssetsGrid");
                var page = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Data.Filters));
                pager.PagerSelector.Init({ PageData: page });

                var statusSelected = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.Filters.StatusesSelected));
                var modelsSelected = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.Filters.ModelsSelected));
                var brandsSelected = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.Filters.BrandsSelected));
                var familiesSelected = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.Filters.FamiliesSelected));
                var subFamiliesSelected = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.Filters.SubFamiliesSelected));
                var sitesSelected = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.Filters.SitesSelected));
                var finalClientsSelected =@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.Filters.FinalClientsSelected));

                function getStatusFilter(text) {
                        var data = {
                            QueryType: app.constants.AutoComplete,
                            QueryTypeParameters: {
                                Text: text
                            }
                        }
                        return data;
                };

                var Status = {
                    selectedItems: statusSelected,
                    column1Text: '#',
                    column2Text: '@Html.GetLocalizedText(AssetsConstants.AssetsStatus)',
                    getDataMethod: getStatusFilter
                };

                var Models = {
                    selectedItems: modelsSelected,
                    column1Text: '#',
                    column2Text: '@Html.GetLocalizedText(AssetsConstants.AssetsModel)',
                    getDataMethod: getStatusFilter
                };

                var Brands = {
                    selectedItems: brandsSelected,
                    column1Text: '#',
                    column2Text: '@Html.GetLocalizedText(AssetsConstants.AssetsBrand)',
                    getDataMethod: getStatusFilter
                };

                var Families = {
                    selectedItems: familiesSelected,
                    column1Text: '#',
                    column2Text: '@Html.GetLocalizedText(AssetsConstants.AssetsFamilies)',
                    getDataMethod: getStatusFilter
                };

                var SubFamilies = {
                    selectedItems: subFamiliesSelected,
                    column1Text: '#',
                    column2Text: '@Html.GetLocalizedText(AssetsConstants.AssetsSubFamilies)',
                    getDataMethod: getStatusFilter
                };

                var Sites = {
                    selectedItems: sitesSelected,
                    column1Text: '#',
                    column2Text: '@Html.GetLocalizedText(AssetsConstants.AssetsSites)',
                    getDataMethod: getStatusFilter
                };

                var FinalClients = {
                    selectedItems: finalClientsSelected,
                    column1Text: '#',
                    column2Text: '@Html.GetLocalizedText(AssetsConstants.AssetsFinalClients)',
                    getDataMethod: getStatusFilter
                };

                var TransferFinalClients = {
                    itemIdProperty: 'Client.Value',
                    itemTextProperty: 'Client.Text',
                    getDataMethod: getStatusFilter
                };

                var TransferLocations = {
                    itemIdProperty: 'Location.Value',
                    itemTextProperty: 'Location.Text'
                };

                var TransferUsers = {
                    itemIdProperty: 'User.Value',
                    itemTextProperty: 'User.Text'
                };

                var options = {
                    Status,
                    Models,
                    Brands,
                    Families,
                    SubFamilies,
                    Sites,
                    FinalClients,
                    TransferFinalClients,
                    TransferLocations,
                    TransferUsers
                }

                app.assets.Init(options);
            });
        })(jQuery);
    </script>
}