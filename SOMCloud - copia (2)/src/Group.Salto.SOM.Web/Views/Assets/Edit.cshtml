@using Group.Salto.Common.Constants
@using Group.Salto.Common.Constants.Assets
@using Group.Salto.SOM.Web.Extensions
@using Group.Salto.SOM.Web.Models.Result
@using Group.Salto.SOM.Web.Models.Assets
@model ResultViewModel<AssetsDetailViewModel>

@{
    string title = @Html.GetLocalizedText(AssetsConstants.AssetsDetailsTitle);
    ViewData["Title"] = title;
}

<h1><span asp-localized-key="@AssetsConstants.AssetsDetailsTitle"></span>&nbsp;<small class="text-muted">#@Model?.Data?.GenericDetailViewModel?.Id</small></h1>
<input asp-for="@Model.Data.FromSiteId" type="hidden" />

<div class="content">
    <div class="row justify-content-center">
        <div class="col-12">
            <form asp-controller="Assets" asp-action="Update" method="post" class="form-horizontal">
                <partial name="_AssetsGenericTab" model="Model?.Data" />
                <div class="form-group row">
                    <div class="col-12 text-right">
                        <button asp-localized-key="@LocalizationsConstants.CancelText" id="CancelEditAsset" type="button" class="btn btn-outline-danger"></button>
                        <input type="submit" class="btn btn-success spinner-loader" id="btnSendMessage" name="sendMessage" value="@Html.GetLocalizedText(LocalizationsConstants.SaveText)" />
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>


@section Modals {
    <div id="HiredServicesmodal-placeholder"></div>
}

@section Styles{
    <link href="~/lib/dhtmlx/suite/codebase/dhtmlx.css" rel="stylesheet" />
}
@section Scripts{
    <script src="~/js/AutocompleteControl.js"></script>
    <script src="~/js/Common/constants.js"></script>
    <script src="~/js/Common/validations.js"></script>
    <script src="~/js/Common/config.js"></script>
    <script src="~/js/Common/ui.js"></script>
    <script src="~/js/Assets/AssetsDetails.js"></script>
    <script src="~/js/Controls/ModalFromList.js"></script>
    <script>

        var fromSiteId = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.FromSiteId));
        var urlIndexAssetsFromSiteId = "@Url.Action("Index", "Assets", new { id= "fromSiteId" })";
        var urlIndexAssets = "@Url.Action("Index", "Assets")";

        (function ($) {
        $(document).ready(function () {
            var familiesSelected = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GenericDetailViewModel.Family));
            var subfamiliesSelected = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GenericDetailViewModel.SubFamily));
            var brandsSelected = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GenericDetailViewModel.Brand));
            var modelsSelected = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GenericDetailViewModel.Model));
            var clientsSelected = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GenericDetailViewModel.SiteClient));
            var locationsSelected = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GenericDetailViewModel.SiteLocation));
            var usersSelected = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GenericDetailViewModel.SiteUser));

            function getStatusFilter(text) {
                var data = {
                    QueryType: app.constants.AutoComplete,
                    QueryTypeParameters: {
                        Text: text
                    }
                }
                return data;
            };

            var Brands = {
                hasdefaultItem: brandsSelected == undefined,
                value: (brandsSelected == undefined) ? null : brandsSelected.Text,
                key: (brandsSelected == undefined) ? null : brandsSelected.Value,
                itemIdProperty: 'GenericDetailViewModel.Brand.Value',
                itemTextProperty: 'GenericDetailViewModel.Brand.Text',
                getDataMethod: getStatusFilter
            };

            var Models = {
                hasdefaultItem: modelsSelected == undefined,
                value: (modelsSelected == undefined) ? null : modelsSelected.Text,
                key: (modelsSelected == undefined) ? null : modelsSelected.Value,
                itemIdProperty: 'GenericDetailViewModel.Model.Value',
                itemTextProperty: 'GenericDetailViewModel.Model.Text',
            };

            var Families = {
                hasdefaultItem: familiesSelected == undefined,
                value: (familiesSelected == undefined) ? null : familiesSelected.Text,
                key: (familiesSelected == undefined) ? null : familiesSelected.Value,
                itemIdProperty: 'GenericDetailViewModel.Family.Value',
                itemTextProperty: 'GenericDetailViewModel.Family.Text',
                getDataMethod: getStatusFilter
            };

            var SubFamilies = {
                hasdefaultItem: subfamiliesSelected == undefined,
                value: (subfamiliesSelected == undefined) ? null : subfamiliesSelected.Text,
                key: (subfamiliesSelected == undefined) ? null : subfamiliesSelected.Value,
                selectedItems: subfamiliesSelected,
                itemIdProperty: 'GenericDetailViewModel.SubFamily.Value',
                itemTextProperty: 'GenericDetailViewModel.SubFamily.Text',
            };

            var FinalClients = {
                hasdefaultItem: clientsSelected == undefined,
                value: (clientsSelected == undefined) ? null : clientsSelected.Text,
                key: (clientsSelected == undefined) ? null :clientsSelected.Value,
                itemIdProperty: 'GenericDetailViewModel.SiteClient.Value',
                itemTextProperty: 'GenericDetailViewModel.SiteClient.Text',
                getDataMethod: getStatusFilter
            };

            var Locations = {
                hasdefaultItem: locationsSelected == undefined,
                value: (locationsSelected == undefined) ? null : locationsSelected.Text,
                key: (locationsSelected == undefined) ? null : locationsSelected.Value,
                itemIdProperty: 'GenericDetailViewModel.SiteLocation.Value',
                itemTextProperty: 'GenericDetailViewModel.SiteLocation.Text'
            };

            var Users = {
                hasdefaultItem: usersSelected == undefined,
                value: (usersSelected == undefined) ? null : usersSelected.Text,
                key: (usersSelected == undefined) ? null : usersSelected.Value,
                itemIdProperty: 'GenericDetailViewModel.SiteUser.Value',
                itemTextProperty: 'GenericDetailViewModel.SiteUser.Text'
            };

            var options = {
                Families,
                SubFamilies,
                Brands,
                Models,
                FinalClients,
                Locations,
                Users,
                fromSiteId,
                urlIndexAssetsFromSiteId,
                urlIndexAssets
            }

            var selectedHiredServices = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.SecondaryDetailViewModel?.HiredServices));
            var onCreateOverride = function () {};
            var modalList = new modalFromList(onCreateOverride);
            modalList.Init("#hiredServicesContainer",
            {
                selectedItems: selectedHiredServices,
                collectionPropertyId: "@nameof(AssetsDetailViewModel.SecondaryDetailViewModel)_@nameof(AssetsDetailViewModel.SecondaryDetailViewModel.HiredServices)",
                collectionPropertyName: "@nameof(AssetsDetailViewModel.SecondaryDetailViewModel).@nameof(AssetsDetailViewModel.SecondaryDetailViewModel.HiredServices)",
                linkText: "@Html.GetLocalizedText(@LocalizationsConstants.CreateButtonText)",
                modalName: 'HiredServicesModal',
                id: '@nameof(HiredServicesViewModel.HiredServicesId)',
                columnsText : '#,@Html.GetLocalizedText(AssetsConstants.AssetsHiredServicesName),@Html.GetLocalizedText(AssetsConstants.AssetsHiredServicesObservations)',
                columnsValues: '@nameof(HiredServicesViewModel.HiredServicesName),@nameof(HiredServicesViewModel.HiredServicesObservations)',
                columnsModal: '@nameof(HiredServicesViewModel.HiredServicesId),@nameof(HiredServicesViewModel.HiredServicesName),@nameof(HiredServicesViewModel.HiredServicesObservations)',
                dataUrl: '@Url.Action("HiredServices", "HiredServices")',
                placeholderElement: 'HiredServicesmodal-placeholder',
                saveButton: 'HiredServicesConfirmSave',
                initialIdValue: 1
                });

            app.assets.detail.Init(options);
                app.assets.detail.CalendarLoad();
            });
            })(jQuery);
    </script>
}
