@using Group.Salto.Common.Constants
@using Group.Salto.Common.Constants.Company
@using Group.Salto.SOM.Web.Extensions
@using Group.Salto.SOM.Web.Models.Result;
@using Group.Salto.SOM.Web.Models.Company;
@using Group.Salto.Common.Enums;
@model ResultViewModel<CompanyDetailViewModel>
@{
    var title = @Html.GetLocalizedText(CompanyConstants.CompanyPageTitle);
    ViewData["Title"] = title;
    var claimUserConfigurationId = ((System.Security.Claims.ClaimsIdentity)User.Identity).GetSpecificClaim(AppIdentityClaims.UserId);
}
<div class="row justify-content-center">
    <div class="col-12 col-sm-9">
        <div class="card card-accent-warning">
            <div class="card-header">
                <h2><span asp-localized-key="@CompanyConstants.CompanyDetailPageTitle"></span>&nbsp;<small class="text-muted">#@Model?.Data.Id</small></h2>
            </div>
            <div class="card-body">
                <form asp-controller="Company" asp-action="Detail" method="post" class="form-horizontal">
                    <partial name="_CompanyForm" model="Model?.Data" />
                </form>
            </div>
        </div>
    </div>
</div>
<popup Text="@Html.GetLocalizedText(CompanyConstants.CompanyDeleteDepartmentMessage)"
       Id="confirmationDepartment"
       submit-button-text="@Html.GetLocalizedText(LocalizationsConstants.Confirm)"
       cancel-button-text="@Html.GetLocalizedText(LocalizationsConstants.Close)"></popup>

<popup Text="@Html.GetLocalizedText(CompanyConstants.CompanyExitWihoutSave)"
       Id="confirmationExitWithoutSave"
       submit-button-text="@Html.GetLocalizedText(LocalizationsConstants.Confirm)"
       cancel-button-text="@Html.GetLocalizedText(LocalizationsConstants.Close)"></popup>


@section scripts{
    <script src="~/js/addElementsList.js"></script>
    <script src="~/js/Common/config.js"></script>
    <script src="~/js/Common/constants.js"></script>
    <script src="~/js/AutocompleteControl.js"></script>
    <script src="~/js/AutoCompleteListSelector.js"></script>
    <script src="~/js/Common/validations.js"></script>
    <script src="~/js/Company/CompanyDetail.js"></script>
    <script src="~/js/Common/authorization.js"></script>
    <script>
        (function($) {
            $(document).ready(function() {
                var selected =
                    @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Data?.Departments?.Select(x => new {value = x.Id, text = x.Description, needConfirmDelete = x.HasPeopleAssigned})));
                var available = [];
                $("#departmentList").selecTable({
                    selectedItems: selected,
                    availableItems: available,
                    columns: {
                        show: false
                    },
                    classes: {
                        buttons: {
                            add: "btn btn-primary selecTableRight",
                            remove: "btn btn-primary"
                        }
                    },
                    collectionProperty: "DepartmentsSelected",
                    itemIdProperty: "Id",
                    itemTextProperty: "Description",
                    allowNulls: false,
                    textPlaceHolder: '@Html.GetLocalizedText(LocalizationsConstants.Name)',
                    confirmaMethod: function(methodConfirm, item) {
                        $("#confirmationDepartment").modal("toggle");
                        $("#confirmationDepartmentConfirmSave").on("click",
                            function () {
                                $("#confirmationDepartment").modal("toggle");
                                $("#confirmationDepartmentConfirmSave").off("click");
                                methodConfirm(item);
                            });
                    },
                });
                $("#confirmationDepartmentlConfirmCancel").on("click",
                    function() {
                        $("#confirmationDepartment").modal("toggle");
                        $("#confirmationDepartmentConfirmSave").off("click");
                    });

                function showConfirmSaveMessage(confirmMethod) {
                    if (app.common.validations.GethasDirtyData()) {
                        $("#confirmationExitWithoutSave").modal("toggle");
                        $("#confirmationExitWithoutSaveConfirmSave").on("click",
                            function() {
                                confirmMethod();
                                $("#confirmationExitWithoutSave").modal("toggle");
                                $("#confirmationExitWithoutSaveConfirmSave").off("click");
                            });
                    } else {
                        confirmMethod();
                    }
                }

                $("#confirmationExitWithoutSaveConfirmCancel").on("click",
                    function() {
                        $("#confirmationExitWithoutSave").modal("toggle");
                        $("#confirmationExitWithoutSaveConfirmSave").off("click");
                    });

                var workCentersSelected =
                    @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.WorkCentersSelected));

                function editWorkCenter(value) {
                    showConfirmSaveMessage(function () {
                        var link = "@Url.Action("Edit","WorkCenter", new { id= "workcenterid", companyId=Model.Data.Id })";
                        link = link.replace("workcenterid", value);
                        window.location.href = link;

                    });
                };

                function createWorkCenter(evt) {
                    evt.preventDefault();
                    showConfirmSaveMessage(function () {
                        window.location.href = "/WorkCenter/Create/" + @Model.Data.Id;
                    });
                }

                var options = {
                    workCenters: {
                        selectedItems: workCentersSelected,
                        column2Text: '@Html.GetLocalizedText(LocalizationsConstants.Name)',
                        editMethod: editWorkCenter,
                    },

                };

                app.company.detail.Init(options);

                $("#btnCreateWorkCenter").on("click", createWorkCenter);

                var saveEdit = @Html.CanDoAction(claimUserConfigurationId, ActionGroupEnum.Companies, ActionEnum.Update).ToString().ToLower();
                app.common.authorization.disable("confirmSave", saveEdit);
            });

        })(jQuery);
    </script>
}