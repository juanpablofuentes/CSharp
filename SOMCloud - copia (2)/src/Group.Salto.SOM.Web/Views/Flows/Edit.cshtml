@using Group.Salto.Common.Constants.Flows
@using Group.Salto.SOM.Web.Models.Flows
@using Group.Salto.SOM.Web.Extensions
@using Group.Salto.SOM.Web.Models.Result
@using Group.Salto.Common.Constants

@model ResultViewModel<FlowsDetailViewModel>
@{
    var title = @Html.GetLocalizedText(FlowsConstants.FlowsEditPageTitle);
    ViewData["Title"] = title;
}
@section Styles {
    <link href="~/css/task.css" rel="stylesheet" />
}
<div class="row">
    <div class="col-12">
        <input type="hidden" id="FlowId" value="@Model.Data.Id" />
        <h2><span asp-localized-key="@FlowsConstants.FlowsEditPageTitle"></span>&nbsp;<span class="text-muted">#@Model.Data.Id</span></h2>
        <form asp-controller="Flows" asp-action="Edit" method="post" class="form-horizontal">
            <partial name="_FlowsForm" model="Model?.Data" />
        </form>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <h4>@Html.GetLocalizedText(FlowsConstants.FlowsTasksListTitle)</h4>
        <button class="btn btn-success task-Create" data-toggle="modal" data-target="#modalTask">
            <i class="fa fa-plus"></i> <span asp-localized-key="@LocalizationsConstants.CreateButtonText"></span>
        </button>
        <partial name="_TaskListForm" model="Model?.Data?.TasksList" />
    </div>
</div>

<popup Text="@Html.GetLocalizedText(FlowsConstants.FlowsDeleteMessage)"
       Id="confirmationDeleteFlows"
       submit-button-text="@Html.GetLocalizedText(LocalizationsConstants.Confirm)"
       cancel-button-text="@Html.GetLocalizedText(LocalizationsConstants.CancelText)">
</popup>

@section Modals {
    <partial name="_LiteralsModal" for="@Model.Data.ModalMultiselect" />
    <partial name="_PostconditionModal" />
    <partial name="_TriggersModal" />
    <partial name="_TaskModalForm" for="@Model.Data.FlowTaskEditViewModel" />
    <partial name="_BillingRuleModal" />
    <partial name="_BillingRuleItemModal" />
}

@section Scripts{
    <script src="~/js/Common/constants.js"></script>
    <script src="~/js/Common/validations.js"></script>
    <script src="~/js/Common/config.js"></script>
    <script src="~/js/MultiSelect.js"></script>
    <script src="~/js/Task/taskDetail.js"></script>
    <script src="~/js/Common/uiConstants.js"></script>
    <script src="~/js/Controls/ModalFromList.js"></script>
    <script src="~/js/ComboInputListSelectorFromJson.js"></script>
    <script src="~/js/comboInputListSelector.js"></script>
    <script src="~/js/MultiSelect.js"></script>
    <script src="~/js/AutocompleteControl.js"></script>
    <script src="~/js/Task/TaskDetail.js"></script>
    <script src="~/js/Task/TaskConstants.js"></script>
    <script src="~/js/Task/TaskTranslations.js"></script>
    <script src="~/js/Flows/LiteralPreconditionTypesConstants.js"></script>
    <script src="~/js/Flows/PostconditionTypesConstants.js"></script>
    <script src="~/js/Flows/TriggerTypesConstants.js"></script>
    <script src="~/js/Flows/PostconditionsConstants.js"></script>
    <script src="~/js/Flows/FlowsTriggerModal.js"></script>
    <script src="~/js/Flows/FlowsLoadTasks.js"></script>
    <script src="~/js/Flows/FlowsLoadTrigger.js"></script>
    <script src="~/js/Flows/FlowsLoadPostConditions.js"></script>
    <script src="~/js/Flows/FlowsLoadBillingRules.js"></script>
    <script src="~/js/Flows/FlowsBillingRuleModal.js"></script>
    <script src="~/js/Flows/FlowsBillingRuleItemModal.js"></script>
    <script src="~/js/Task/TaskModal.js"></script>
    <script src="~/js/Flows/FlowsModalsControl.js"></script>
    <script src="~/js/Flows/FlowsPostconditionModal.js"></script>
    <script src="~/js/Flows/FlowWorkOrderDerivate.js"></script>
    <script src="~/lib/readmore-js/readmore.min.js"></script>
    <script>
        (function ($) {

            $(document).ready(function () {
                var options = {
                    getLiteralPreconditionUrl: "@Url.Action("GetLiteralPrecondition", "LiteralPrecondition")",
                    getLiteralValuesUrl: "@Url.Action("GetLiteralValues", "LiteralPrecondition")",
                    getAllPreconditionTypesUrl: "@Url.Action("GetAllPreconditionTypes", "Precondition")",
                    getLiteralValuesByTypeUrl: "@Url.Action("GetLiteralValuesByType", "LiteralPrecondition")",
                    getAllPreconditionTypesByPreconditionUrl: "@Url.Action("GetAllPreconditionTypesByPrecondition", "Precondition")",
                    postEditLiteralPreconditionUrl:"@Url.Action("PostEditLiteral", "LiteralPrecondition")",
                    postNewLiteralPreconditionUrl: "@Url.Action("PostNewLiteral", "LiteralPrecondition")",
                    createPreconditionUrl: "@Url.Action("CreatePrecondition", "Precondition")",
                };

                app.modalControl.Init(options);

                var optionsTask = {
                    getTasksUrl: "@Url.Action("GetTask", "Tasks")",
                    getAllPermissionsUrl: "@Url.Action("GetAllPermissions", "PermissionsTasks")",
                    getAllPreconditionsByTaskUrl: "@Url.Action("GetAllPreconditionByTaskId", "Precondition")",
                    getPostconditionByTaskUrl: "@Url.Action("GetAllPostconditionByTaskId", "Postcondition")",
                    deleteLiteralPreconditionUrl: "@Url.Action("DeleteLiteralPrecondition", "LiteralPrecondition")",
                    deletePreconditionUrl: "@Url.Action("DeletePrecondition", "Precondition")",
                    deleteAllPreconditionUrl: "@Url.Action("DeleteAllPrecondition", "Precondition")",
                    txtReadMore: "@Html.GetLocalizedText(LocalizationsConstants.ReadMore)",
                    txtReadLess: "@Html.GetLocalizedText(LocalizationsConstants.ReadLess)",
                    textYes: "@Html.GetLocalizedText(LocalizationsConstants.Yes)",
                    textNo: "@Html.GetLocalizedText(LocalizationsConstants.No)",
                    textGreaterThan: "@Html.GetLocalizedText(FlowsConstants.FlowsComparisonOperatorGreaterThan)",
                    textLessThan: "@Html.GetLocalizedText(FlowsConstants.FlowsComparisonOperatorLessThan)",
                    textSystemDate: "@Html.GetLocalizedText(FlowsConstants.FlowsSystemDate)",
                    textMinutes: "@Html.GetLocalizedText(FlowsConstants.FlowsMinutes)",
                };

                app.tasks.Init(optionsTask);

                var optionsTrigger = {
                    getTriggerTypeByIdUrl: "@Url.Action("GetTriggerTypeByTaskId", "Trigger")"
                };

                app.trigger.Init(optionsTrigger);

                var optionsTriggerModal = {
                    getTriggerTypesUrl: "@Url.Action("GetTriggerTypes", "Trigger")",
                    getTriggerTypesValuesUrl: "@Url.Action("GetTriggerValues", "Trigger")",
                    postTriggerUrl: "@Url.Action("PostTrigger", "Trigger")",
                };

                app.triggerModal.Init(optionsTriggerModal);

                var optionsPostconditions = {
                    deletePostconditionUrl: "@Url.Action("DeletePostcondition", "Postcondition")",
                    deleteAllPostconditionUrl: "@Url.Action("DeleteAllPostcondition", "Postcondition")",
                    canDeletePostconditionCollectionUrl: "@Url.Action("CanDeletePostconditionCollection", "Postcondition")",
                    deletePostconditionCollectionUrl: "@Url.Action("DeletePostconditionCollection", "Postcondition")",
                    getPostconditionByTaskUrl: "@Url.Action("GetAllPostconditionByTaskId", "Postcondition")",
                    textGreaterThan: "@Html.GetLocalizedText(FlowsConstants.FlowsComparisonOperatorGreaterThan)",
                    textLessThan: "@Html.GetLocalizedText(FlowsConstants.FlowsComparisonOperatorLessThan)",
                    textMinutes: "@Html.GetLocalizedText(FlowsConstants.FlowsMinutes)",
                    textSystemDate: "@Html.GetLocalizedText(FlowsConstants.FlowsSystemDate)",
                    textDeny: "@Html.GetLocalizedText(FlowsConstants.FlowsDeny)",
                    textDuplicate: "@Html.GetLocalizedText(FlowsConstants.FlowsDuplicate)",
                    textModify: "@Html.GetLocalizedText(FlowsConstants.FlowsModify)",
                    textSameToTheTechnician: "@Html.GetLocalizedText(FlowsConstants.FlowsSameToTheTechnician)",
                    textUnassign: "@Html.GetLocalizedText(FlowsConstants.FlowsUnassign)",
                    textYes: "@Html.GetLocalizedText(LocalizationsConstants.Yes)",
                    textNo: "@Html.GetLocalizedText(LocalizationsConstants.No)",
                    textConfirmDelete: "@Html.GetLocalizedText(FlowsConstants.FlowsConfirmDeleteMessage)",
                    textNoDelete: "@Html.GetLocalizedText(FlowsConstants.FlowsNoDeleteMessage)",
                    textNone: "@Html.GetLocalizedText(LocalizationsConstants.None)",
                };

                app.postconditions.Init(optionsPostconditions);

                var optionsPostconditionModal = {
                    getPostconditionTypesByPostconditionUrl: "@Url.Action("GetAllPostconditionTypesByPostcondition", "Postcondition")",
                    getPostconditionValuesUrl: "@Url.Action("GetPostconditionValues", "Postcondition")",
                    postNewPostconditionUrl: "@Url.Action("PostNewPostcondition", "Postcondition")",
                    postEditPostconditionUrl:"@Url.Action("PostUpdatePostcondition", "Postcondition")",
                    getAllPostconditionTypesUrl: "@Url.Action("GetAllPostconditionTypes", "Postcondition")",
                    postNewPostconditionCollectionUrl: "@Url.Action("PostNewPostconditionColection", "Postcondition")",
                    getTypeOtnValuesUrl: "@Url.Action("GetTypeOtnValues", "Postcondition")",
                };

                app.postconditionModal.Init(optionsPostconditionModal);

                $('.viewDetail').on("click", app.tasks.DropDownElemt);
                $('.postconditions-tab').on("click", app.postconditions.CleanAndReloadPrePostconditionTask);
                $('.triggers-tab').on('click', app.trigger.TriggerTypeLoad);
                $('.billingrules-tab').on('click', app.billingrules.BillingRulesTabLoad);
                $('.task-Create').on('click', app.taskmodal.CreateNewTask);
                $('.workorderderivated-tab').on('click', app.FlowWorkOrderDerivate.LoadData);

                var optionsBillingRules = {
                    getBillingRulesByTaskUrl: "@Url.Action("GetAllBillingRulesByTaskId", "BillingRule")",
                    deleteBillingRuleUrl: '@Url.Action("DeleteBillingRule","BillingRule")',
                    deleteBillingRuleItemUrl: '@Url.Action("DeleteBillingRuleItem","BillingRuleItem")',
                    txtReadMore: "@Html.GetLocalizedText(LocalizationsConstants.ReadMore)",
                    txtReadLess: "@Html.GetLocalizedText(LocalizationsConstants.ReadLess)",
                }

                app.billingrules.Init(optionsBillingRules);

                var optionsBillingRuleModal = {
                    getErpSystemsUrl : "@Url.Action("GetErpSystems", "BillingRule")",
                    postCreateBillingRuleUrl : "@Url.Action("PostCreateBillingRule", "BillingRule")",
                    postUpdateBillingRuleUrl: "@Url.Action("PostUpdateBillingRule", "BillingRule")"                    
                }

                app.billingRuleModal.Init(optionsBillingRuleModal);

                var optionsBillingRuleItemModal = {
                    postCreateBillingRuleItemUrl : "@Url.Action("PostCreateBillingRuleItem", "BillingRuleItem")",
                    postUpdateBillingRuleItemUrl : "@Url.Action("PostUpdateBillingRuleItem", "BillingRuleItem")"
                }

                app.billingRuleItemModal.Init(optionsBillingRuleItemModal);

            });
        })(jQuery)

        var CurrentTaskId = 0;
        var taskAvailableTranslations = [];
        var availableLanguages = [];

    </script>
}