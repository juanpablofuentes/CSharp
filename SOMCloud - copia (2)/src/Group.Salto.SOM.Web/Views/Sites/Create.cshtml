@using Group.Salto.Common.Constants
@using Group.Salto.Common.Constants.Sites
@using Group.Salto.Common.Constants.Contracts
@using Group.Salto.SOM.Web.Extensions
@using Group.Salto.SOM.Web.Models.Result
@using Group.Salto.SOM.Web.Models.Sites
@using Group.Salto.SOM.Web.Models.Contracts
@model ResultViewModel<SitesDetailViewModel>

@{
    string title = @Html.GetLocalizedText(SitesConstants.SitesCreateTitle);
    ViewData["Title"] = title;
}

<h1 class="page-title"><span asp-localized-key="@SitesConstants.SitesDetailsTitle"></span>&nbsp;<small class="text-muted">#@Model?.Data?.GenericDetailViewModel?.IdSite</small></h1>

<div class="content">
    <div class="row justify-content-center">
        <div class="col-12">
            <form asp-controller="Sites" asp-action="Create" method="post" class="form-horizontal">
                <partial name="_SitesGenericTab" model="Model?.Data" />
                <div class="form-group row">
                    <div class="col-12 text-right">
                        <input type="button" onclick="location.href='@Url.Action("Index", "Sites", new { id = @Model.Data.GenericDetailViewModel.FinalClientId })'" value="@Html.GetLocalizedText(LocalizationsConstants.CancelText)" class="btn btn-outline-danger" />
                        <input type="submit" class="btn btn-success spinner-loader" id="btnSendMessage" name="sendMessage" value="@Html.GetLocalizedText(LocalizationsConstants.SaveText)" />
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Modals {
    <div id="Contactsmodal-placeholder"></div>
}

@section Scripts{
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=@Model.Data.GeolocationDetailViewModel.Apikey&amp;language=@Model.Data.GeolocationDetailViewModel.Language&amp;region=@Model.Data.GeolocationDetailViewModel.Language.ToUpper()"></script>
    <script src="~/js/Common/constants.js"></script>
    <script src="~/js/Common/validations.js"></script>
    <script src="~/js/Common/config.js"></script>
    <script src="~/js/Common/ui.js"></script>
    <script src="~/js/Common/mapGeo.js"></script>
    <script src="~/js/countryCitySelector.js"></script>
    <script src="~/js/Contacts/ContactsDetails.js"></script>
    <script src="~/js/Controls/ModalFromList.js"></script>
    <script src="~/js/Sites/SitesPostalCodeControl.js"></script>

    <script language="javascript">
        (function ($) {
            $(document).ready(function () {

                var selectedContacts =  @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GenericDetailViewModel?.ContactsSelected));
                var onCreateOverride = function () {};
                var modalList = new modalFromList(onCreateOverride);
                modalList.Init("#ContactsContainer",
                {
                    selectedItems: selectedContacts,
                    collectionPropertyId: "@nameof(SitesDetailViewModel.GenericDetailViewModel)_@nameof(SitesDetailViewModel.GenericDetailViewModel.ContactsSelected)",
                    collectionPropertyName:"@nameof(SitesDetailViewModel.GenericDetailViewModel).@nameof(SitesDetailViewModel.GenericDetailViewModel.ContactsSelected)",
                    linkText: "@Html.GetLocalizedText(@LocalizationsConstants.CreateButtonText)",
                    modalName: '@ContractsConstants.ContactModalName',
                    id: '@nameof(ContactsEditViewModel.ContactsId)',
                    columnsText : '#,@Html.GetLocalizedText(LocalizationsConstants.Name)',
                    columnsModal: '@nameof(ContactsEditViewModel.ContactsId),@nameof(ContactsEditViewModel.Name),@nameof(ContactsEditViewModel.FirstSurname),@nameof(ContactsEditViewModel.SecondSurname),@nameof(ContactsEditViewModel.Email),@nameof(ContactsEditViewModel.Telephone),@nameof(ContactsEditViewModel.Position),@nameof(ContactsEditViewModel.FullName)',
                    columnsValues: '@nameof(ContactsEditViewModel.FullName)',
                    dataUrl: '@Url.Action("Contact", "Contacts")',
                    placeholderElement: 'Contactsmodal-placeholder',
                    saveButton: '@ContractsConstants.ContactConfirmSave',
                    initialIdValue: 1
                });

                var countries = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GeolocationDetailViewModel.Countries?.Select(x=>new{key=x.Key, value=x.Value})));

                new countryCitySelector().Init("#countrySelector",
                {
                    countriesToSelect: countries,
                    countrySelectedProperty: "GeolocationDetailViewModel.CountrySelected",
                    citySelectedProperty: "GeolocationDetailViewModel.CitySelected",
                    stateSelectedProperty: "GeolocationDetailViewModel.StateSelected",
                    regionSelectedProperty: "GeolocationDetailViewModel.RegionSelected",
                    urlCities: '@Url.Action("GetMunicipalitiesByState", "Country")',
                    urlRegions: '@Url.Action("GetRegionsByCountry", "Country")',
                    urlStates: '@Url.Action("GetStatesByRegion", "Country")',
                    defaultOptionText: '@Html.GetLocalizedText(LocalizationsConstants.DefaultOption)',
                    selectedCountry: '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GeolocationDetailViewModel.CountrySelected ?? 0))',
                    selectedCity: '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GeolocationDetailViewModel.CitySelected ?? 0))',
                    selectedState: '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GeolocationDetailViewModel.StateSelected ?? 0))',
                    selectedRegion: '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GeolocationDetailViewModel.RegionSelected ?? 0))',
                    countryText : '@Html.GetLocalizedText(LocalizationsConstants.Country)',
                    regionText : '@Html.GetLocalizedText(LocalizationsConstants.Region)',
                    stateText : '@Html.GetLocalizedText(LocalizationsConstants.State)',
                    cityText: '@Html.GetLocalizedText(LocalizationsConstants.Municipality)',
                    onChangeCountry: app.sitePostalCodeControl.onChangeCountry,
                    onChangeRegion: app.sitePostalCodeControl.onChangeRegion,
                    onChangeState: app.sitePostalCodeControl.onChangeState,
                    onChangeCity: app.sitePostalCodeControl.onChangeCity,
                    displayHorizontal: true
                });

                app.mapGeo.Init(
                {
                    inputLatitude: '@nameof(GeolocationDetailViewModel)_@nameof(GeolocationDetailViewModel.Latitude)',
                    inputLongitude: '@nameof(GeolocationDetailViewModel)_@nameof(GeolocationDetailViewModel.Longitude)',
                    inputRatio: '@nameof(GeolocationDetailViewModel)_@nameof(GeolocationDetailViewModel.WorkRadiusKm)',
                    searchcodeaddress: 'searchcodeaddress',
                    mGeoCodeAddressError: '@SitesConstants.SitesGeoCodeAddressError',
                    mGeoPosicionBase: '@SitesConstants.SitesGeoPosicionBase',
                    mGeoLatitudeIncorrectFormat: '@SitesConstants.SitesGeoLatitudeIncorrectFormat',
                    mGeoLongitudeIncorrectFormat: '@SitesConstants.SitesGeoLongitudeIncorrectFormat',
                    mGeoRadioIncorrectFormat: '@SitesConstants.SitesGeoRadioIncorrectFormat',
                });

                app.sitePostalCodeControl.Init(
                {
                    urlGetCities : '@Url.Action("GetCities", "Country")',
                    urlGetPostalCodesByCityId: app.config.Urls.GetPostalCodeByCityId, 
                    urlCheckPostalCode: app.config.Urls.CheckPostalCodes,
                    urlGetCity : '@Url.Action("GetCity", "Country")',
                    urlGetMunicipality : '@Url.Action("GetMunicipality", "Country")',
                    countries : countries,
                    countrySelectedProperty : "GeolocationDetailViewModel.CountrySelected",
                    citySelectedProperty : "GeolocationDetailViewModel.CitySelected",
                    stateSelectedProperty : "GeolocationDetailViewModel.StateSelected",
                    regionSelectedProperty : "GeolocationDetailViewModel.RegionSelected",
                    urlCities : '@Url.Action("GetMunicipalitiesByState", "Country")',
                    urlRegions : '@Url.Action("GetRegionsByCountry", "Country")',
                    urlStates : '@Url.Action("GetStatesByRegion", "Country")',
                    defaultOptionText : '@Html.GetLocalizedText(LocalizationsConstants.DefaultOption)',
                    countryText : '@Html.GetLocalizedText(LocalizationsConstants.Country)',
                    regionText : '@Html.GetLocalizedText(LocalizationsConstants.Region)',
                    stateText : '@Html.GetLocalizedText(LocalizationsConstants.State)',
                    cityText: '@Html.GetLocalizedText(LocalizationsConstants.Municipality)',
                    selectedCountry: '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GeolocationDetailViewModel.CountrySelected ?? 0))',
                    selectedCity: '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GeolocationDetailViewModel.CitySelected ?? 0))',
                    selectedState: '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GeolocationDetailViewModel.StateSelected ?? 0))',
                    selectedRegion: '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GeolocationDetailViewModel.RegionSelected ?? 0))',
                    selectedMunicipality: '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GeolocationDetailViewModel.MunicipalitySelected ?? 0))',
                    postalCode: '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model?.Data?.GeolocationDetailViewModel.PostalCode))',
                });
            });
        })(jQuery);
    </script>
}