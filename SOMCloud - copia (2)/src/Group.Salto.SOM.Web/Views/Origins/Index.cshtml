@using Group.Salto.Common.Constants
@using Group.Salto.Common.Constants.Origins
@using Group.Salto.SOM.Web.Models.Origins;
@using Group.Salto.Controls.Table
@using Group.Salto.ServiceLibrary.Helpers
@using Group.Salto.SOM.Web.Extensions
@using Group.Salto.SOM.Web.Models.Result

@model ResultViewModel<OriginsListViewModel>

@{
    var title = Html.GetLocalizedText(OriginsConstants.OriginsIndexPageTitle);
    ViewData["Title"] = title;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1 class="page-title">@title</h1>

@{
    var table = Html.GetMultiSelectTableFor(Model.Data.Origins, au => au.Id.Value, Model.Data.OriginFilter, TranslationHelper.GetTranslationService());
    table.SetColumns(m => m.Name, m => m.Description);
    table.SetSortingColumns(m => m.Name, m => m.Name, m => m.Description);
    table.ShowSelectColumn = false;
    table.TableCssClass = "table table-striped table-hover";
    table.TableHeaderCssClass = "thead-som";

    table.AddColumnTemplateFor(m => m.Id,
    @<div class="col-update text-right">
        <a asp-action="Edit" asp-route-id="@item.RawValue" id="@item.RawValue">
            <i class="fa fa-pencil fa-lg"></i>
        </a>
        <a asp-action="Delete" asp-route-id="@item.RawValue" id="@item.RawValue" class="deleteButton"
           data-toggle="tooltip" data-placement="top">
            <i class="fa fa-trash-o fa-lg"></i>
        </a>
    </div>, "");
}

<div class="content">
    <div class="row">
        <div class="col-12">
            <partial name="_OriginsFilter" model="@Model.Data.OriginFilter" />
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            @if (Model.Data.Origins.Any())
            {
                <div class="table-responsive workstation-table" id="miClase">
                    @table.Render("OriginsGrid")
                </div>

                <partial name="_Pager" for="@Model.Data.OriginFilter" />
            }
            else
            {
                <partial name="_NoRecords" />
            }
        </div>
    </div>
</div>

<popup Text="@Html.GetLocalizedText(OriginsConstants.OriginsDeleteWithWorkOrderMessage)" Id="confirmationModalWithAssignment"
       cancel-button-text="@Html.GetLocalizedText(LocalizationsConstants.Close)"
       submit-button-text="@Html.GetLocalizedText(LocalizationsConstants.Confirm)"></popup>


<popup Text="@Html.GetLocalizedText(OriginsConstants.OriginsDeleteMessage)" Id="confirmationModal"
       submit-button-text="@Html.GetLocalizedText(LocalizationsConstants.Confirm)"
       cancel-button-text="@Html.GetLocalizedText(LocalizationsConstants.Close)"></popup>

@section scripts {
    <script src="~/js/Origins/Origins.js"></script>
    <script src="~/js/Common/config.js"></script>

    <script>
        (function ($) {
            $(document).ready(function () {
                app.origins.Init();
                MultiTableScript("OriginsGrid");
                var page = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Data.OriginFilter));

                pager.PagerSelector.Init({ PageData: page });

                $(".deleteButton").on("click", function (evt) {
                    evt.preventDefault();
                    showSpinner();

                    var id = $(this).attr('id');
                    var url = app.config.Urls.originsCanDelete;
                    var cannotBeDeleted = apiCall(url, 'GET', 'json', { id: id });

                    cannotBeDeleted.done(function (data) {
                            hideSpinner();
                            if (data) {
                                $("#confirmationModalWithAssignment").modal("toggle");

                                $("#confirmationModalWithAssignmentConfirmSave").on("click", function () {
                                    $("#confirmationModalWithAssignment").modal("toggle");
                                    $("#confirmationModalWithAssignmentConfirmSave").off("click");

                                    deleteElement(id, "#confirmationModal", "#confirmationModalConfirmSave");
                                });

                            } else {
                                deleteElement(id, "#confirmationModal", "#confirmationModalConfirmSave");
                            }
                        });
                    });

                function deleteElement(id, modalId, saveButtonId) {
                    $(modalId).modal();

                    $(saveButtonId).on("click", function () {
                        var deleteItem = apiCall('@Url.Action("Delete", "Origins")', 'POST', 'json', { id: id });

                        deleteItem.done(function () {
                                $("#btnApplyFilter").click();
                            });
                        $(modalId).modal();
                    });
                }

                $("#confirmationModalConfirmCancel").on("click", function () {
                    $("#confirmationModal").removeClass("in show");
                    $("#confirmationModal").css("display", "none");
                    $("#confirmationModalConfirmSave").off("click");
                });
            });
        })(jQuery);
    </script>
}
